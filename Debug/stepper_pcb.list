
stepper_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e8  080051e8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f0  080051f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080051f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000068  08005260  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005260  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5f6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed3  00000000  00000000  0002d6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  0002f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a57  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f54  00000000  00000000  00030d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea2b  00000000  00000000  00047c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f4d6  00000000  00000000  000566be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f1c  00000000  00000000  000e5b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e9ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005168 	.word	0x08005168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005168 	.word	0x08005168

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_PeriodElapsedCallback>:

uint8_t answer = 0;

int stepState = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d115      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x3e>
     	// HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 0);
        HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, stepState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	bf14      	ite	ne
 8000596:	2301      	movne	r3, #1
 8000598:	2300      	moveq	r3, #0
 800059a:	b2db      	uxtb	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	480a      	ldr	r0, [pc, #40]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005a2:	f001 f961 	bl	8001868 <HAL_GPIO_WritePin>
        stepState = !stepState;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	bf0c      	ite	eq
 80005ae:	2301      	moveq	r3, #1
 80005b0:	2300      	movne	r3, #0
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005b8:	601a      	str	r2, [r3, #0]
    }
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40014800 	.word	0x40014800
 80005c8:	200001a8 	.word	0x200001a8
 80005cc:	40020000 	.word	0x40020000

080005d0 <set_forward_dir>:

void set_forward_dir()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005da:	480a      	ldr	r0, [pc, #40]	; (8000604 <set_forward_dir+0x34>)
 80005dc:	f001 f944 	bl	8001868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2110      	movs	r1, #16
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <set_forward_dir+0x34>)
 80005e6:	f001 f93f 	bl	8001868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <set_forward_dir+0x34>)
 80005f0:	f001 f93a 	bl	8001868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2108      	movs	r1, #8
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <set_forward_dir+0x34>)
 80005fa:	f001 f935 	bl	8001868 <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020400 	.word	0x40020400

08000608 <set_backward_dir>:
void set_backward_dir()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <set_backward_dir+0x34>)
 8000614:	f001 f928 	bl	8001868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <set_backward_dir+0x34>)
 800061e:	f001 f923 	bl	8001868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <set_backward_dir+0x34>)
 8000628:	f001 f91e 	bl	8001868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 800062c:	2201      	movs	r2, #1
 800062e:	2108      	movs	r1, #8
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <set_backward_dir+0x34>)
 8000632:	f001 f919 	bl	8001868 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40020400 	.word	0x40020400

08000640 <set_ccw_dir>:
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
}
void set_ccw_dir()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <set_ccw_dir+0x34>)
 800064c:	f001 f90c 	bl	8001868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2110      	movs	r1, #16
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <set_ccw_dir+0x34>)
 8000656:	f001 f907 	bl	8001868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 800065a:	2200      	movs	r2, #0
 800065c:	2120      	movs	r1, #32
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <set_ccw_dir+0x34>)
 8000660:	f001 f902 	bl	8001868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 8000664:	2200      	movs	r2, #0
 8000666:	2108      	movs	r1, #8
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <set_ccw_dir+0x34>)
 800066a:	f001 f8fd 	bl	8001868 <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40020400 	.word	0x40020400

08000678 <set_cw_dir>:
void set_cw_dir()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	480a      	ldr	r0, [pc, #40]	; (80006ac <set_cw_dir+0x34>)
 8000684:	f001 f8f0 	bl	8001868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	2110      	movs	r1, #16
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <set_cw_dir+0x34>)
 800068e:	f001 f8eb 	bl	8001868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 8000692:	2201      	movs	r2, #1
 8000694:	2120      	movs	r1, #32
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <set_cw_dir+0x34>)
 8000698:	f001 f8e6 	bl	8001868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 800069c:	2201      	movs	r2, #1
 800069e:	2108      	movs	r1, #8
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <set_cw_dir+0x34>)
 80006a2:	f001 f8e1 	bl	8001868 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020400 	.word	0x40020400

080006b0 <enable>:
void enable()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ba:	4802      	ldr	r0, [pc, #8]	; (80006c4 <enable+0x14>)
 80006bc:	f001 f8d4 	bl	8001868 <HAL_GPIO_WritePin>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40020000 	.word	0x40020000

080006c8 <disable>:
void disable()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d2:	4802      	ldr	r0, [pc, #8]	; (80006dc <disable+0x14>)
 80006d4:	f001 f8c8 	bl	8001868 <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40020000 	.word	0x40020000

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fd02 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f83c 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f994 	bl	8000a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f0:	f000 f93e 	bl	8000970 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80006f4:	f000 f966 	bl	80009c4 <MX_USART6_UART_Init>
  MX_TIM11_Init();
 80006f8:	f000 f916 	bl	8000928 <MX_TIM11_Init>
  MX_TIM2_Init();
 80006fc:	f000 f89e 	bl	800083c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, &answer, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	4913      	ldr	r1, [pc, #76]	; (8000750 <main+0x70>)
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <main+0x74>)
 8000706:	f002 fe22 	bl	800334e <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800070a:	2100      	movs	r1, #0
 800070c:	4812      	ldr	r0, [pc, #72]	; (8000758 <main+0x78>)
 800070e:	f001 fe97 	bl	8002440 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
  HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <main+0x7c>)
 800071a:	f001 f8a5 	bl	8001868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2110      	movs	r1, #16
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <main+0x7c>)
 8000724:	f001 f8a0 	bl	8001868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2120      	movs	r1, #32
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <main+0x7c>)
 800072e:	f001 f89b 	bl	8001868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2108      	movs	r1, #8
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <main+0x7c>)
 8000738:	f001 f896 	bl	8001868 <HAL_GPIO_WritePin>

  disable();
 800073c:	f7ff ffc4 	bl	80006c8 <disable>
  while (1)
  {
	  printf("hello world\n");
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <main+0x80>)
 8000742:	f003 fea7 	bl	8004494 <puts>
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 1);
	  // HAL_Delay(100);
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 0);
	  // HAL_Delay(100);
	  HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074a:	f000 fd41 	bl	80011d0 <HAL_Delay>
  {
 800074e:	e7f7      	b.n	8000740 <main+0x60>
 8000750:	200001a4 	.word	0x200001a4
 8000754:	2000015c 	.word	0x2000015c
 8000758:	20000084 	.word	0x20000084
 800075c:	40020400 	.word	0x40020400
 8000760:	08005180 	.word	0x08005180

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 ff6e 	bl	8004654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemClock_Config+0xd0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a28      	ldr	r2, [pc, #160]	; (8000834 <SystemClock_Config+0xd0>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <SystemClock_Config+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <SystemClock_Config+0xd4>)
 80007b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <SystemClock_Config+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d8:	2310      	movs	r3, #16
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e6:	2307      	movs	r3, #7
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f854 	bl	800189c <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fa:	f000 fa13 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2102      	movs	r1, #2
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fab6 	bl	8001d8c <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000826:	f000 f9fd 	bl	8000c24 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	; 0x38
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_TIM2_Init+0xe8>)
 800086e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 419;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MX_TIM2_Init+0xe8>)
 8000876:	f240 12a3 	movw	r2, #419	; 0x1a3
 800087a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <MX_TIM2_Init+0xe8>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000882:	4b28      	ldr	r3, [pc, #160]	; (8000924 <MX_TIM2_Init+0xe8>)
 8000884:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000888:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_TIM2_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <MX_TIM2_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000896:	4823      	ldr	r0, [pc, #140]	; (8000924 <MX_TIM2_Init+0xe8>)
 8000898:	f001 fc98 	bl	80021cc <HAL_TIM_Base_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008a2:	f000 f9bf 	bl	8000c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <MX_TIM2_Init+0xe8>)
 80008b4:	f002 f826 	bl	8002904 <HAL_TIM_ConfigClockSource>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008be:	f000 f9b1 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008c2:	4818      	ldr	r0, [pc, #96]	; (8000924 <MX_TIM2_Init+0xe8>)
 80008c4:	f001 fd63 	bl	800238e <HAL_TIM_PWM_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008ce:	f000 f9a9 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	4619      	mov	r1, r3
 80008e0:	4810      	ldr	r0, [pc, #64]	; (8000924 <MX_TIM2_Init+0xe8>)
 80008e2:	f002 fbd7 	bl	8003094 <HAL_TIMEx_MasterConfigSynchronization>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008ec:	f000 f99a 	bl	8000c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f0:	2360      	movs	r3, #96	; 0x60
 80008f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <MX_TIM2_Init+0xe8>)
 8000908:	f001 ff3a 	bl	8002780 <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000912:	f000 f987 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000916:	4803      	ldr	r0, [pc, #12]	; (8000924 <MX_TIM2_Init+0xe8>)
 8000918:	f000 f9ee 	bl	8000cf8 <HAL_TIM_MspPostInit>

}
 800091c:	bf00      	nop
 800091e:	3738      	adds	r7, #56	; 0x38
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000084 	.word	0x20000084

08000928 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_TIM11_Init+0x40>)
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <MX_TIM11_Init+0x44>)
 8000930:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 39;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_TIM11_Init+0x40>)
 8000934:	2227      	movs	r2, #39	; 0x27
 8000936:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_TIM11_Init+0x40>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2999;
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_TIM11_Init+0x40>)
 8000940:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000944:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_TIM11_Init+0x40>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_TIM11_Init+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_TIM11_Init+0x40>)
 8000954:	f001 fc3a 	bl	80021cc <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800095e:	f000 f961 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000cc 	.word	0x200000cc
 800096c:	40014800 	.word	0x40014800

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_USART2_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a8:	f002 fbf6 	bl	8003198 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f000 f937 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000114 	.word	0x20000114
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_USART6_UART_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART6_UART_Init+0x4c>)
 80009fc:	f002 fbcc 	bl	8003198 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a06:	f000 f90d 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000015c 	.word	0x2000015c
 8000a14:	40011400 	.word	0x40011400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a38      	ldr	r2, [pc, #224]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a31      	ldr	r2, [pc, #196]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_GPIO_Init+0x100>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000aa4:	481d      	ldr	r0, [pc, #116]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000aa6:	f000 fedf 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000ab0:	481b      	ldr	r0, [pc, #108]	; (8000b20 <MX_GPIO_Init+0x108>)
 8000ab2:	f000 fed9 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000abc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4815      	ldr	r0, [pc, #84]	; (8000b24 <MX_GPIO_Init+0x10c>)
 8000ace:	f000 fd47 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 8000ad2:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000aec:	f000 fd38 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000af0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0x108>)
 8000b0a:	f000 fd29 	bl	8001560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40020800 	.word	0x40020800

08000b28 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b30:	1d39      	adds	r1, r7, #4
 8000b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <__io_putchar+0x20>)
 8000b3a:	f002 fb7d 	bl	8003238 <HAL_UART_Transmit>
  return ch;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000114 	.word	0x20000114

08000b4c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* hadc) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	printf("received: %d\n", (int)answer);
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <HAL_UART_RxCpltCallback+0xc4>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	482e      	ldr	r0, [pc, #184]	; (8000c14 <HAL_UART_RxCpltCallback+0xc8>)
 8000b5c:	f003 fc34 	bl	80043c8 <iprintf>
	switch(answer)
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <HAL_UART_RxCpltCallback+0xc4>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	d81e      	bhi.n	8000ba8 <HAL_UART_RxCpltCallback+0x5c>
 8000b6a:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <HAL_UART_RxCpltCallback+0x24>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000b91 	.word	0x08000b91
 8000b74:	08000b97 	.word	0x08000b97
 8000b78:	08000ba9 	.word	0x08000ba9
 8000b7c:	08000b9d 	.word	0x08000b9d
 8000b80:	08000ba9 	.word	0x08000ba9
 8000b84:	08000ba9 	.word	0x08000ba9
 8000b88:	08000ba9 	.word	0x08000ba9
 8000b8c:	08000ba3 	.word	0x08000ba3
	{
	case 1:
		set_ccw_dir();
 8000b90:	f7ff fd56 	bl	8000640 <set_ccw_dir>
		break;
 8000b94:	e008      	b.n	8000ba8 <HAL_UART_RxCpltCallback+0x5c>
	case 2:
		set_cw_dir();
 8000b96:	f7ff fd6f 	bl	8000678 <set_cw_dir>
		break;
 8000b9a:	e005      	b.n	8000ba8 <HAL_UART_RxCpltCallback+0x5c>
	case 4:
		set_forward_dir();
 8000b9c:	f7ff fd18 	bl	80005d0 <set_forward_dir>
		break;
 8000ba0:	e002      	b.n	8000ba8 <HAL_UART_RxCpltCallback+0x5c>
	case 8:
		set_backward_dir();
 8000ba2:	f7ff fd31 	bl	8000608 <set_backward_dir>
		break;
 8000ba6:	bf00      	nop
	}
	static int disabled = 0;
	if (answer == 0 && !disabled)
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_UART_RxCpltCallback+0xc4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10c      	bne.n	8000bca <HAL_UART_RxCpltCallback+0x7e>
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_UART_RxCpltCallback+0xcc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d108      	bne.n	8000bca <HAL_UART_RxCpltCallback+0x7e>
	{
		disabled = 1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_UART_RxCpltCallback+0xcc>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
		disable();
 8000bbe:	f7ff fd83 	bl	80006c8 <disable>
		HAL_TIM_Base_Stop_IT(&htim11);
 8000bc2:	4816      	ldr	r0, [pc, #88]	; (8000c1c <HAL_UART_RxCpltCallback+0xd0>)
 8000bc4:	f001 fbb4 	bl	8002330 <HAL_TIM_Base_Stop_IT>
 8000bc8:	e00f      	b.n	8000bea <HAL_UART_RxCpltCallback+0x9e>
	}
	else if (answer != 0 && disabled)
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_UART_RxCpltCallback+0xc4>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00b      	beq.n	8000bea <HAL_UART_RxCpltCallback+0x9e>
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_RxCpltCallback+0xcc>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d007      	beq.n	8000bea <HAL_UART_RxCpltCallback+0x9e>
	{
		disabled = 0;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_UART_RxCpltCallback+0xcc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
		enable();
 8000be0:	f7ff fd66 	bl	80006b0 <enable>
		HAL_TIM_Base_Start_IT(&htim11);
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <HAL_UART_RxCpltCallback+0xd0>)
 8000be6:	f001 fb41 	bl	800226c <HAL_TIM_Base_Start_IT>
	}
	disabled = answer == 0;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_UART_RxCpltCallback+0xc4>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2301      	moveq	r3, #1
 8000bf4:	2300      	movne	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_UART_RxCpltCallback+0xcc>)
 8000bfc:	601a      	str	r2, [r3, #0]
	 HAL_UART_Receive_IT(&huart6, &answer, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4903      	ldr	r1, [pc, #12]	; (8000c10 <HAL_UART_RxCpltCallback+0xc4>)
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <HAL_UART_RxCpltCallback+0xd4>)
 8000c04:	f002 fba3 	bl	800334e <HAL_UART_Receive_IT>

 }
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200001a4 	.word	0x200001a4
 8000c14:	0800518c 	.word	0x0800518c
 8000c18:	200001ac 	.word	0x200001ac
 8000c1c:	200000cc 	.word	0x200000cc
 8000c20:	2000015c 	.word	0x2000015c

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6e:	2007      	movs	r0, #7
 8000c70:	f000 fba2 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d10e      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_TIM_Base_MspInit+0x70>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <HAL_TIM_Base_MspInit+0x70>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_TIM_Base_MspInit+0x70>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000cae:	e01a      	b.n	8000ce6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_TIM_Base_MspInit+0x74>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d115      	bne.n	8000ce6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_TIM_Base_MspInit+0x70>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_TIM_Base_MspInit+0x70>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_TIM_Base_MspInit+0x70>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	201a      	movs	r0, #26
 8000cdc:	f000 fb77 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ce0:	201a      	movs	r0, #26
 8000ce2:	f000 fb90 	bl	8001406 <HAL_NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40014800 	.word	0x40014800

08000cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d11d      	bne.n	8000d56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_TIM_MspPostInit+0x68>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_TIM_MspPostInit+0x68>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_TIM_MspPostInit+0x68>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <HAL_TIM_MspPostInit+0x6c>)
 8000d52:	f000 fc05 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <HAL_UART_MspInit+0x134>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12c      	bne.n	8000de4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a43      	ldr	r2, [pc, #268]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b41      	ldr	r3, [pc, #260]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a3c      	ldr	r2, [pc, #240]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4831      	ldr	r0, [pc, #196]	; (8000ea4 <HAL_UART_MspInit+0x13c>)
 8000dde:	f000 fbbf 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000de2:	e057      	b.n	8000e94 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <HAL_UART_MspInit+0x140>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d152      	bne.n	8000e94 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a2a      	ldr	r2, [pc, #168]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 0320 	and.w	r3, r3, #32
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_UART_MspInit+0x138>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e52:	2308      	movs	r3, #8
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <HAL_UART_MspInit+0x144>)
 8000e5e:	f000 fb7f 	bl	8001560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e74:	2308      	movs	r3, #8
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <HAL_UART_MspInit+0x13c>)
 8000e80:	f000 fb6e 	bl	8001560 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	2047      	movs	r0, #71	; 0x47
 8000e8a:	f000 faa0 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e8e:	2047      	movs	r0, #71	; 0x47
 8000e90:	f000 fab9 	bl	8001406 <HAL_NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3730      	adds	r7, #48	; 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40011400 	.word	0x40011400
 8000eac:	40020800 	.word	0x40020800

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f948 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f0a:	f001 fb49 	bl	80025a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000cc 	.word	0x200000cc

08000f18 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <USART6_IRQHandler+0x10>)
 8000f1e:	f002 fa3b 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000015c 	.word	0x2000015c

08000f2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e00a      	b.n	8000f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f3e:	f3af 8000 	nop.w
 8000f42:	4601      	mov	r1, r0
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	b2ca      	uxtb	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf0      	blt.n	8000f3e <_read+0x12>
  }

  return len;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e009      	b.n	8000f8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fdd1 	bl	8000b28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf1      	blt.n	8000f78 <_write+0x12>
  }
  return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_close>:

int _close(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_isatty>:

int _isatty(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f003 fb5a 	bl	80046f0 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20018000 	.word	0x20018000
 8001068:	00000400 	.word	0x00000400
 800106c:	200001b0 	.word	0x200001b0
 8001070:	20000308 	.word	0x20000308

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
                                                                                               ldr   sp, =_estack    		 /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800109c:	f7ff ffea 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f003 fb19 	bl	80046fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fb09 	bl	80006e0 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
                                                                                               ldr   sp, =_estack    		 /* set stack pointer */
 80010d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010dc:	080051f8 	.word	0x080051f8
  ldr r2, =_sbss
 80010e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010e4:	20000304 	.word	0x20000304

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <HAL_Init+0x40>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_Init+0x40>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x40>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f94f 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fd86 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f967 	bl	8001422 <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 f92f 	bl	80013ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	20000008 	.word	0x20000008
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	200001b4 	.word	0x200001b4

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200001b4 	.word	0x200001b4

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff8e 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff29 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff3e 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff8e 	bl	800130c <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5d 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff31 	bl	800127c <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff feb6 	bl	80011b8 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d008      	beq.n	800146c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e052      	b.n	8001512 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0216 	bic.w	r2, r2, #22
 800147a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800148a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2b00      	cmp	r3, #0
 8001492:	d103      	bne.n	800149c <HAL_DMA_Abort+0x62>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001498:	2b00      	cmp	r3, #0
 800149a:	d007      	beq.n	80014ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0208 	bic.w	r2, r2, #8
 80014aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014bc:	e013      	b.n	80014e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014be:	f7ff fe7b 	bl	80011b8 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d90c      	bls.n	80014e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e015      	b.n	8001512 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1e4      	bne.n	80014be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	223f      	movs	r2, #63	; 0x3f
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d004      	beq.n	8001538 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e00c      	b.n	8001552 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2205      	movs	r2, #5
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	e159      	b.n	8001830 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	429a      	cmp	r2, r3
 8001596:	f040 8148 	bne.w	800182a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d005      	beq.n	80015b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d130      	bne.n	8001614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 0201 	and.w	r2, r3, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b03      	cmp	r3, #3
 800161e:	d017      	beq.n	8001650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d123      	bne.n	80016a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	08da      	lsrs	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3208      	adds	r2, #8
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0203 	and.w	r2, r3, #3
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80a2 	beq.w	800182a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_GPIO_Init+0x2e8>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a56      	ldr	r2, [pc, #344]	; (8001848 <HAL_GPIO_Init+0x2e8>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b54      	ldr	r3, [pc, #336]	; (8001848 <HAL_GPIO_Init+0x2e8>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001702:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_GPIO_Init+0x2ec>)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a49      	ldr	r2, [pc, #292]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d019      	beq.n	8001762 <HAL_GPIO_Init+0x202>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_GPIO_Init+0x2f4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x1fe>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_GPIO_Init+0x2f8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x1fa>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a46      	ldr	r2, [pc, #280]	; (800185c <HAL_GPIO_Init+0x2fc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x1f6>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a45      	ldr	r2, [pc, #276]	; (8001860 <HAL_GPIO_Init+0x300>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x1f2>
 800174e:	2304      	movs	r3, #4
 8001750:	e008      	b.n	8001764 <HAL_GPIO_Init+0x204>
 8001752:	2307      	movs	r3, #7
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x204>
 8001756:	2303      	movs	r3, #3
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x204>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x204>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x204>
 8001762:	2300      	movs	r3, #0
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f002 0203 	and.w	r2, r2, #3
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001774:	4935      	ldr	r1, [pc, #212]	; (800184c <HAL_GPIO_Init+0x2ec>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_GPIO_Init+0x304>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d0:	4a24      	ldr	r2, [pc, #144]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fa:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_GPIO_Init+0x304>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_GPIO_Init+0x304>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3301      	adds	r3, #1
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	f67f aea2 	bls.w	800157c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40013800 	.word	0x40013800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40013c00 	.word	0x40013c00

08001868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
 8001874:	4613      	mov	r3, r2
 8001876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001878:	787b      	ldrb	r3, [r7, #1]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001884:	e003      	b.n	800188e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	041a      	lsls	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e267      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d075      	beq.n	80019a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ba:	4b88      	ldr	r3, [pc, #544]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d00c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b85      	ldr	r3, [pc, #532]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d112      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d2:	4b82      	ldr	r3, [pc, #520]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018de:	d10b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4b7e      	ldr	r3, [pc, #504]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d05b      	beq.n	80019a4 <HAL_RCC_OscConfig+0x108>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d157      	bne.n	80019a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e242      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001900:	d106      	bne.n	8001910 <HAL_RCC_OscConfig+0x74>
 8001902:	4b76      	ldr	r3, [pc, #472]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a75      	ldr	r2, [pc, #468]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xb0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x98>
 800191a:	4b70      	ldr	r3, [pc, #448]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6f      	ldr	r2, [pc, #444]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6c      	ldr	r2, [pc, #432]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xb0>
 8001934:	4b69      	ldr	r3, [pc, #420]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a68      	ldr	r2, [pc, #416]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b66      	ldr	r3, [pc, #408]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a65      	ldr	r2, [pc, #404]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fc30 	bl	80011b8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fc2c 	bl	80011b8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e207      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xc0>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fc1c 	bl	80011b8 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fc18 	bl	80011b8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1f3      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b51      	ldr	r3, [pc, #324]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0xe8>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b2:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d11c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ca:	4b44      	ldr	r3, [pc, #272]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	4b41      	ldr	r3, [pc, #260]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x152>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1c7      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4937      	ldr	r1, [pc, #220]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	e03a      	b.n	8001a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0c:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <HAL_RCC_OscConfig+0x244>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fbd1 	bl	80011b8 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fbcd 	bl	80011b8 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1a8      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4925      	ldr	r1, [pc, #148]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_RCC_OscConfig+0x244>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fbb0 	bl	80011b8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fbac 	bl	80011b8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e187      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d036      	beq.n	8001af4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d016      	beq.n	8001abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_RCC_OscConfig+0x248>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fb90 	bl	80011b8 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fb8c 	bl	80011b8 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e167      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_OscConfig+0x240>)
 8001ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x200>
 8001aba:	e01b      	b.n	8001af4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_OscConfig+0x248>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb79 	bl	80011b8 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	e00e      	b.n	8001ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aca:	f7ff fb75 	bl	80011b8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d907      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e150      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	42470000 	.word	0x42470000
 8001ae4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ea      	bne.n	8001aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8097 	beq.w	8001c30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b81      	ldr	r3, [pc, #516]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b7d      	ldr	r3, [pc, #500]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a7c      	ldr	r2, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b7a      	ldr	r3, [pc, #488]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b77      	ldr	r3, [pc, #476]	; (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	4b74      	ldr	r3, [pc, #464]	; (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a73      	ldr	r2, [pc, #460]	; (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fb35 	bl	80011b8 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff fb31 	bl	80011b8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e10c      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b6a      	ldr	r3, [pc, #424]	; (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x2ea>
 8001b78:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
 8001b84:	e01c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x324>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x30c>
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	4a5e      	ldr	r2, [pc, #376]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9a:	4b5c      	ldr	r3, [pc, #368]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a5b      	ldr	r2, [pc, #364]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x324>
 8001ba8:	4b58      	ldr	r3, [pc, #352]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	4a57      	ldr	r2, [pc, #348]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb4:	4b55      	ldr	r3, [pc, #340]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bba:	f023 0304 	bic.w	r3, r3, #4
 8001bbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d015      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff faf6 	bl	80011b8 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7ff faf2 	bl	80011b8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0cb      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be6:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0ee      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x334>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fae0 	bl	80011b8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fadc 	bl	80011b8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0b5      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ee      	bne.n	8001bfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c24:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a38      	ldr	r2, [pc, #224]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80a1 	beq.w	8001d7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3a:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d05c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d141      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fab0 	bl	80011b8 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff faac 	bl	80011b8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e087      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	491b      	ldr	r1, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fa85 	bl	80011b8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff fa81 	bl	80011b8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e05c      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x416>
 8001cd0:	e054      	b.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fa6e 	bl	80011b8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff fa6a 	bl	80011b8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e045      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x444>
 8001cfe:	e03d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e038      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000
 8001d14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_RCC_OscConfig+0x4ec>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d028      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d121      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d11a      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	3b01      	subs	r3, #1
 8001d62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0cc      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b68      	ldr	r3, [pc, #416]	; (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d90c      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b65      	ldr	r3, [pc, #404]	; (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b8      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de0:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df8:	4b53      	ldr	r3, [pc, #332]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	494d      	ldr	r1, [pc, #308]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d044      	beq.n	8001eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d119      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e07f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e067      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4934      	ldr	r1, [pc, #208]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f99c 	bl	80011b8 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f998 	bl	80011b8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e04f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d20c      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e032      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4916      	ldr	r1, [pc, #88]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	490e      	ldr	r1, [pc, #56]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f12:	f000 f821 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	490a      	ldr	r1, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	5ccb      	ldrb	r3, [r1, r3]
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f8fc 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	0800519c 	.word	0x0800519c
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f5c:	b094      	sub	sp, #80	; 0x50
 8001f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
 8001f64:	2300      	movs	r3, #0
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f68:	2300      	movs	r3, #0
 8001f6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f70:	4b79      	ldr	r3, [pc, #484]	; (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d00d      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x40>
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	f200 80e1 	bhi.w	8002144 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8a:	e0db      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f8c:	4b73      	ldr	r3, [pc, #460]	; (800215c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f90:	e0db      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f96:	e0d8      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f98:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fae:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fca:	4622      	mov	r2, r4
 8001fcc:	462b      	mov	r3, r5
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	1a51      	subs	r1, r2, r1
 8001fe6:	6139      	str	r1, [r7, #16]
 8001fe8:	4629      	mov	r1, r5
 8001fea:	eb63 0301 	sbc.w	r3, r3, r1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ffc:	4659      	mov	r1, fp
 8001ffe:	018b      	lsls	r3, r1, #6
 8002000:	4651      	mov	r1, sl
 8002002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002006:	4651      	mov	r1, sl
 8002008:	018a      	lsls	r2, r1, #6
 800200a:	4651      	mov	r1, sl
 800200c:	ebb2 0801 	subs.w	r8, r2, r1
 8002010:	4659      	mov	r1, fp
 8002012:	eb63 0901 	sbc.w	r9, r3, r1
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800202a:	4690      	mov	r8, r2
 800202c:	4699      	mov	r9, r3
 800202e:	4623      	mov	r3, r4
 8002030:	eb18 0303 	adds.w	r3, r8, r3
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	462b      	mov	r3, r5
 8002038:	eb49 0303 	adc.w	r3, r9, r3
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800204a:	4629      	mov	r1, r5
 800204c:	024b      	lsls	r3, r1, #9
 800204e:	4621      	mov	r1, r4
 8002050:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002054:	4621      	mov	r1, r4
 8002056:	024a      	lsls	r2, r1, #9
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205e:	2200      	movs	r2, #0
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
 8002062:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002064:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002068:	f7fe f90a 	bl	8000280 <__aeabi_uldivmod>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4613      	mov	r3, r2
 8002072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002074:	e058      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	099b      	lsrs	r3, r3, #6
 800207c:	2200      	movs	r2, #0
 800207e:	4618      	mov	r0, r3
 8002080:	4611      	mov	r1, r2
 8002082:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002090:	4642      	mov	r2, r8
 8002092:	464b      	mov	r3, r9
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	0159      	lsls	r1, r3, #5
 800209e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a2:	0150      	lsls	r0, r2, #5
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4641      	mov	r1, r8
 80020aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ae:	4649      	mov	r1, r9
 80020b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020c8:	ebb2 040a 	subs.w	r4, r2, sl
 80020cc:	eb63 050b 	sbc.w	r5, r3, fp
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	00eb      	lsls	r3, r5, #3
 80020da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020de:	00e2      	lsls	r2, r4, #3
 80020e0:	4614      	mov	r4, r2
 80020e2:	461d      	mov	r5, r3
 80020e4:	4643      	mov	r3, r8
 80020e6:	18e3      	adds	r3, r4, r3
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	464b      	mov	r3, r9
 80020ec:	eb45 0303 	adc.w	r3, r5, r3
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020fe:	4629      	mov	r1, r5
 8002100:	028b      	lsls	r3, r1, #10
 8002102:	4621      	mov	r1, r4
 8002104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002108:	4621      	mov	r1, r4
 800210a:	028a      	lsls	r2, r1, #10
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002112:	2200      	movs	r2, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	61fa      	str	r2, [r7, #28]
 8002118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800211c:	f7fe f8b0 	bl	8000280 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	3301      	adds	r3, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002138:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002142:	e002      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetSysClockFreq+0x204>)
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800214c:	4618      	mov	r0, r3
 800214e:	3750      	adds	r7, #80	; 0x50
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	00f42400 	.word	0x00f42400
 8002160:	007a1200 	.word	0x007a1200

08002164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_GetHCLKFreq+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff0 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0a9b      	lsrs	r3, r3, #10
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	080051ac 	.word	0x080051ac

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffdc 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0b5b      	lsrs	r3, r3, #13
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	080051ac 	.word	0x080051ac

080021cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe fd44 	bl	8000c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fc6a 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d001      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e044      	b.n	800230e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_TIM_Base_Start_IT+0xb0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ae:	d013      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_TIM_Base_Start_IT+0xb4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_TIM_Base_Start_IT+0xb8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_TIM_Base_Start_IT+0xbc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_TIM_Base_Start_IT+0xc0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d010      	beq.n	800230c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	e007      	b.n	800230c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800
 8002328:	40000c00 	.word	0x40000c00
 800232c:	40014000 	.word	0x40014000

08002330 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a1a      	ldr	r2, [r3, #32]
 800234e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10f      	bne.n	8002378 <HAL_TIM_Base_Stop_IT+0x48>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a1a      	ldr	r2, [r3, #32]
 800235e:	f240 4344 	movw	r3, #1092	; 0x444
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_TIM_Base_Stop_IT+0x48>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e041      	b.n	8002424 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f839 	bl	800242c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f000 fb89 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_TIM_PWM_Start+0x24>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e022      	b.n	80024aa <HAL_TIM_PWM_Start+0x6a>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d109      	bne.n	800247e <HAL_TIM_PWM_Start+0x3e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	e015      	b.n	80024aa <HAL_TIM_PWM_Start+0x6a>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d109      	bne.n	8002498 <HAL_TIM_PWM_Start+0x58>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e008      	b.n	80024aa <HAL_TIM_PWM_Start+0x6a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e068      	b.n	8002584 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d104      	bne.n	80024c2 <HAL_TIM_PWM_Start+0x82>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c0:	e013      	b.n	80024ea <HAL_TIM_PWM_Start+0xaa>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d104      	bne.n	80024d2 <HAL_TIM_PWM_Start+0x92>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d0:	e00b      	b.n	80024ea <HAL_TIM_PWM_Start+0xaa>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d104      	bne.n	80024e2 <HAL_TIM_PWM_Start+0xa2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e0:	e003      	b.n	80024ea <HAL_TIM_PWM_Start+0xaa>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fda8 	bl	8003048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a23      	ldr	r2, [pc, #140]	; (800258c <HAL_TIM_PWM_Start+0x14c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d107      	bne.n	8002512 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_TIM_PWM_Start+0x14c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d018      	beq.n	800254e <HAL_TIM_PWM_Start+0x10e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d013      	beq.n	800254e <HAL_TIM_PWM_Start+0x10e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a19      	ldr	r2, [pc, #100]	; (8002590 <HAL_TIM_PWM_Start+0x150>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00e      	beq.n	800254e <HAL_TIM_PWM_Start+0x10e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_TIM_PWM_Start+0x154>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_TIM_PWM_Start+0x10e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a16      	ldr	r2, [pc, #88]	; (8002598 <HAL_TIM_PWM_Start+0x158>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_TIM_PWM_Start+0x10e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_TIM_PWM_Start+0x15c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d111      	bne.n	8002572 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b06      	cmp	r3, #6
 800255e:	d010      	beq.n	8002582 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002570:	e007      	b.n	8002582 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40010000 	.word	0x40010000
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40014000 	.word	0x40014000

080025a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d020      	beq.n	8002604 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0202 	mvn.w	r2, #2
 80025d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa5b 	bl	8002aa6 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa4d 	bl	8002a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fa5e 	bl	8002aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d020      	beq.n	8002650 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0204 	mvn.w	r2, #4
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fa35 	bl	8002aa6 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa27 	bl	8002a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fa38 	bl	8002aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d020      	beq.n	800269c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01b      	beq.n	800269c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0208 	mvn.w	r2, #8
 800266c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2204      	movs	r2, #4
 8002672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa0f 	bl	8002aa6 <HAL_TIM_IC_CaptureCallback>
 8002688:	e005      	b.n	8002696 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fa01 	bl	8002a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fa12 	bl	8002aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d020      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01b      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0210 	mvn.w	r2, #16
 80026b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2208      	movs	r2, #8
 80026be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f9e9 	bl	8002aa6 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f9db 	bl	8002a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f9ec 	bl	8002aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0201 	mvn.w	r2, #1
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fd ff38 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fd2a 	bl	8003184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00c      	beq.n	8002754 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f9bd 	bl	8002ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00c      	beq.n	8002778 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0220 	mvn.w	r2, #32
 8002770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fcfc 	bl	8003170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800279a:	2302      	movs	r3, #2
 800279c:	e0ae      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	f200 809f 	bhi.w	80028ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027ae:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	080027e9 	.word	0x080027e9
 80027b8:	080028ed 	.word	0x080028ed
 80027bc:	080028ed 	.word	0x080028ed
 80027c0:	080028ed 	.word	0x080028ed
 80027c4:	08002829 	.word	0x08002829
 80027c8:	080028ed 	.word	0x080028ed
 80027cc:	080028ed 	.word	0x080028ed
 80027d0:	080028ed 	.word	0x080028ed
 80027d4:	0800286b 	.word	0x0800286b
 80027d8:	080028ed 	.word	0x080028ed
 80027dc:	080028ed 	.word	0x080028ed
 80027e0:	080028ed 	.word	0x080028ed
 80027e4:	080028ab 	.word	0x080028ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa04 	bl	8002bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0208 	orr.w	r2, r2, #8
 8002802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6999      	ldr	r1, [r3, #24]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	619a      	str	r2, [r3, #24]
      break;
 8002826:	e064      	b.n	80028f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fa4a 	bl	8002cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6999      	ldr	r1, [r3, #24]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	021a      	lsls	r2, r3, #8
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	619a      	str	r2, [r3, #24]
      break;
 8002868:	e043      	b.n	80028f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fa95 	bl	8002da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0208 	orr.w	r2, r2, #8
 8002884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0204 	bic.w	r2, r2, #4
 8002894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69d9      	ldr	r1, [r3, #28]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	61da      	str	r2, [r3, #28]
      break;
 80028a8:	e023      	b.n	80028f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fadf 	bl	8002e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69d9      	ldr	r1, [r3, #28]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	021a      	lsls	r2, r3, #8
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	61da      	str	r2, [r3, #28]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	75fb      	strb	r3, [r7, #23]
      break;
 80028f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIM_ConfigClockSource+0x1c>
 800291c:	2302      	movs	r3, #2
 800291e:	e0b4      	b.n	8002a8a <HAL_TIM_ConfigClockSource+0x186>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800293e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002958:	d03e      	beq.n	80029d8 <HAL_TIM_ConfigClockSource+0xd4>
 800295a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295e:	f200 8087 	bhi.w	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	f000 8086 	beq.w	8002a76 <HAL_TIM_ConfigClockSource+0x172>
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296e:	d87f      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b70      	cmp	r3, #112	; 0x70
 8002972:	d01a      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0xa6>
 8002974:	2b70      	cmp	r3, #112	; 0x70
 8002976:	d87b      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b60      	cmp	r3, #96	; 0x60
 800297a:	d050      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x11a>
 800297c:	2b60      	cmp	r3, #96	; 0x60
 800297e:	d877      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b50      	cmp	r3, #80	; 0x50
 8002982:	d03c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0xfa>
 8002984:	2b50      	cmp	r3, #80	; 0x50
 8002986:	d873      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d058      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0x13a>
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d86f      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b30      	cmp	r3, #48	; 0x30
 8002992:	d064      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x15a>
 8002994:	2b30      	cmp	r3, #48	; 0x30
 8002996:	d86b      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b20      	cmp	r3, #32
 800299a:	d060      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	2b20      	cmp	r3, #32
 800299e:	d867      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05c      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d05a      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x15a>
 80029a8:	e062      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ba:	f000 fb25 	bl	8003008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	609a      	str	r2, [r3, #8]
      break;
 80029d6:	e04f      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	f000 fb0e 	bl	8003008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029fa:	609a      	str	r2, [r3, #8]
      break;
 80029fc:	e03c      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 fa82 	bl	8002f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2150      	movs	r1, #80	; 0x50
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fadb 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e02c      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f000 faa1 	bl	8002f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2160      	movs	r1, #96	; 0x60
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 facb 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002a3c:	e01c      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f000 fa62 	bl	8002f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fabb 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002a5c:	e00c      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f000 fab2 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002a6e:	e003      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e000      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3a      	ldr	r2, [pc, #232]	; (8002be0 <TIM_Base_SetConfig+0xfc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00f      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d00b      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <TIM_Base_SetConfig+0x100>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a36      	ldr	r2, [pc, #216]	; (8002be8 <TIM_Base_SetConfig+0x104>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a35      	ldr	r2, [pc, #212]	; (8002bec <TIM_Base_SetConfig+0x108>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d108      	bne.n	8002b2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <TIM_Base_SetConfig+0xfc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01b      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d017      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a28      	ldr	r2, [pc, #160]	; (8002be4 <TIM_Base_SetConfig+0x100>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a27      	ldr	r2, [pc, #156]	; (8002be8 <TIM_Base_SetConfig+0x104>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a26      	ldr	r2, [pc, #152]	; (8002bec <TIM_Base_SetConfig+0x108>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <TIM_Base_SetConfig+0x10c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <TIM_Base_SetConfig+0x110>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <TIM_Base_SetConfig+0xfc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800

08002bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f023 0201 	bic.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 0302 	bic.w	r3, r3, #2
 8002c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <TIM_OC1_SetConfig+0xc8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10c      	bne.n	8002c72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f023 0308 	bic.w	r3, r3, #8
 8002c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <TIM_OC1_SetConfig+0xc8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d111      	bne.n	8002c9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40010000 	.word	0x40010000

08002cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f023 0210 	bic.w	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0320 	bic.w	r3, r3, #32
 8002d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <TIM_OC2_SetConfig+0xd4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d10d      	bne.n	8002d44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <TIM_OC2_SetConfig+0xd4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d113      	bne.n	8002d74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000

08002da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <TIM_OC3_SetConfig+0xd0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10d      	bne.n	8002e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <TIM_OC3_SetConfig+0xd0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d113      	bne.n	8002e4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40010000 	.word	0x40010000

08002e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	031b      	lsls	r3, r3, #12
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <TIM_OC4_SetConfig+0x9c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d109      	bne.n	8002ee8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40010000 	.word	0x40010000

08002f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0201 	bic.w	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 030a 	bic.w	r3, r3, #10
 8002f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	621a      	str	r2, [r3, #32]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 0210 	bic.w	r2, r3, #16
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	031b      	lsls	r3, r3, #12
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f043 0307 	orr.w	r3, r3, #7
 8002ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	021a      	lsls	r2, r3, #8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	431a      	orrs	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4313      	orrs	r3, r2
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	609a      	str	r2, [r3, #8]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2201      	movs	r2, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e050      	b.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d018      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f8:	d013      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00e      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d009      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d004      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a13      	ldr	r2, [pc, #76]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10c      	bne.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4313      	orrs	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010000 	.word	0x40010000
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40014000 	.word	0x40014000

08003170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e042      	b.n	8003230 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fdd2 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fdbd 	bl	8003d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b20      	cmp	r3, #32
 8003256:	d175      	bne.n	8003344 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_UART_Transmit+0x2c>
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e06e      	b.n	8003346 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2221      	movs	r2, #33	; 0x21
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003276:	f7fd ff9f 	bl	80011b8 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d108      	bne.n	80032a4 <HAL_UART_Transmit+0x6c>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d104      	bne.n	80032a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e003      	b.n	80032ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032ac:	e02e      	b.n	800330c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fb1f 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e03a      	b.n	8003346 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3302      	adds	r3, #2
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e007      	b.n	80032fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1cb      	bne.n	80032ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2140      	movs	r1, #64	; 0x40
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 faeb 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e006      	b.n	8003346 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	e000      	b.n	8003346 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003344:	2302      	movs	r3, #2
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	4613      	mov	r3, r2
 800335a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b20      	cmp	r3, #32
 8003366:	d112      	bne.n	800338e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_UART_Receive_IT+0x26>
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e00b      	b.n	8003390 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	461a      	mov	r2, r3
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fb12 	bl	80039ae <UART_Start_Receive_IT>
 800338a:	4603      	mov	r3, r0
 800338c:	e000      	b.n	8003390 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b0ba      	sub	sp, #232	; 0xe8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
 80033ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fbf2 	bl	8003be0 <UART_Receive_IT>
      return;
 80033fc:	e25b      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80de 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
 8003408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003418:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80d1 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
 8003476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f043 0208 	orr.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 81f2 	beq.w	80038ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb7d 	bl	8003be0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_UART_IRQHandler+0x17a>
 800350a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04f      	beq.n	80035b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa85 	bl	8003a22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d141      	bne.n	80035aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800353c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3314      	adds	r3, #20
 800354e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800355e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800356a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1d9      	bne.n	8003526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d013      	beq.n	80035a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	4a7e      	ldr	r2, [pc, #504]	; (8003778 <HAL_UART_IRQHandler+0x3e0>)
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd ffc7 	bl	800151a <HAL_DMA_Abort_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	e00e      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f994 	bl	80038d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e00a      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f990 	bl	80038d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e006      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f98c 	bl	80038d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80035be:	e175      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	bf00      	nop
    return;
 80035c2:	e173      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 814f 	bne.w	800386c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8148 	beq.w	800386c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8141 	beq.w	800386c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	f040 80b6 	bne.w	800377c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800361c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8145 	beq.w	80038b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800362e:	429a      	cmp	r2, r3
 8003630:	f080 813e 	bcs.w	80038b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800363a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	f000 8088 	beq.w	800375a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800367a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800368e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1d9      	bne.n	800364a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e1      	bne.n	8003696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3314      	adds	r3, #20
 80036f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e3      	bne.n	80036d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372a:	f023 0310 	bic.w	r3, r3, #16
 800372e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800373c:	65ba      	str	r2, [r7, #88]	; 0x58
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800374a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e3      	bne.n	8003718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fe70 	bl	800143a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003768:	b29b      	uxth	r3, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	b29b      	uxth	r3, r3
 800376e:	4619      	mov	r1, r3
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f8b7 	bl	80038e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003776:	e09b      	b.n	80038b0 <HAL_UART_IRQHandler+0x518>
 8003778:	08003ae9 	.word	0x08003ae9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003784:	b29b      	uxth	r3, r3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 808e 	beq.w	80038b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8089 	beq.w	80038b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037c6:	647a      	str	r2, [r7, #68]	; 0x44
 80037c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e3      	bne.n	80037a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	623b      	str	r3, [r7, #32]
   return(result);
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e3      	bne.n	80037da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0310 	bic.w	r3, r3, #16
 8003836:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003844:	61fa      	str	r2, [r7, #28]
 8003846:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	617b      	str	r3, [r7, #20]
   return(result);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e3      	bne.n	8003820 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800385e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f83d 	bl	80038e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800386a:	e023      	b.n	80038b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800386c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <HAL_UART_IRQHandler+0x4f4>
 8003878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f943 	bl	8003b10 <UART_Transmit_IT>
    return;
 800388a:	e014      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800388c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_UART_IRQHandler+0x51e>
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f983 	bl	8003bb0 <UART_EndTransmit_IT>
    return;
 80038aa:	e004      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80038ac:	bf00      	nop
 80038ae:	e002      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80038b0:	bf00      	nop
 80038b2:	e000      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80038b4:	bf00      	nop
  }
}
 80038b6:	37e8      	adds	r7, #232	; 0xe8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390c:	e03b      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d037      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fd fc4f 	bl	80011b8 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <UART_WaitOnFlagUntilTimeout+0x30>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e03a      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d023      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b80      	cmp	r3, #128	; 0x80
 8003942:	d020      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d01d      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d116      	bne.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f857 	bl	8003a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2208      	movs	r2, #8
 8003978:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e00f      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d0b4      	beq.n	800390e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2222      	movs	r2, #34	; 0x22
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b095      	sub	sp, #84	; 0x54
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a4a:	643a      	str	r2, [r7, #64]	; 0x40
 8003a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d119      	bne.n	8003ace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f023 0310 	bic.w	r3, r3, #16
 8003ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aba:	61ba      	str	r2, [r7, #24]
 8003abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003adc:	bf00      	nop
 8003ade:	3754      	adds	r7, #84	; 0x54
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff fee4 	bl	80038d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b21      	cmp	r3, #33	; 0x21
 8003b22:	d13e      	bne.n	8003ba2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d114      	bne.n	8003b58 <UART_Transmit_IT+0x48>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d110      	bne.n	8003b58 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	1c9a      	adds	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	621a      	str	r2, [r3, #32]
 8003b56:	e008      	b.n	8003b6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	1c59      	adds	r1, r3, #1
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6211      	str	r1, [r2, #32]
 8003b62:	781a      	ldrb	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4619      	mov	r1, r3
 8003b78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fe73 	bl	80038bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b22      	cmp	r3, #34	; 0x22
 8003bf2:	f040 80ae 	bne.w	8003d52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d117      	bne.n	8003c30 <UART_Receive_IT+0x50>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d113      	bne.n	8003c30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	629a      	str	r2, [r3, #40]	; 0x28
 8003c2e:	e026      	b.n	8003c7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c42:	d007      	beq.n	8003c54 <UART_Receive_IT+0x74>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <UART_Receive_IT+0x82>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e008      	b.n	8003c74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d15d      	bne.n	8003d4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0220 	bic.w	r2, r2, #32
 8003ca0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d135      	bne.n	8003d44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	613b      	str	r3, [r7, #16]
   return(result);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f023 0310 	bic.w	r3, r3, #16
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	623a      	str	r2, [r7, #32]
 8003d00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	69f9      	ldr	r1, [r7, #28]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d10a      	bne.n	8003d36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fdd1 	bl	80038e4 <HAL_UARTEx_RxEventCallback>
 8003d42:	e002      	b.n	8003d4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fc ff01 	bl	8000b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e002      	b.n	8003d54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3730      	adds	r7, #48	; 0x30
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d60:	b0c0      	sub	sp, #256	; 0x100
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	ea40 0301 	orr.w	r3, r0, r1
 8003d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003db4:	f021 010c 	bic.w	r1, r1, #12
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd6:	6999      	ldr	r1, [r3, #24]
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	ea40 0301 	orr.w	r3, r0, r1
 8003de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b8f      	ldr	r3, [pc, #572]	; (8004028 <UART_SetConfig+0x2cc>)
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d005      	beq.n	8003dfc <UART_SetConfig+0xa0>
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b8d      	ldr	r3, [pc, #564]	; (800402c <UART_SetConfig+0x2d0>)
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7fe f9d2 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8003e00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e04:	e003      	b.n	8003e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e06:	f7fe f9b9 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e18:	f040 810c 	bne.w	8004034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e36:	415b      	adcs	r3, r3
 8003e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e3e:	4621      	mov	r1, r4
 8003e40:	eb12 0801 	adds.w	r8, r2, r1
 8003e44:	4629      	mov	r1, r5
 8003e46:	eb43 0901 	adc.w	r9, r3, r1
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4699      	mov	r9, r3
 8003e62:	4623      	mov	r3, r4
 8003e64:	eb18 0303 	adds.w	r3, r8, r3
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	eb49 0303 	adc.w	r3, r9, r3
 8003e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	18db      	adds	r3, r3, r3
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e90:	4613      	mov	r3, r2
 8003e92:	eb42 0303 	adc.w	r3, r2, r3
 8003e96:	657b      	str	r3, [r7, #84]	; 0x54
 8003e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ea0:	f7fc f9ee 	bl	8000280 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <UART_SetConfig+0x2d4>)
 8003eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	011c      	lsls	r4, r3, #4
 8003eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	1891      	adds	r1, r2, r2
 8003eca:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eda:	4649      	mov	r1, r9
 8003edc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef4:	4692      	mov	sl, r2
 8003ef6:	469b      	mov	fp, r3
 8003ef8:	4643      	mov	r3, r8
 8003efa:	eb1a 0303 	adds.w	r3, sl, r3
 8003efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f02:	464b      	mov	r3, r9
 8003f04:	eb4b 0303 	adc.w	r3, fp, r3
 8003f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f20:	460b      	mov	r3, r1
 8003f22:	18db      	adds	r3, r3, r3
 8003f24:	643b      	str	r3, [r7, #64]	; 0x40
 8003f26:	4613      	mov	r3, r2
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f36:	f7fc f9a3 	bl	8000280 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <UART_SetConfig+0x2d4>)
 8003f42:	fba3 2301 	umull	r2, r3, r3, r1
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2264      	movs	r2, #100	; 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	1acb      	subs	r3, r1, r3
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <UART_SetConfig+0x2d4>)
 8003f58:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f64:	441c      	add	r4, r3
 8003f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	1891      	adds	r1, r2, r2
 8003f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f80:	415b      	adcs	r3, r3
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f88:	4641      	mov	r1, r8
 8003f8a:	1851      	adds	r1, r2, r1
 8003f8c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f8e:	4649      	mov	r1, r9
 8003f90:	414b      	adcs	r3, r1
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	00cb      	lsls	r3, r1, #3
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003faa:	4651      	mov	r1, sl
 8003fac:	00ca      	lsls	r2, r1, #3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fdc:	460b      	mov	r3, r1
 8003fde:	18db      	adds	r3, r3, r3
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ff2:	f7fc f945 	bl	8000280 <__aeabi_uldivmod>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <UART_SetConfig+0x2d4>)
 8003ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2164      	movs	r1, #100	; 0x64
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	3332      	adds	r3, #50	; 0x32
 800400e:	4a08      	ldr	r2, [pc, #32]	; (8004030 <UART_SetConfig+0x2d4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	f003 0207 	and.w	r2, r3, #7
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4422      	add	r2, r4
 8004022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004024:	e106      	b.n	8004234 <UART_SetConfig+0x4d8>
 8004026:	bf00      	nop
 8004028:	40011000 	.word	0x40011000
 800402c:	40011400 	.word	0x40011400
 8004030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800403e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004046:	4642      	mov	r2, r8
 8004048:	464b      	mov	r3, r9
 800404a:	1891      	adds	r1, r2, r2
 800404c:	6239      	str	r1, [r7, #32]
 800404e:	415b      	adcs	r3, r3
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004056:	4641      	mov	r1, r8
 8004058:	1854      	adds	r4, r2, r1
 800405a:	4649      	mov	r1, r9
 800405c:	eb43 0501 	adc.w	r5, r3, r1
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	00eb      	lsls	r3, r5, #3
 800406a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406e:	00e2      	lsls	r2, r4, #3
 8004070:	4614      	mov	r4, r2
 8004072:	461d      	mov	r5, r3
 8004074:	4643      	mov	r3, r8
 8004076:	18e3      	adds	r3, r4, r3
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800407c:	464b      	mov	r3, r9
 800407e:	eb45 0303 	adc.w	r3, r5, r3
 8004082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040a2:	4629      	mov	r1, r5
 80040a4:	008b      	lsls	r3, r1, #2
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ac:	4621      	mov	r1, r4
 80040ae:	008a      	lsls	r2, r1, #2
 80040b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040b4:	f7fc f8e4 	bl	8000280 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4b60      	ldr	r3, [pc, #384]	; (8004240 <UART_SetConfig+0x4e4>)
 80040be:	fba3 2302 	umull	r2, r3, r3, r2
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	011c      	lsls	r4, r3, #4
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	61b9      	str	r1, [r7, #24]
 80040e0:	415b      	adcs	r3, r3
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	4641      	mov	r1, r8
 80040ea:	1851      	adds	r1, r2, r1
 80040ec:	6139      	str	r1, [r7, #16]
 80040ee:	4649      	mov	r1, r9
 80040f0:	414b      	adcs	r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	00cb      	lsls	r3, r1, #3
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410a:	4651      	mov	r1, sl
 800410c:	00ca      	lsls	r2, r1, #3
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	4603      	mov	r3, r0
 8004114:	4642      	mov	r2, r8
 8004116:	189b      	adds	r3, r3, r2
 8004118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800411c:	464b      	mov	r3, r9
 800411e:	460a      	mov	r2, r1
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	67bb      	str	r3, [r7, #120]	; 0x78
 8004132:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004140:	4649      	mov	r1, r9
 8004142:	008b      	lsls	r3, r1, #2
 8004144:	4641      	mov	r1, r8
 8004146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414a:	4641      	mov	r1, r8
 800414c:	008a      	lsls	r2, r1, #2
 800414e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004152:	f7fc f895 	bl	8000280 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4611      	mov	r1, r2
 800415c:	4b38      	ldr	r3, [pc, #224]	; (8004240 <UART_SetConfig+0x4e4>)
 800415e:	fba3 2301 	umull	r2, r3, r3, r1
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2264      	movs	r2, #100	; 0x64
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	1acb      	subs	r3, r1, r3
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	3332      	adds	r3, #50	; 0x32
 8004170:	4a33      	ldr	r2, [pc, #204]	; (8004240 <UART_SetConfig+0x4e4>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417c:	441c      	add	r4, r3
 800417e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004182:	2200      	movs	r2, #0
 8004184:	673b      	str	r3, [r7, #112]	; 0x70
 8004186:	677a      	str	r2, [r7, #116]	; 0x74
 8004188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	1891      	adds	r1, r2, r2
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	415b      	adcs	r3, r3
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800419c:	4641      	mov	r1, r8
 800419e:	1851      	adds	r1, r2, r1
 80041a0:	6039      	str	r1, [r7, #0]
 80041a2:	4649      	mov	r1, r9
 80041a4:	414b      	adcs	r3, r1
 80041a6:	607b      	str	r3, [r7, #4]
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041b4:	4659      	mov	r1, fp
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4651      	mov	r1, sl
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4651      	mov	r1, sl
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4642      	mov	r2, r8
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ce:	464b      	mov	r3, r9
 80041d0:	460a      	mov	r2, r1
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	663b      	str	r3, [r7, #96]	; 0x60
 80041e2:	667a      	str	r2, [r7, #100]	; 0x64
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041f0:	4649      	mov	r1, r9
 80041f2:	008b      	lsls	r3, r1, #2
 80041f4:	4641      	mov	r1, r8
 80041f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041fa:	4641      	mov	r1, r8
 80041fc:	008a      	lsls	r2, r1, #2
 80041fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004202:	f7fc f83d 	bl	8000280 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <UART_SetConfig+0x4e4>)
 800420c:	fba3 1302 	umull	r1, r3, r3, r2
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	2164      	movs	r1, #100	; 0x64
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	3332      	adds	r3, #50	; 0x32
 800421e:	4a08      	ldr	r2, [pc, #32]	; (8004240 <UART_SetConfig+0x4e4>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4422      	add	r2, r4
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800423a:	46bd      	mov	sp, r7
 800423c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004240:	51eb851f 	.word	0x51eb851f

08004244 <std>:
 8004244:	2300      	movs	r3, #0
 8004246:	b510      	push	{r4, lr}
 8004248:	4604      	mov	r4, r0
 800424a:	e9c0 3300 	strd	r3, r3, [r0]
 800424e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004252:	6083      	str	r3, [r0, #8]
 8004254:	8181      	strh	r1, [r0, #12]
 8004256:	6643      	str	r3, [r0, #100]	; 0x64
 8004258:	81c2      	strh	r2, [r0, #14]
 800425a:	6183      	str	r3, [r0, #24]
 800425c:	4619      	mov	r1, r3
 800425e:	2208      	movs	r2, #8
 8004260:	305c      	adds	r0, #92	; 0x5c
 8004262:	f000 f9f7 	bl	8004654 <memset>
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <std+0x58>)
 8004268:	6263      	str	r3, [r4, #36]	; 0x24
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <std+0x5c>)
 800426c:	62a3      	str	r3, [r4, #40]	; 0x28
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <std+0x60>)
 8004270:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <std+0x64>)
 8004274:	6323      	str	r3, [r4, #48]	; 0x30
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <std+0x68>)
 8004278:	6224      	str	r4, [r4, #32]
 800427a:	429c      	cmp	r4, r3
 800427c:	d006      	beq.n	800428c <std+0x48>
 800427e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004282:	4294      	cmp	r4, r2
 8004284:	d002      	beq.n	800428c <std+0x48>
 8004286:	33d0      	adds	r3, #208	; 0xd0
 8004288:	429c      	cmp	r4, r3
 800428a:	d105      	bne.n	8004298 <std+0x54>
 800428c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004294:	f000 ba56 	b.w	8004744 <__retarget_lock_init_recursive>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	bf00      	nop
 800429c:	080044a5 	.word	0x080044a5
 80042a0:	080044c7 	.word	0x080044c7
 80042a4:	080044ff 	.word	0x080044ff
 80042a8:	08004523 	.word	0x08004523
 80042ac:	200001b8 	.word	0x200001b8

080042b0 <stdio_exit_handler>:
 80042b0:	4a02      	ldr	r2, [pc, #8]	; (80042bc <stdio_exit_handler+0xc>)
 80042b2:	4903      	ldr	r1, [pc, #12]	; (80042c0 <stdio_exit_handler+0x10>)
 80042b4:	4803      	ldr	r0, [pc, #12]	; (80042c4 <stdio_exit_handler+0x14>)
 80042b6:	f000 b869 	b.w	800438c <_fwalk_sglue>
 80042ba:	bf00      	nop
 80042bc:	2000000c 	.word	0x2000000c
 80042c0:	08004ff1 	.word	0x08004ff1
 80042c4:	20000018 	.word	0x20000018

080042c8 <cleanup_stdio>:
 80042c8:	6841      	ldr	r1, [r0, #4]
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <cleanup_stdio+0x34>)
 80042cc:	4299      	cmp	r1, r3
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
 80042d2:	d001      	beq.n	80042d8 <cleanup_stdio+0x10>
 80042d4:	f000 fe8c 	bl	8004ff0 <_fflush_r>
 80042d8:	68a1      	ldr	r1, [r4, #8]
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <cleanup_stdio+0x38>)
 80042dc:	4299      	cmp	r1, r3
 80042de:	d002      	beq.n	80042e6 <cleanup_stdio+0x1e>
 80042e0:	4620      	mov	r0, r4
 80042e2:	f000 fe85 	bl	8004ff0 <_fflush_r>
 80042e6:	68e1      	ldr	r1, [r4, #12]
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <cleanup_stdio+0x3c>)
 80042ea:	4299      	cmp	r1, r3
 80042ec:	d004      	beq.n	80042f8 <cleanup_stdio+0x30>
 80042ee:	4620      	mov	r0, r4
 80042f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f4:	f000 be7c 	b.w	8004ff0 <_fflush_r>
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	bf00      	nop
 80042fc:	200001b8 	.word	0x200001b8
 8004300:	20000220 	.word	0x20000220
 8004304:	20000288 	.word	0x20000288

08004308 <global_stdio_init.part.0>:
 8004308:	b510      	push	{r4, lr}
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <global_stdio_init.part.0+0x30>)
 800430c:	4c0b      	ldr	r4, [pc, #44]	; (800433c <global_stdio_init.part.0+0x34>)
 800430e:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <global_stdio_init.part.0+0x38>)
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	4620      	mov	r0, r4
 8004314:	2200      	movs	r2, #0
 8004316:	2104      	movs	r1, #4
 8004318:	f7ff ff94 	bl	8004244 <std>
 800431c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004320:	2201      	movs	r2, #1
 8004322:	2109      	movs	r1, #9
 8004324:	f7ff ff8e 	bl	8004244 <std>
 8004328:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800432c:	2202      	movs	r2, #2
 800432e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004332:	2112      	movs	r1, #18
 8004334:	f7ff bf86 	b.w	8004244 <std>
 8004338:	200002f0 	.word	0x200002f0
 800433c:	200001b8 	.word	0x200001b8
 8004340:	080042b1 	.word	0x080042b1

08004344 <__sfp_lock_acquire>:
 8004344:	4801      	ldr	r0, [pc, #4]	; (800434c <__sfp_lock_acquire+0x8>)
 8004346:	f000 b9fe 	b.w	8004746 <__retarget_lock_acquire_recursive>
 800434a:	bf00      	nop
 800434c:	200002f9 	.word	0x200002f9

08004350 <__sfp_lock_release>:
 8004350:	4801      	ldr	r0, [pc, #4]	; (8004358 <__sfp_lock_release+0x8>)
 8004352:	f000 b9f9 	b.w	8004748 <__retarget_lock_release_recursive>
 8004356:	bf00      	nop
 8004358:	200002f9 	.word	0x200002f9

0800435c <__sinit>:
 800435c:	b510      	push	{r4, lr}
 800435e:	4604      	mov	r4, r0
 8004360:	f7ff fff0 	bl	8004344 <__sfp_lock_acquire>
 8004364:	6a23      	ldr	r3, [r4, #32]
 8004366:	b11b      	cbz	r3, 8004370 <__sinit+0x14>
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f7ff bff0 	b.w	8004350 <__sfp_lock_release>
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <__sinit+0x28>)
 8004372:	6223      	str	r3, [r4, #32]
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <__sinit+0x2c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f5      	bne.n	8004368 <__sinit+0xc>
 800437c:	f7ff ffc4 	bl	8004308 <global_stdio_init.part.0>
 8004380:	e7f2      	b.n	8004368 <__sinit+0xc>
 8004382:	bf00      	nop
 8004384:	080042c9 	.word	0x080042c9
 8004388:	200002f0 	.word	0x200002f0

0800438c <_fwalk_sglue>:
 800438c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004390:	4607      	mov	r7, r0
 8004392:	4688      	mov	r8, r1
 8004394:	4614      	mov	r4, r2
 8004396:	2600      	movs	r6, #0
 8004398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800439c:	f1b9 0901 	subs.w	r9, r9, #1
 80043a0:	d505      	bpl.n	80043ae <_fwalk_sglue+0x22>
 80043a2:	6824      	ldr	r4, [r4, #0]
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	d1f7      	bne.n	8004398 <_fwalk_sglue+0xc>
 80043a8:	4630      	mov	r0, r6
 80043aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ae:	89ab      	ldrh	r3, [r5, #12]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d907      	bls.n	80043c4 <_fwalk_sglue+0x38>
 80043b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043b8:	3301      	adds	r3, #1
 80043ba:	d003      	beq.n	80043c4 <_fwalk_sglue+0x38>
 80043bc:	4629      	mov	r1, r5
 80043be:	4638      	mov	r0, r7
 80043c0:	47c0      	blx	r8
 80043c2:	4306      	orrs	r6, r0
 80043c4:	3568      	adds	r5, #104	; 0x68
 80043c6:	e7e9      	b.n	800439c <_fwalk_sglue+0x10>

080043c8 <iprintf>:
 80043c8:	b40f      	push	{r0, r1, r2, r3}
 80043ca:	b507      	push	{r0, r1, r2, lr}
 80043cc:	4906      	ldr	r1, [pc, #24]	; (80043e8 <iprintf+0x20>)
 80043ce:	ab04      	add	r3, sp, #16
 80043d0:	6808      	ldr	r0, [r1, #0]
 80043d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043d6:	6881      	ldr	r1, [r0, #8]
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	f000 fad9 	bl	8004990 <_vfiprintf_r>
 80043de:	b003      	add	sp, #12
 80043e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e4:	b004      	add	sp, #16
 80043e6:	4770      	bx	lr
 80043e8:	20000064 	.word	0x20000064

080043ec <_puts_r>:
 80043ec:	6a03      	ldr	r3, [r0, #32]
 80043ee:	b570      	push	{r4, r5, r6, lr}
 80043f0:	6884      	ldr	r4, [r0, #8]
 80043f2:	4605      	mov	r5, r0
 80043f4:	460e      	mov	r6, r1
 80043f6:	b90b      	cbnz	r3, 80043fc <_puts_r+0x10>
 80043f8:	f7ff ffb0 	bl	800435c <__sinit>
 80043fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043fe:	07db      	lsls	r3, r3, #31
 8004400:	d405      	bmi.n	800440e <_puts_r+0x22>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	0598      	lsls	r0, r3, #22
 8004406:	d402      	bmi.n	800440e <_puts_r+0x22>
 8004408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800440a:	f000 f99c 	bl	8004746 <__retarget_lock_acquire_recursive>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	0719      	lsls	r1, r3, #28
 8004412:	d513      	bpl.n	800443c <_puts_r+0x50>
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	b18b      	cbz	r3, 800443c <_puts_r+0x50>
 8004418:	3e01      	subs	r6, #1
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004420:	3b01      	subs	r3, #1
 8004422:	60a3      	str	r3, [r4, #8]
 8004424:	b9e9      	cbnz	r1, 8004462 <_puts_r+0x76>
 8004426:	2b00      	cmp	r3, #0
 8004428:	da2e      	bge.n	8004488 <_puts_r+0x9c>
 800442a:	4622      	mov	r2, r4
 800442c:	210a      	movs	r1, #10
 800442e:	4628      	mov	r0, r5
 8004430:	f000 f87b 	bl	800452a <__swbuf_r>
 8004434:	3001      	adds	r0, #1
 8004436:	d007      	beq.n	8004448 <_puts_r+0x5c>
 8004438:	250a      	movs	r5, #10
 800443a:	e007      	b.n	800444c <_puts_r+0x60>
 800443c:	4621      	mov	r1, r4
 800443e:	4628      	mov	r0, r5
 8004440:	f000 f8b0 	bl	80045a4 <__swsetup_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	d0e7      	beq.n	8004418 <_puts_r+0x2c>
 8004448:	f04f 35ff 	mov.w	r5, #4294967295
 800444c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800444e:	07da      	lsls	r2, r3, #31
 8004450:	d405      	bmi.n	800445e <_puts_r+0x72>
 8004452:	89a3      	ldrh	r3, [r4, #12]
 8004454:	059b      	lsls	r3, r3, #22
 8004456:	d402      	bmi.n	800445e <_puts_r+0x72>
 8004458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800445a:	f000 f975 	bl	8004748 <__retarget_lock_release_recursive>
 800445e:	4628      	mov	r0, r5
 8004460:	bd70      	pop	{r4, r5, r6, pc}
 8004462:	2b00      	cmp	r3, #0
 8004464:	da04      	bge.n	8004470 <_puts_r+0x84>
 8004466:	69a2      	ldr	r2, [r4, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	dc06      	bgt.n	800447a <_puts_r+0x8e>
 800446c:	290a      	cmp	r1, #10
 800446e:	d004      	beq.n	800447a <_puts_r+0x8e>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	6022      	str	r2, [r4, #0]
 8004476:	7019      	strb	r1, [r3, #0]
 8004478:	e7cf      	b.n	800441a <_puts_r+0x2e>
 800447a:	4622      	mov	r2, r4
 800447c:	4628      	mov	r0, r5
 800447e:	f000 f854 	bl	800452a <__swbuf_r>
 8004482:	3001      	adds	r0, #1
 8004484:	d1c9      	bne.n	800441a <_puts_r+0x2e>
 8004486:	e7df      	b.n	8004448 <_puts_r+0x5c>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	250a      	movs	r5, #10
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	6022      	str	r2, [r4, #0]
 8004490:	701d      	strb	r5, [r3, #0]
 8004492:	e7db      	b.n	800444c <_puts_r+0x60>

08004494 <puts>:
 8004494:	4b02      	ldr	r3, [pc, #8]	; (80044a0 <puts+0xc>)
 8004496:	4601      	mov	r1, r0
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f7ff bfa7 	b.w	80043ec <_puts_r>
 800449e:	bf00      	nop
 80044a0:	20000064 	.word	0x20000064

080044a4 <__sread>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	460c      	mov	r4, r1
 80044a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ac:	f000 f8fc 	bl	80046a8 <_read_r>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	bfab      	itete	ge
 80044b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044b6:	89a3      	ldrhlt	r3, [r4, #12]
 80044b8:	181b      	addge	r3, r3, r0
 80044ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044be:	bfac      	ite	ge
 80044c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80044c2:	81a3      	strhlt	r3, [r4, #12]
 80044c4:	bd10      	pop	{r4, pc}

080044c6 <__swrite>:
 80044c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ca:	461f      	mov	r7, r3
 80044cc:	898b      	ldrh	r3, [r1, #12]
 80044ce:	05db      	lsls	r3, r3, #23
 80044d0:	4605      	mov	r5, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	4616      	mov	r6, r2
 80044d6:	d505      	bpl.n	80044e4 <__swrite+0x1e>
 80044d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044dc:	2302      	movs	r3, #2
 80044de:	2200      	movs	r2, #0
 80044e0:	f000 f8d0 	bl	8004684 <_lseek_r>
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	4632      	mov	r2, r6
 80044f2:	463b      	mov	r3, r7
 80044f4:	4628      	mov	r0, r5
 80044f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044fa:	f000 b8e7 	b.w	80046cc <_write_r>

080044fe <__sseek>:
 80044fe:	b510      	push	{r4, lr}
 8004500:	460c      	mov	r4, r1
 8004502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004506:	f000 f8bd 	bl	8004684 <_lseek_r>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	bf15      	itete	ne
 8004510:	6560      	strne	r0, [r4, #84]	; 0x54
 8004512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800451a:	81a3      	strheq	r3, [r4, #12]
 800451c:	bf18      	it	ne
 800451e:	81a3      	strhne	r3, [r4, #12]
 8004520:	bd10      	pop	{r4, pc}

08004522 <__sclose>:
 8004522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004526:	f000 b89d 	b.w	8004664 <_close_r>

0800452a <__swbuf_r>:
 800452a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452c:	460e      	mov	r6, r1
 800452e:	4614      	mov	r4, r2
 8004530:	4605      	mov	r5, r0
 8004532:	b118      	cbz	r0, 800453c <__swbuf_r+0x12>
 8004534:	6a03      	ldr	r3, [r0, #32]
 8004536:	b90b      	cbnz	r3, 800453c <__swbuf_r+0x12>
 8004538:	f7ff ff10 	bl	800435c <__sinit>
 800453c:	69a3      	ldr	r3, [r4, #24]
 800453e:	60a3      	str	r3, [r4, #8]
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	071a      	lsls	r2, r3, #28
 8004544:	d525      	bpl.n	8004592 <__swbuf_r+0x68>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	b31b      	cbz	r3, 8004592 <__swbuf_r+0x68>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	6922      	ldr	r2, [r4, #16]
 800454e:	1a98      	subs	r0, r3, r2
 8004550:	6963      	ldr	r3, [r4, #20]
 8004552:	b2f6      	uxtb	r6, r6
 8004554:	4283      	cmp	r3, r0
 8004556:	4637      	mov	r7, r6
 8004558:	dc04      	bgt.n	8004564 <__swbuf_r+0x3a>
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 fd47 	bl	8004ff0 <_fflush_r>
 8004562:	b9e0      	cbnz	r0, 800459e <__swbuf_r+0x74>
 8004564:	68a3      	ldr	r3, [r4, #8]
 8004566:	3b01      	subs	r3, #1
 8004568:	60a3      	str	r3, [r4, #8]
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	6022      	str	r2, [r4, #0]
 8004570:	701e      	strb	r6, [r3, #0]
 8004572:	6962      	ldr	r2, [r4, #20]
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	429a      	cmp	r2, r3
 8004578:	d004      	beq.n	8004584 <__swbuf_r+0x5a>
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	07db      	lsls	r3, r3, #31
 800457e:	d506      	bpl.n	800458e <__swbuf_r+0x64>
 8004580:	2e0a      	cmp	r6, #10
 8004582:	d104      	bne.n	800458e <__swbuf_r+0x64>
 8004584:	4621      	mov	r1, r4
 8004586:	4628      	mov	r0, r5
 8004588:	f000 fd32 	bl	8004ff0 <_fflush_r>
 800458c:	b938      	cbnz	r0, 800459e <__swbuf_r+0x74>
 800458e:	4638      	mov	r0, r7
 8004590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004592:	4621      	mov	r1, r4
 8004594:	4628      	mov	r0, r5
 8004596:	f000 f805 	bl	80045a4 <__swsetup_r>
 800459a:	2800      	cmp	r0, #0
 800459c:	d0d5      	beq.n	800454a <__swbuf_r+0x20>
 800459e:	f04f 37ff 	mov.w	r7, #4294967295
 80045a2:	e7f4      	b.n	800458e <__swbuf_r+0x64>

080045a4 <__swsetup_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <__swsetup_r+0xac>)
 80045a8:	4605      	mov	r5, r0
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	460c      	mov	r4, r1
 80045ae:	b118      	cbz	r0, 80045b8 <__swsetup_r+0x14>
 80045b0:	6a03      	ldr	r3, [r0, #32]
 80045b2:	b90b      	cbnz	r3, 80045b8 <__swsetup_r+0x14>
 80045b4:	f7ff fed2 	bl	800435c <__sinit>
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045be:	0718      	lsls	r0, r3, #28
 80045c0:	d422      	bmi.n	8004608 <__swsetup_r+0x64>
 80045c2:	06d9      	lsls	r1, r3, #27
 80045c4:	d407      	bmi.n	80045d6 <__swsetup_r+0x32>
 80045c6:	2309      	movs	r3, #9
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	e034      	b.n	8004640 <__swsetup_r+0x9c>
 80045d6:	0758      	lsls	r0, r3, #29
 80045d8:	d512      	bpl.n	8004600 <__swsetup_r+0x5c>
 80045da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045dc:	b141      	cbz	r1, 80045f0 <__swsetup_r+0x4c>
 80045de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045e2:	4299      	cmp	r1, r3
 80045e4:	d002      	beq.n	80045ec <__swsetup_r+0x48>
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 f8b0 	bl	800474c <_free_r>
 80045ec:	2300      	movs	r3, #0
 80045ee:	6363      	str	r3, [r4, #52]	; 0x34
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	2300      	movs	r3, #0
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	6923      	ldr	r3, [r4, #16]
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f043 0308 	orr.w	r3, r3, #8
 8004606:	81a3      	strh	r3, [r4, #12]
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	b94b      	cbnz	r3, 8004620 <__swsetup_r+0x7c>
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004616:	d003      	beq.n	8004620 <__swsetup_r+0x7c>
 8004618:	4621      	mov	r1, r4
 800461a:	4628      	mov	r0, r5
 800461c:	f000 fd36 	bl	800508c <__smakebuf_r>
 8004620:	89a0      	ldrh	r0, [r4, #12]
 8004622:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004626:	f010 0301 	ands.w	r3, r0, #1
 800462a:	d00a      	beq.n	8004642 <__swsetup_r+0x9e>
 800462c:	2300      	movs	r3, #0
 800462e:	60a3      	str	r3, [r4, #8]
 8004630:	6963      	ldr	r3, [r4, #20]
 8004632:	425b      	negs	r3, r3
 8004634:	61a3      	str	r3, [r4, #24]
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	b943      	cbnz	r3, 800464c <__swsetup_r+0xa8>
 800463a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800463e:	d1c4      	bne.n	80045ca <__swsetup_r+0x26>
 8004640:	bd38      	pop	{r3, r4, r5, pc}
 8004642:	0781      	lsls	r1, r0, #30
 8004644:	bf58      	it	pl
 8004646:	6963      	ldrpl	r3, [r4, #20]
 8004648:	60a3      	str	r3, [r4, #8]
 800464a:	e7f4      	b.n	8004636 <__swsetup_r+0x92>
 800464c:	2000      	movs	r0, #0
 800464e:	e7f7      	b.n	8004640 <__swsetup_r+0x9c>
 8004650:	20000064 	.word	0x20000064

08004654 <memset>:
 8004654:	4402      	add	r2, r0
 8004656:	4603      	mov	r3, r0
 8004658:	4293      	cmp	r3, r2
 800465a:	d100      	bne.n	800465e <memset+0xa>
 800465c:	4770      	bx	lr
 800465e:	f803 1b01 	strb.w	r1, [r3], #1
 8004662:	e7f9      	b.n	8004658 <memset+0x4>

08004664 <_close_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d06      	ldr	r5, [pc, #24]	; (8004680 <_close_r+0x1c>)
 8004668:	2300      	movs	r3, #0
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	602b      	str	r3, [r5, #0]
 8004670:	f7fc fc95 	bl	8000f9e <_close>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_close_r+0x1a>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_close_r+0x1a>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	200002f4 	.word	0x200002f4

08004684 <_lseek_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d07      	ldr	r5, [pc, #28]	; (80046a4 <_lseek_r+0x20>)
 8004688:	4604      	mov	r4, r0
 800468a:	4608      	mov	r0, r1
 800468c:	4611      	mov	r1, r2
 800468e:	2200      	movs	r2, #0
 8004690:	602a      	str	r2, [r5, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fc fcaa 	bl	8000fec <_lseek>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_lseek_r+0x1e>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_lseek_r+0x1e>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	200002f4 	.word	0x200002f4

080046a8 <_read_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d07      	ldr	r5, [pc, #28]	; (80046c8 <_read_r+0x20>)
 80046ac:	4604      	mov	r4, r0
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fc fc38 	bl	8000f2c <_read>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_read_r+0x1e>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_read_r+0x1e>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	200002f4 	.word	0x200002f4

080046cc <_write_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d07      	ldr	r5, [pc, #28]	; (80046ec <_write_r+0x20>)
 80046d0:	4604      	mov	r4, r0
 80046d2:	4608      	mov	r0, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	602a      	str	r2, [r5, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7fc fc43 	bl	8000f66 <_write>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_write_r+0x1e>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_write_r+0x1e>
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	200002f4 	.word	0x200002f4

080046f0 <__errno>:
 80046f0:	4b01      	ldr	r3, [pc, #4]	; (80046f8 <__errno+0x8>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000064 	.word	0x20000064

080046fc <__libc_init_array>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	4d0d      	ldr	r5, [pc, #52]	; (8004734 <__libc_init_array+0x38>)
 8004700:	4c0d      	ldr	r4, [pc, #52]	; (8004738 <__libc_init_array+0x3c>)
 8004702:	1b64      	subs	r4, r4, r5
 8004704:	10a4      	asrs	r4, r4, #2
 8004706:	2600      	movs	r6, #0
 8004708:	42a6      	cmp	r6, r4
 800470a:	d109      	bne.n	8004720 <__libc_init_array+0x24>
 800470c:	4d0b      	ldr	r5, [pc, #44]	; (800473c <__libc_init_array+0x40>)
 800470e:	4c0c      	ldr	r4, [pc, #48]	; (8004740 <__libc_init_array+0x44>)
 8004710:	f000 fd2a 	bl	8005168 <_init>
 8004714:	1b64      	subs	r4, r4, r5
 8004716:	10a4      	asrs	r4, r4, #2
 8004718:	2600      	movs	r6, #0
 800471a:	42a6      	cmp	r6, r4
 800471c:	d105      	bne.n	800472a <__libc_init_array+0x2e>
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f855 3b04 	ldr.w	r3, [r5], #4
 8004724:	4798      	blx	r3
 8004726:	3601      	adds	r6, #1
 8004728:	e7ee      	b.n	8004708 <__libc_init_array+0xc>
 800472a:	f855 3b04 	ldr.w	r3, [r5], #4
 800472e:	4798      	blx	r3
 8004730:	3601      	adds	r6, #1
 8004732:	e7f2      	b.n	800471a <__libc_init_array+0x1e>
 8004734:	080051f0 	.word	0x080051f0
 8004738:	080051f0 	.word	0x080051f0
 800473c:	080051f0 	.word	0x080051f0
 8004740:	080051f4 	.word	0x080051f4

08004744 <__retarget_lock_init_recursive>:
 8004744:	4770      	bx	lr

08004746 <__retarget_lock_acquire_recursive>:
 8004746:	4770      	bx	lr

08004748 <__retarget_lock_release_recursive>:
 8004748:	4770      	bx	lr
	...

0800474c <_free_r>:
 800474c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800474e:	2900      	cmp	r1, #0
 8004750:	d044      	beq.n	80047dc <_free_r+0x90>
 8004752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004756:	9001      	str	r0, [sp, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f1a1 0404 	sub.w	r4, r1, #4
 800475e:	bfb8      	it	lt
 8004760:	18e4      	addlt	r4, r4, r3
 8004762:	f000 f8df 	bl	8004924 <__malloc_lock>
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <_free_r+0x94>)
 8004768:	9801      	ldr	r0, [sp, #4]
 800476a:	6813      	ldr	r3, [r2, #0]
 800476c:	b933      	cbnz	r3, 800477c <_free_r+0x30>
 800476e:	6063      	str	r3, [r4, #4]
 8004770:	6014      	str	r4, [r2, #0]
 8004772:	b003      	add	sp, #12
 8004774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004778:	f000 b8da 	b.w	8004930 <__malloc_unlock>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d908      	bls.n	8004792 <_free_r+0x46>
 8004780:	6825      	ldr	r5, [r4, #0]
 8004782:	1961      	adds	r1, r4, r5
 8004784:	428b      	cmp	r3, r1
 8004786:	bf01      	itttt	eq
 8004788:	6819      	ldreq	r1, [r3, #0]
 800478a:	685b      	ldreq	r3, [r3, #4]
 800478c:	1949      	addeq	r1, r1, r5
 800478e:	6021      	streq	r1, [r4, #0]
 8004790:	e7ed      	b.n	800476e <_free_r+0x22>
 8004792:	461a      	mov	r2, r3
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	b10b      	cbz	r3, 800479c <_free_r+0x50>
 8004798:	42a3      	cmp	r3, r4
 800479a:	d9fa      	bls.n	8004792 <_free_r+0x46>
 800479c:	6811      	ldr	r1, [r2, #0]
 800479e:	1855      	adds	r5, r2, r1
 80047a0:	42a5      	cmp	r5, r4
 80047a2:	d10b      	bne.n	80047bc <_free_r+0x70>
 80047a4:	6824      	ldr	r4, [r4, #0]
 80047a6:	4421      	add	r1, r4
 80047a8:	1854      	adds	r4, r2, r1
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	d1e0      	bne.n	8004772 <_free_r+0x26>
 80047b0:	681c      	ldr	r4, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	6053      	str	r3, [r2, #4]
 80047b6:	440c      	add	r4, r1
 80047b8:	6014      	str	r4, [r2, #0]
 80047ba:	e7da      	b.n	8004772 <_free_r+0x26>
 80047bc:	d902      	bls.n	80047c4 <_free_r+0x78>
 80047be:	230c      	movs	r3, #12
 80047c0:	6003      	str	r3, [r0, #0]
 80047c2:	e7d6      	b.n	8004772 <_free_r+0x26>
 80047c4:	6825      	ldr	r5, [r4, #0]
 80047c6:	1961      	adds	r1, r4, r5
 80047c8:	428b      	cmp	r3, r1
 80047ca:	bf04      	itt	eq
 80047cc:	6819      	ldreq	r1, [r3, #0]
 80047ce:	685b      	ldreq	r3, [r3, #4]
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	bf04      	itt	eq
 80047d4:	1949      	addeq	r1, r1, r5
 80047d6:	6021      	streq	r1, [r4, #0]
 80047d8:	6054      	str	r4, [r2, #4]
 80047da:	e7ca      	b.n	8004772 <_free_r+0x26>
 80047dc:	b003      	add	sp, #12
 80047de:	bd30      	pop	{r4, r5, pc}
 80047e0:	200002fc 	.word	0x200002fc

080047e4 <sbrk_aligned>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	4e0e      	ldr	r6, [pc, #56]	; (8004820 <sbrk_aligned+0x3c>)
 80047e8:	460c      	mov	r4, r1
 80047ea:	6831      	ldr	r1, [r6, #0]
 80047ec:	4605      	mov	r5, r0
 80047ee:	b911      	cbnz	r1, 80047f6 <sbrk_aligned+0x12>
 80047f0:	f000 fcaa 	bl	8005148 <_sbrk_r>
 80047f4:	6030      	str	r0, [r6, #0]
 80047f6:	4621      	mov	r1, r4
 80047f8:	4628      	mov	r0, r5
 80047fa:	f000 fca5 	bl	8005148 <_sbrk_r>
 80047fe:	1c43      	adds	r3, r0, #1
 8004800:	d00a      	beq.n	8004818 <sbrk_aligned+0x34>
 8004802:	1cc4      	adds	r4, r0, #3
 8004804:	f024 0403 	bic.w	r4, r4, #3
 8004808:	42a0      	cmp	r0, r4
 800480a:	d007      	beq.n	800481c <sbrk_aligned+0x38>
 800480c:	1a21      	subs	r1, r4, r0
 800480e:	4628      	mov	r0, r5
 8004810:	f000 fc9a 	bl	8005148 <_sbrk_r>
 8004814:	3001      	adds	r0, #1
 8004816:	d101      	bne.n	800481c <sbrk_aligned+0x38>
 8004818:	f04f 34ff 	mov.w	r4, #4294967295
 800481c:	4620      	mov	r0, r4
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	20000300 	.word	0x20000300

08004824 <_malloc_r>:
 8004824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004828:	1ccd      	adds	r5, r1, #3
 800482a:	f025 0503 	bic.w	r5, r5, #3
 800482e:	3508      	adds	r5, #8
 8004830:	2d0c      	cmp	r5, #12
 8004832:	bf38      	it	cc
 8004834:	250c      	movcc	r5, #12
 8004836:	2d00      	cmp	r5, #0
 8004838:	4607      	mov	r7, r0
 800483a:	db01      	blt.n	8004840 <_malloc_r+0x1c>
 800483c:	42a9      	cmp	r1, r5
 800483e:	d905      	bls.n	800484c <_malloc_r+0x28>
 8004840:	230c      	movs	r3, #12
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	2600      	movs	r6, #0
 8004846:	4630      	mov	r0, r6
 8004848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800484c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004920 <_malloc_r+0xfc>
 8004850:	f000 f868 	bl	8004924 <__malloc_lock>
 8004854:	f8d8 3000 	ldr.w	r3, [r8]
 8004858:	461c      	mov	r4, r3
 800485a:	bb5c      	cbnz	r4, 80048b4 <_malloc_r+0x90>
 800485c:	4629      	mov	r1, r5
 800485e:	4638      	mov	r0, r7
 8004860:	f7ff ffc0 	bl	80047e4 <sbrk_aligned>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	4604      	mov	r4, r0
 8004868:	d155      	bne.n	8004916 <_malloc_r+0xf2>
 800486a:	f8d8 4000 	ldr.w	r4, [r8]
 800486e:	4626      	mov	r6, r4
 8004870:	2e00      	cmp	r6, #0
 8004872:	d145      	bne.n	8004900 <_malloc_r+0xdc>
 8004874:	2c00      	cmp	r4, #0
 8004876:	d048      	beq.n	800490a <_malloc_r+0xe6>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	4631      	mov	r1, r6
 800487c:	4638      	mov	r0, r7
 800487e:	eb04 0903 	add.w	r9, r4, r3
 8004882:	f000 fc61 	bl	8005148 <_sbrk_r>
 8004886:	4581      	cmp	r9, r0
 8004888:	d13f      	bne.n	800490a <_malloc_r+0xe6>
 800488a:	6821      	ldr	r1, [r4, #0]
 800488c:	1a6d      	subs	r5, r5, r1
 800488e:	4629      	mov	r1, r5
 8004890:	4638      	mov	r0, r7
 8004892:	f7ff ffa7 	bl	80047e4 <sbrk_aligned>
 8004896:	3001      	adds	r0, #1
 8004898:	d037      	beq.n	800490a <_malloc_r+0xe6>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	442b      	add	r3, r5
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	f8d8 3000 	ldr.w	r3, [r8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d038      	beq.n	800491a <_malloc_r+0xf6>
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	42a2      	cmp	r2, r4
 80048ac:	d12b      	bne.n	8004906 <_malloc_r+0xe2>
 80048ae:	2200      	movs	r2, #0
 80048b0:	605a      	str	r2, [r3, #4]
 80048b2:	e00f      	b.n	80048d4 <_malloc_r+0xb0>
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	1b52      	subs	r2, r2, r5
 80048b8:	d41f      	bmi.n	80048fa <_malloc_r+0xd6>
 80048ba:	2a0b      	cmp	r2, #11
 80048bc:	d917      	bls.n	80048ee <_malloc_r+0xca>
 80048be:	1961      	adds	r1, r4, r5
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	6025      	str	r5, [r4, #0]
 80048c4:	bf18      	it	ne
 80048c6:	6059      	strne	r1, [r3, #4]
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	bf08      	it	eq
 80048cc:	f8c8 1000 	streq.w	r1, [r8]
 80048d0:	5162      	str	r2, [r4, r5]
 80048d2:	604b      	str	r3, [r1, #4]
 80048d4:	4638      	mov	r0, r7
 80048d6:	f104 060b 	add.w	r6, r4, #11
 80048da:	f000 f829 	bl	8004930 <__malloc_unlock>
 80048de:	f026 0607 	bic.w	r6, r6, #7
 80048e2:	1d23      	adds	r3, r4, #4
 80048e4:	1af2      	subs	r2, r6, r3
 80048e6:	d0ae      	beq.n	8004846 <_malloc_r+0x22>
 80048e8:	1b9b      	subs	r3, r3, r6
 80048ea:	50a3      	str	r3, [r4, r2]
 80048ec:	e7ab      	b.n	8004846 <_malloc_r+0x22>
 80048ee:	42a3      	cmp	r3, r4
 80048f0:	6862      	ldr	r2, [r4, #4]
 80048f2:	d1dd      	bne.n	80048b0 <_malloc_r+0x8c>
 80048f4:	f8c8 2000 	str.w	r2, [r8]
 80048f8:	e7ec      	b.n	80048d4 <_malloc_r+0xb0>
 80048fa:	4623      	mov	r3, r4
 80048fc:	6864      	ldr	r4, [r4, #4]
 80048fe:	e7ac      	b.n	800485a <_malloc_r+0x36>
 8004900:	4634      	mov	r4, r6
 8004902:	6876      	ldr	r6, [r6, #4]
 8004904:	e7b4      	b.n	8004870 <_malloc_r+0x4c>
 8004906:	4613      	mov	r3, r2
 8004908:	e7cc      	b.n	80048a4 <_malloc_r+0x80>
 800490a:	230c      	movs	r3, #12
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4638      	mov	r0, r7
 8004910:	f000 f80e 	bl	8004930 <__malloc_unlock>
 8004914:	e797      	b.n	8004846 <_malloc_r+0x22>
 8004916:	6025      	str	r5, [r4, #0]
 8004918:	e7dc      	b.n	80048d4 <_malloc_r+0xb0>
 800491a:	605b      	str	r3, [r3, #4]
 800491c:	deff      	udf	#255	; 0xff
 800491e:	bf00      	nop
 8004920:	200002fc 	.word	0x200002fc

08004924 <__malloc_lock>:
 8004924:	4801      	ldr	r0, [pc, #4]	; (800492c <__malloc_lock+0x8>)
 8004926:	f7ff bf0e 	b.w	8004746 <__retarget_lock_acquire_recursive>
 800492a:	bf00      	nop
 800492c:	200002f8 	.word	0x200002f8

08004930 <__malloc_unlock>:
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <__malloc_unlock+0x8>)
 8004932:	f7ff bf09 	b.w	8004748 <__retarget_lock_release_recursive>
 8004936:	bf00      	nop
 8004938:	200002f8 	.word	0x200002f8

0800493c <__sfputc_r>:
 800493c:	6893      	ldr	r3, [r2, #8]
 800493e:	3b01      	subs	r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	b410      	push	{r4}
 8004944:	6093      	str	r3, [r2, #8]
 8004946:	da08      	bge.n	800495a <__sfputc_r+0x1e>
 8004948:	6994      	ldr	r4, [r2, #24]
 800494a:	42a3      	cmp	r3, r4
 800494c:	db01      	blt.n	8004952 <__sfputc_r+0x16>
 800494e:	290a      	cmp	r1, #10
 8004950:	d103      	bne.n	800495a <__sfputc_r+0x1e>
 8004952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004956:	f7ff bde8 	b.w	800452a <__swbuf_r>
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	1c58      	adds	r0, r3, #1
 800495e:	6010      	str	r0, [r2, #0]
 8004960:	7019      	strb	r1, [r3, #0]
 8004962:	4608      	mov	r0, r1
 8004964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004968:	4770      	bx	lr

0800496a <__sfputs_r>:
 800496a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496c:	4606      	mov	r6, r0
 800496e:	460f      	mov	r7, r1
 8004970:	4614      	mov	r4, r2
 8004972:	18d5      	adds	r5, r2, r3
 8004974:	42ac      	cmp	r4, r5
 8004976:	d101      	bne.n	800497c <__sfputs_r+0x12>
 8004978:	2000      	movs	r0, #0
 800497a:	e007      	b.n	800498c <__sfputs_r+0x22>
 800497c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004980:	463a      	mov	r2, r7
 8004982:	4630      	mov	r0, r6
 8004984:	f7ff ffda 	bl	800493c <__sfputc_r>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d1f3      	bne.n	8004974 <__sfputs_r+0xa>
 800498c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004990 <_vfiprintf_r>:
 8004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	460d      	mov	r5, r1
 8004996:	b09d      	sub	sp, #116	; 0x74
 8004998:	4614      	mov	r4, r2
 800499a:	4698      	mov	r8, r3
 800499c:	4606      	mov	r6, r0
 800499e:	b118      	cbz	r0, 80049a8 <_vfiprintf_r+0x18>
 80049a0:	6a03      	ldr	r3, [r0, #32]
 80049a2:	b90b      	cbnz	r3, 80049a8 <_vfiprintf_r+0x18>
 80049a4:	f7ff fcda 	bl	800435c <__sinit>
 80049a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049aa:	07d9      	lsls	r1, r3, #31
 80049ac:	d405      	bmi.n	80049ba <_vfiprintf_r+0x2a>
 80049ae:	89ab      	ldrh	r3, [r5, #12]
 80049b0:	059a      	lsls	r2, r3, #22
 80049b2:	d402      	bmi.n	80049ba <_vfiprintf_r+0x2a>
 80049b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049b6:	f7ff fec6 	bl	8004746 <__retarget_lock_acquire_recursive>
 80049ba:	89ab      	ldrh	r3, [r5, #12]
 80049bc:	071b      	lsls	r3, r3, #28
 80049be:	d501      	bpl.n	80049c4 <_vfiprintf_r+0x34>
 80049c0:	692b      	ldr	r3, [r5, #16]
 80049c2:	b99b      	cbnz	r3, 80049ec <_vfiprintf_r+0x5c>
 80049c4:	4629      	mov	r1, r5
 80049c6:	4630      	mov	r0, r6
 80049c8:	f7ff fdec 	bl	80045a4 <__swsetup_r>
 80049cc:	b170      	cbz	r0, 80049ec <_vfiprintf_r+0x5c>
 80049ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049d0:	07dc      	lsls	r4, r3, #31
 80049d2:	d504      	bpl.n	80049de <_vfiprintf_r+0x4e>
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	b01d      	add	sp, #116	; 0x74
 80049da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049de:	89ab      	ldrh	r3, [r5, #12]
 80049e0:	0598      	lsls	r0, r3, #22
 80049e2:	d4f7      	bmi.n	80049d4 <_vfiprintf_r+0x44>
 80049e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e6:	f7ff feaf 	bl	8004748 <__retarget_lock_release_recursive>
 80049ea:	e7f3      	b.n	80049d4 <_vfiprintf_r+0x44>
 80049ec:	2300      	movs	r3, #0
 80049ee:	9309      	str	r3, [sp, #36]	; 0x24
 80049f0:	2320      	movs	r3, #32
 80049f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049fa:	2330      	movs	r3, #48	; 0x30
 80049fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004bb0 <_vfiprintf_r+0x220>
 8004a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a04:	f04f 0901 	mov.w	r9, #1
 8004a08:	4623      	mov	r3, r4
 8004a0a:	469a      	mov	sl, r3
 8004a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a10:	b10a      	cbz	r2, 8004a16 <_vfiprintf_r+0x86>
 8004a12:	2a25      	cmp	r2, #37	; 0x25
 8004a14:	d1f9      	bne.n	8004a0a <_vfiprintf_r+0x7a>
 8004a16:	ebba 0b04 	subs.w	fp, sl, r4
 8004a1a:	d00b      	beq.n	8004a34 <_vfiprintf_r+0xa4>
 8004a1c:	465b      	mov	r3, fp
 8004a1e:	4622      	mov	r2, r4
 8004a20:	4629      	mov	r1, r5
 8004a22:	4630      	mov	r0, r6
 8004a24:	f7ff ffa1 	bl	800496a <__sfputs_r>
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f000 80a9 	beq.w	8004b80 <_vfiprintf_r+0x1f0>
 8004a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a30:	445a      	add	r2, fp
 8004a32:	9209      	str	r2, [sp, #36]	; 0x24
 8004a34:	f89a 3000 	ldrb.w	r3, [sl]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a1 	beq.w	8004b80 <_vfiprintf_r+0x1f0>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295
 8004a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a48:	f10a 0a01 	add.w	sl, sl, #1
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	9307      	str	r3, [sp, #28]
 8004a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a54:	931a      	str	r3, [sp, #104]	; 0x68
 8004a56:	4654      	mov	r4, sl
 8004a58:	2205      	movs	r2, #5
 8004a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5e:	4854      	ldr	r0, [pc, #336]	; (8004bb0 <_vfiprintf_r+0x220>)
 8004a60:	f7fb fbbe 	bl	80001e0 <memchr>
 8004a64:	9a04      	ldr	r2, [sp, #16]
 8004a66:	b9d8      	cbnz	r0, 8004aa0 <_vfiprintf_r+0x110>
 8004a68:	06d1      	lsls	r1, r2, #27
 8004a6a:	bf44      	itt	mi
 8004a6c:	2320      	movmi	r3, #32
 8004a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a72:	0713      	lsls	r3, r2, #28
 8004a74:	bf44      	itt	mi
 8004a76:	232b      	movmi	r3, #43	; 0x2b
 8004a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a80:	2b2a      	cmp	r3, #42	; 0x2a
 8004a82:	d015      	beq.n	8004ab0 <_vfiprintf_r+0x120>
 8004a84:	9a07      	ldr	r2, [sp, #28]
 8004a86:	4654      	mov	r4, sl
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f04f 0c0a 	mov.w	ip, #10
 8004a8e:	4621      	mov	r1, r4
 8004a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a94:	3b30      	subs	r3, #48	; 0x30
 8004a96:	2b09      	cmp	r3, #9
 8004a98:	d94d      	bls.n	8004b36 <_vfiprintf_r+0x1a6>
 8004a9a:	b1b0      	cbz	r0, 8004aca <_vfiprintf_r+0x13a>
 8004a9c:	9207      	str	r2, [sp, #28]
 8004a9e:	e014      	b.n	8004aca <_vfiprintf_r+0x13a>
 8004aa0:	eba0 0308 	sub.w	r3, r0, r8
 8004aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	9304      	str	r3, [sp, #16]
 8004aac:	46a2      	mov	sl, r4
 8004aae:	e7d2      	b.n	8004a56 <_vfiprintf_r+0xc6>
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	1d19      	adds	r1, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	9103      	str	r1, [sp, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bfbb      	ittet	lt
 8004abc:	425b      	neglt	r3, r3
 8004abe:	f042 0202 	orrlt.w	r2, r2, #2
 8004ac2:	9307      	strge	r3, [sp, #28]
 8004ac4:	9307      	strlt	r3, [sp, #28]
 8004ac6:	bfb8      	it	lt
 8004ac8:	9204      	strlt	r2, [sp, #16]
 8004aca:	7823      	ldrb	r3, [r4, #0]
 8004acc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ace:	d10c      	bne.n	8004aea <_vfiprintf_r+0x15a>
 8004ad0:	7863      	ldrb	r3, [r4, #1]
 8004ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad4:	d134      	bne.n	8004b40 <_vfiprintf_r+0x1b0>
 8004ad6:	9b03      	ldr	r3, [sp, #12]
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	9203      	str	r2, [sp, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfb8      	it	lt
 8004ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ae6:	3402      	adds	r4, #2
 8004ae8:	9305      	str	r3, [sp, #20]
 8004aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004bc0 <_vfiprintf_r+0x230>
 8004aee:	7821      	ldrb	r1, [r4, #0]
 8004af0:	2203      	movs	r2, #3
 8004af2:	4650      	mov	r0, sl
 8004af4:	f7fb fb74 	bl	80001e0 <memchr>
 8004af8:	b138      	cbz	r0, 8004b0a <_vfiprintf_r+0x17a>
 8004afa:	9b04      	ldr	r3, [sp, #16]
 8004afc:	eba0 000a 	sub.w	r0, r0, sl
 8004b00:	2240      	movs	r2, #64	; 0x40
 8004b02:	4082      	lsls	r2, r0
 8004b04:	4313      	orrs	r3, r2
 8004b06:	3401      	adds	r4, #1
 8004b08:	9304      	str	r3, [sp, #16]
 8004b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0e:	4829      	ldr	r0, [pc, #164]	; (8004bb4 <_vfiprintf_r+0x224>)
 8004b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b14:	2206      	movs	r2, #6
 8004b16:	f7fb fb63 	bl	80001e0 <memchr>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d03f      	beq.n	8004b9e <_vfiprintf_r+0x20e>
 8004b1e:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <_vfiprintf_r+0x228>)
 8004b20:	bb1b      	cbnz	r3, 8004b6a <_vfiprintf_r+0x1da>
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	3307      	adds	r3, #7
 8004b26:	f023 0307 	bic.w	r3, r3, #7
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	9303      	str	r3, [sp, #12]
 8004b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b30:	443b      	add	r3, r7
 8004b32:	9309      	str	r3, [sp, #36]	; 0x24
 8004b34:	e768      	b.n	8004a08 <_vfiprintf_r+0x78>
 8004b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	e7a6      	b.n	8004a8e <_vfiprintf_r+0xfe>
 8004b40:	2300      	movs	r3, #0
 8004b42:	3401      	adds	r4, #1
 8004b44:	9305      	str	r3, [sp, #20]
 8004b46:	4619      	mov	r1, r3
 8004b48:	f04f 0c0a 	mov.w	ip, #10
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b52:	3a30      	subs	r2, #48	; 0x30
 8004b54:	2a09      	cmp	r2, #9
 8004b56:	d903      	bls.n	8004b60 <_vfiprintf_r+0x1d0>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0c6      	beq.n	8004aea <_vfiprintf_r+0x15a>
 8004b5c:	9105      	str	r1, [sp, #20]
 8004b5e:	e7c4      	b.n	8004aea <_vfiprintf_r+0x15a>
 8004b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b64:	4604      	mov	r4, r0
 8004b66:	2301      	movs	r3, #1
 8004b68:	e7f0      	b.n	8004b4c <_vfiprintf_r+0x1bc>
 8004b6a:	ab03      	add	r3, sp, #12
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	462a      	mov	r2, r5
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <_vfiprintf_r+0x22c>)
 8004b72:	a904      	add	r1, sp, #16
 8004b74:	4630      	mov	r0, r6
 8004b76:	f3af 8000 	nop.w
 8004b7a:	4607      	mov	r7, r0
 8004b7c:	1c78      	adds	r0, r7, #1
 8004b7e:	d1d6      	bne.n	8004b2e <_vfiprintf_r+0x19e>
 8004b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b82:	07d9      	lsls	r1, r3, #31
 8004b84:	d405      	bmi.n	8004b92 <_vfiprintf_r+0x202>
 8004b86:	89ab      	ldrh	r3, [r5, #12]
 8004b88:	059a      	lsls	r2, r3, #22
 8004b8a:	d402      	bmi.n	8004b92 <_vfiprintf_r+0x202>
 8004b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b8e:	f7ff fddb 	bl	8004748 <__retarget_lock_release_recursive>
 8004b92:	89ab      	ldrh	r3, [r5, #12]
 8004b94:	065b      	lsls	r3, r3, #25
 8004b96:	f53f af1d 	bmi.w	80049d4 <_vfiprintf_r+0x44>
 8004b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b9c:	e71c      	b.n	80049d8 <_vfiprintf_r+0x48>
 8004b9e:	ab03      	add	r3, sp, #12
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	462a      	mov	r2, r5
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <_vfiprintf_r+0x22c>)
 8004ba6:	a904      	add	r1, sp, #16
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 f879 	bl	8004ca0 <_printf_i>
 8004bae:	e7e4      	b.n	8004b7a <_vfiprintf_r+0x1ea>
 8004bb0:	080051b4 	.word	0x080051b4
 8004bb4:	080051be 	.word	0x080051be
 8004bb8:	00000000 	.word	0x00000000
 8004bbc:	0800496b 	.word	0x0800496b
 8004bc0:	080051ba 	.word	0x080051ba

08004bc4 <_printf_common>:
 8004bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc8:	4616      	mov	r6, r2
 8004bca:	4699      	mov	r9, r3
 8004bcc:	688a      	ldr	r2, [r1, #8]
 8004bce:	690b      	ldr	r3, [r1, #16]
 8004bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	bfb8      	it	lt
 8004bd8:	4613      	movlt	r3, r2
 8004bda:	6033      	str	r3, [r6, #0]
 8004bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004be0:	4607      	mov	r7, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	b10a      	cbz	r2, 8004bea <_printf_common+0x26>
 8004be6:	3301      	adds	r3, #1
 8004be8:	6033      	str	r3, [r6, #0]
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	0699      	lsls	r1, r3, #26
 8004bee:	bf42      	ittt	mi
 8004bf0:	6833      	ldrmi	r3, [r6, #0]
 8004bf2:	3302      	addmi	r3, #2
 8004bf4:	6033      	strmi	r3, [r6, #0]
 8004bf6:	6825      	ldr	r5, [r4, #0]
 8004bf8:	f015 0506 	ands.w	r5, r5, #6
 8004bfc:	d106      	bne.n	8004c0c <_printf_common+0x48>
 8004bfe:	f104 0a19 	add.w	sl, r4, #25
 8004c02:	68e3      	ldr	r3, [r4, #12]
 8004c04:	6832      	ldr	r2, [r6, #0]
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	42ab      	cmp	r3, r5
 8004c0a:	dc26      	bgt.n	8004c5a <_printf_common+0x96>
 8004c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c10:	1e13      	subs	r3, r2, #0
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	bf18      	it	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	0692      	lsls	r2, r2, #26
 8004c1a:	d42b      	bmi.n	8004c74 <_printf_common+0xb0>
 8004c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c20:	4649      	mov	r1, r9
 8004c22:	4638      	mov	r0, r7
 8004c24:	47c0      	blx	r8
 8004c26:	3001      	adds	r0, #1
 8004c28:	d01e      	beq.n	8004c68 <_printf_common+0xa4>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	6922      	ldr	r2, [r4, #16]
 8004c2e:	f003 0306 	and.w	r3, r3, #6
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	bf02      	ittt	eq
 8004c36:	68e5      	ldreq	r5, [r4, #12]
 8004c38:	6833      	ldreq	r3, [r6, #0]
 8004c3a:	1aed      	subeq	r5, r5, r3
 8004c3c:	68a3      	ldr	r3, [r4, #8]
 8004c3e:	bf0c      	ite	eq
 8004c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c44:	2500      	movne	r5, #0
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bfc4      	itt	gt
 8004c4a:	1a9b      	subgt	r3, r3, r2
 8004c4c:	18ed      	addgt	r5, r5, r3
 8004c4e:	2600      	movs	r6, #0
 8004c50:	341a      	adds	r4, #26
 8004c52:	42b5      	cmp	r5, r6
 8004c54:	d11a      	bne.n	8004c8c <_printf_common+0xc8>
 8004c56:	2000      	movs	r0, #0
 8004c58:	e008      	b.n	8004c6c <_printf_common+0xa8>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	4652      	mov	r2, sl
 8004c5e:	4649      	mov	r1, r9
 8004c60:	4638      	mov	r0, r7
 8004c62:	47c0      	blx	r8
 8004c64:	3001      	adds	r0, #1
 8004c66:	d103      	bne.n	8004c70 <_printf_common+0xac>
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c70:	3501      	adds	r5, #1
 8004c72:	e7c6      	b.n	8004c02 <_printf_common+0x3e>
 8004c74:	18e1      	adds	r1, r4, r3
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	2030      	movs	r0, #48	; 0x30
 8004c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c7e:	4422      	add	r2, r4
 8004c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c88:	3302      	adds	r3, #2
 8004c8a:	e7c7      	b.n	8004c1c <_printf_common+0x58>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4622      	mov	r2, r4
 8004c90:	4649      	mov	r1, r9
 8004c92:	4638      	mov	r0, r7
 8004c94:	47c0      	blx	r8
 8004c96:	3001      	adds	r0, #1
 8004c98:	d0e6      	beq.n	8004c68 <_printf_common+0xa4>
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	e7d9      	b.n	8004c52 <_printf_common+0x8e>
	...

08004ca0 <_printf_i>:
 8004ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	7e0f      	ldrb	r7, [r1, #24]
 8004ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ca8:	2f78      	cmp	r7, #120	; 0x78
 8004caa:	4691      	mov	r9, r2
 8004cac:	4680      	mov	r8, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	469a      	mov	sl, r3
 8004cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cb6:	d807      	bhi.n	8004cc8 <_printf_i+0x28>
 8004cb8:	2f62      	cmp	r7, #98	; 0x62
 8004cba:	d80a      	bhi.n	8004cd2 <_printf_i+0x32>
 8004cbc:	2f00      	cmp	r7, #0
 8004cbe:	f000 80d4 	beq.w	8004e6a <_printf_i+0x1ca>
 8004cc2:	2f58      	cmp	r7, #88	; 0x58
 8004cc4:	f000 80c0 	beq.w	8004e48 <_printf_i+0x1a8>
 8004cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cd0:	e03a      	b.n	8004d48 <_printf_i+0xa8>
 8004cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cd6:	2b15      	cmp	r3, #21
 8004cd8:	d8f6      	bhi.n	8004cc8 <_printf_i+0x28>
 8004cda:	a101      	add	r1, pc, #4	; (adr r1, 8004ce0 <_printf_i+0x40>)
 8004cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ce0:	08004d39 	.word	0x08004d39
 8004ce4:	08004d4d 	.word	0x08004d4d
 8004ce8:	08004cc9 	.word	0x08004cc9
 8004cec:	08004cc9 	.word	0x08004cc9
 8004cf0:	08004cc9 	.word	0x08004cc9
 8004cf4:	08004cc9 	.word	0x08004cc9
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004cc9 	.word	0x08004cc9
 8004d00:	08004cc9 	.word	0x08004cc9
 8004d04:	08004cc9 	.word	0x08004cc9
 8004d08:	08004cc9 	.word	0x08004cc9
 8004d0c:	08004e51 	.word	0x08004e51
 8004d10:	08004d79 	.word	0x08004d79
 8004d14:	08004e0b 	.word	0x08004e0b
 8004d18:	08004cc9 	.word	0x08004cc9
 8004d1c:	08004cc9 	.word	0x08004cc9
 8004d20:	08004e73 	.word	0x08004e73
 8004d24:	08004cc9 	.word	0x08004cc9
 8004d28:	08004d79 	.word	0x08004d79
 8004d2c:	08004cc9 	.word	0x08004cc9
 8004d30:	08004cc9 	.word	0x08004cc9
 8004d34:	08004e13 	.word	0x08004e13
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	602a      	str	r2, [r5, #0]
 8004d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e09f      	b.n	8004e8c <_printf_i+0x1ec>
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	0607      	lsls	r7, r0, #24
 8004d52:	f103 0104 	add.w	r1, r3, #4
 8004d56:	6029      	str	r1, [r5, #0]
 8004d58:	d501      	bpl.n	8004d5e <_printf_i+0xbe>
 8004d5a:	681e      	ldr	r6, [r3, #0]
 8004d5c:	e003      	b.n	8004d66 <_printf_i+0xc6>
 8004d5e:	0646      	lsls	r6, r0, #25
 8004d60:	d5fb      	bpl.n	8004d5a <_printf_i+0xba>
 8004d62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d66:	2e00      	cmp	r6, #0
 8004d68:	da03      	bge.n	8004d72 <_printf_i+0xd2>
 8004d6a:	232d      	movs	r3, #45	; 0x2d
 8004d6c:	4276      	negs	r6, r6
 8004d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d72:	485a      	ldr	r0, [pc, #360]	; (8004edc <_printf_i+0x23c>)
 8004d74:	230a      	movs	r3, #10
 8004d76:	e012      	b.n	8004d9e <_printf_i+0xfe>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	6820      	ldr	r0, [r4, #0]
 8004d7c:	1d19      	adds	r1, r3, #4
 8004d7e:	6029      	str	r1, [r5, #0]
 8004d80:	0605      	lsls	r5, r0, #24
 8004d82:	d501      	bpl.n	8004d88 <_printf_i+0xe8>
 8004d84:	681e      	ldr	r6, [r3, #0]
 8004d86:	e002      	b.n	8004d8e <_printf_i+0xee>
 8004d88:	0641      	lsls	r1, r0, #25
 8004d8a:	d5fb      	bpl.n	8004d84 <_printf_i+0xe4>
 8004d8c:	881e      	ldrh	r6, [r3, #0]
 8004d8e:	4853      	ldr	r0, [pc, #332]	; (8004edc <_printf_i+0x23c>)
 8004d90:	2f6f      	cmp	r7, #111	; 0x6f
 8004d92:	bf0c      	ite	eq
 8004d94:	2308      	moveq	r3, #8
 8004d96:	230a      	movne	r3, #10
 8004d98:	2100      	movs	r1, #0
 8004d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d9e:	6865      	ldr	r5, [r4, #4]
 8004da0:	60a5      	str	r5, [r4, #8]
 8004da2:	2d00      	cmp	r5, #0
 8004da4:	bfa2      	ittt	ge
 8004da6:	6821      	ldrge	r1, [r4, #0]
 8004da8:	f021 0104 	bicge.w	r1, r1, #4
 8004dac:	6021      	strge	r1, [r4, #0]
 8004dae:	b90e      	cbnz	r6, 8004db4 <_printf_i+0x114>
 8004db0:	2d00      	cmp	r5, #0
 8004db2:	d04b      	beq.n	8004e4c <_printf_i+0x1ac>
 8004db4:	4615      	mov	r5, r2
 8004db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dba:	fb03 6711 	mls	r7, r3, r1, r6
 8004dbe:	5dc7      	ldrb	r7, [r0, r7]
 8004dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dc4:	4637      	mov	r7, r6
 8004dc6:	42bb      	cmp	r3, r7
 8004dc8:	460e      	mov	r6, r1
 8004dca:	d9f4      	bls.n	8004db6 <_printf_i+0x116>
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d10b      	bne.n	8004de8 <_printf_i+0x148>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	07de      	lsls	r6, r3, #31
 8004dd4:	d508      	bpl.n	8004de8 <_printf_i+0x148>
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	6861      	ldr	r1, [r4, #4]
 8004dda:	4299      	cmp	r1, r3
 8004ddc:	bfde      	ittt	le
 8004dde:	2330      	movle	r3, #48	; 0x30
 8004de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004de8:	1b52      	subs	r2, r2, r5
 8004dea:	6122      	str	r2, [r4, #16]
 8004dec:	f8cd a000 	str.w	sl, [sp]
 8004df0:	464b      	mov	r3, r9
 8004df2:	aa03      	add	r2, sp, #12
 8004df4:	4621      	mov	r1, r4
 8004df6:	4640      	mov	r0, r8
 8004df8:	f7ff fee4 	bl	8004bc4 <_printf_common>
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d14a      	bne.n	8004e96 <_printf_i+0x1f6>
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	b004      	add	sp, #16
 8004e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f043 0320 	orr.w	r3, r3, #32
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	4833      	ldr	r0, [pc, #204]	; (8004ee0 <_printf_i+0x240>)
 8004e14:	2778      	movs	r7, #120	; 0x78
 8004e16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	6829      	ldr	r1, [r5, #0]
 8004e1e:	061f      	lsls	r7, r3, #24
 8004e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e24:	d402      	bmi.n	8004e2c <_printf_i+0x18c>
 8004e26:	065f      	lsls	r7, r3, #25
 8004e28:	bf48      	it	mi
 8004e2a:	b2b6      	uxthmi	r6, r6
 8004e2c:	07df      	lsls	r7, r3, #31
 8004e2e:	bf48      	it	mi
 8004e30:	f043 0320 	orrmi.w	r3, r3, #32
 8004e34:	6029      	str	r1, [r5, #0]
 8004e36:	bf48      	it	mi
 8004e38:	6023      	strmi	r3, [r4, #0]
 8004e3a:	b91e      	cbnz	r6, 8004e44 <_printf_i+0x1a4>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	f023 0320 	bic.w	r3, r3, #32
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	2310      	movs	r3, #16
 8004e46:	e7a7      	b.n	8004d98 <_printf_i+0xf8>
 8004e48:	4824      	ldr	r0, [pc, #144]	; (8004edc <_printf_i+0x23c>)
 8004e4a:	e7e4      	b.n	8004e16 <_printf_i+0x176>
 8004e4c:	4615      	mov	r5, r2
 8004e4e:	e7bd      	b.n	8004dcc <_printf_i+0x12c>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	6826      	ldr	r6, [r4, #0]
 8004e54:	6961      	ldr	r1, [r4, #20]
 8004e56:	1d18      	adds	r0, r3, #4
 8004e58:	6028      	str	r0, [r5, #0]
 8004e5a:	0635      	lsls	r5, r6, #24
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	d501      	bpl.n	8004e64 <_printf_i+0x1c4>
 8004e60:	6019      	str	r1, [r3, #0]
 8004e62:	e002      	b.n	8004e6a <_printf_i+0x1ca>
 8004e64:	0670      	lsls	r0, r6, #25
 8004e66:	d5fb      	bpl.n	8004e60 <_printf_i+0x1c0>
 8004e68:	8019      	strh	r1, [r3, #0]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6123      	str	r3, [r4, #16]
 8004e6e:	4615      	mov	r5, r2
 8004e70:	e7bc      	b.n	8004dec <_printf_i+0x14c>
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	1d1a      	adds	r2, r3, #4
 8004e76:	602a      	str	r2, [r5, #0]
 8004e78:	681d      	ldr	r5, [r3, #0]
 8004e7a:	6862      	ldr	r2, [r4, #4]
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f7fb f9ae 	bl	80001e0 <memchr>
 8004e84:	b108      	cbz	r0, 8004e8a <_printf_i+0x1ea>
 8004e86:	1b40      	subs	r0, r0, r5
 8004e88:	6060      	str	r0, [r4, #4]
 8004e8a:	6863      	ldr	r3, [r4, #4]
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e94:	e7aa      	b.n	8004dec <_printf_i+0x14c>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	462a      	mov	r2, r5
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	47d0      	blx	sl
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d0ad      	beq.n	8004e00 <_printf_i+0x160>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	079b      	lsls	r3, r3, #30
 8004ea8:	d413      	bmi.n	8004ed2 <_printf_i+0x232>
 8004eaa:	68e0      	ldr	r0, [r4, #12]
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	bfb8      	it	lt
 8004eb2:	4618      	movlt	r0, r3
 8004eb4:	e7a6      	b.n	8004e04 <_printf_i+0x164>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4632      	mov	r2, r6
 8004eba:	4649      	mov	r1, r9
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	47d0      	blx	sl
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d09d      	beq.n	8004e00 <_printf_i+0x160>
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	9903      	ldr	r1, [sp, #12]
 8004eca:	1a5b      	subs	r3, r3, r1
 8004ecc:	42ab      	cmp	r3, r5
 8004ece:	dcf2      	bgt.n	8004eb6 <_printf_i+0x216>
 8004ed0:	e7eb      	b.n	8004eaa <_printf_i+0x20a>
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	f104 0619 	add.w	r6, r4, #25
 8004ed8:	e7f5      	b.n	8004ec6 <_printf_i+0x226>
 8004eda:	bf00      	nop
 8004edc:	080051c5 	.word	0x080051c5
 8004ee0:	080051d6 	.word	0x080051d6

08004ee4 <__sflush_r>:
 8004ee4:	898a      	ldrh	r2, [r1, #12]
 8004ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eea:	4605      	mov	r5, r0
 8004eec:	0710      	lsls	r0, r2, #28
 8004eee:	460c      	mov	r4, r1
 8004ef0:	d458      	bmi.n	8004fa4 <__sflush_r+0xc0>
 8004ef2:	684b      	ldr	r3, [r1, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dc05      	bgt.n	8004f04 <__sflush_r+0x20>
 8004ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dc02      	bgt.n	8004f04 <__sflush_r+0x20>
 8004efe:	2000      	movs	r0, #0
 8004f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f06:	2e00      	cmp	r6, #0
 8004f08:	d0f9      	beq.n	8004efe <__sflush_r+0x1a>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f10:	682f      	ldr	r7, [r5, #0]
 8004f12:	6a21      	ldr	r1, [r4, #32]
 8004f14:	602b      	str	r3, [r5, #0]
 8004f16:	d032      	beq.n	8004f7e <__sflush_r+0x9a>
 8004f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	075a      	lsls	r2, r3, #29
 8004f1e:	d505      	bpl.n	8004f2c <__sflush_r+0x48>
 8004f20:	6863      	ldr	r3, [r4, #4]
 8004f22:	1ac0      	subs	r0, r0, r3
 8004f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f26:	b10b      	cbz	r3, 8004f2c <__sflush_r+0x48>
 8004f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f2a:	1ac0      	subs	r0, r0, r3
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f32:	6a21      	ldr	r1, [r4, #32]
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b0      	blx	r6
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	d106      	bne.n	8004f4c <__sflush_r+0x68>
 8004f3e:	6829      	ldr	r1, [r5, #0]
 8004f40:	291d      	cmp	r1, #29
 8004f42:	d82b      	bhi.n	8004f9c <__sflush_r+0xb8>
 8004f44:	4a29      	ldr	r2, [pc, #164]	; (8004fec <__sflush_r+0x108>)
 8004f46:	410a      	asrs	r2, r1
 8004f48:	07d6      	lsls	r6, r2, #31
 8004f4a:	d427      	bmi.n	8004f9c <__sflush_r+0xb8>
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	6062      	str	r2, [r4, #4]
 8004f50:	04d9      	lsls	r1, r3, #19
 8004f52:	6922      	ldr	r2, [r4, #16]
 8004f54:	6022      	str	r2, [r4, #0]
 8004f56:	d504      	bpl.n	8004f62 <__sflush_r+0x7e>
 8004f58:	1c42      	adds	r2, r0, #1
 8004f5a:	d101      	bne.n	8004f60 <__sflush_r+0x7c>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b903      	cbnz	r3, 8004f62 <__sflush_r+0x7e>
 8004f60:	6560      	str	r0, [r4, #84]	; 0x54
 8004f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f64:	602f      	str	r7, [r5, #0]
 8004f66:	2900      	cmp	r1, #0
 8004f68:	d0c9      	beq.n	8004efe <__sflush_r+0x1a>
 8004f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	d002      	beq.n	8004f78 <__sflush_r+0x94>
 8004f72:	4628      	mov	r0, r5
 8004f74:	f7ff fbea 	bl	800474c <_free_r>
 8004f78:	2000      	movs	r0, #0
 8004f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8004f7c:	e7c0      	b.n	8004f00 <__sflush_r+0x1c>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b0      	blx	r6
 8004f84:	1c41      	adds	r1, r0, #1
 8004f86:	d1c8      	bne.n	8004f1a <__sflush_r+0x36>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0c5      	beq.n	8004f1a <__sflush_r+0x36>
 8004f8e:	2b1d      	cmp	r3, #29
 8004f90:	d001      	beq.n	8004f96 <__sflush_r+0xb2>
 8004f92:	2b16      	cmp	r3, #22
 8004f94:	d101      	bne.n	8004f9a <__sflush_r+0xb6>
 8004f96:	602f      	str	r7, [r5, #0]
 8004f98:	e7b1      	b.n	8004efe <__sflush_r+0x1a>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fa0:	81a3      	strh	r3, [r4, #12]
 8004fa2:	e7ad      	b.n	8004f00 <__sflush_r+0x1c>
 8004fa4:	690f      	ldr	r7, [r1, #16]
 8004fa6:	2f00      	cmp	r7, #0
 8004fa8:	d0a9      	beq.n	8004efe <__sflush_r+0x1a>
 8004faa:	0793      	lsls	r3, r2, #30
 8004fac:	680e      	ldr	r6, [r1, #0]
 8004fae:	bf08      	it	eq
 8004fb0:	694b      	ldreq	r3, [r1, #20]
 8004fb2:	600f      	str	r7, [r1, #0]
 8004fb4:	bf18      	it	ne
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	eba6 0807 	sub.w	r8, r6, r7
 8004fbc:	608b      	str	r3, [r1, #8]
 8004fbe:	f1b8 0f00 	cmp.w	r8, #0
 8004fc2:	dd9c      	ble.n	8004efe <__sflush_r+0x1a>
 8004fc4:	6a21      	ldr	r1, [r4, #32]
 8004fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fc8:	4643      	mov	r3, r8
 8004fca:	463a      	mov	r2, r7
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b0      	blx	r6
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	dc06      	bgt.n	8004fe2 <__sflush_r+0xfe>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	e78e      	b.n	8004f00 <__sflush_r+0x1c>
 8004fe2:	4407      	add	r7, r0
 8004fe4:	eba8 0800 	sub.w	r8, r8, r0
 8004fe8:	e7e9      	b.n	8004fbe <__sflush_r+0xda>
 8004fea:	bf00      	nop
 8004fec:	dfbffffe 	.word	0xdfbffffe

08004ff0 <_fflush_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	690b      	ldr	r3, [r1, #16]
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	b913      	cbnz	r3, 8005000 <_fflush_r+0x10>
 8004ffa:	2500      	movs	r5, #0
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	b118      	cbz	r0, 800500a <_fflush_r+0x1a>
 8005002:	6a03      	ldr	r3, [r0, #32]
 8005004:	b90b      	cbnz	r3, 800500a <_fflush_r+0x1a>
 8005006:	f7ff f9a9 	bl	800435c <__sinit>
 800500a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f3      	beq.n	8004ffa <_fflush_r+0xa>
 8005012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005014:	07d0      	lsls	r0, r2, #31
 8005016:	d404      	bmi.n	8005022 <_fflush_r+0x32>
 8005018:	0599      	lsls	r1, r3, #22
 800501a:	d402      	bmi.n	8005022 <_fflush_r+0x32>
 800501c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800501e:	f7ff fb92 	bl	8004746 <__retarget_lock_acquire_recursive>
 8005022:	4628      	mov	r0, r5
 8005024:	4621      	mov	r1, r4
 8005026:	f7ff ff5d 	bl	8004ee4 <__sflush_r>
 800502a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800502c:	07da      	lsls	r2, r3, #31
 800502e:	4605      	mov	r5, r0
 8005030:	d4e4      	bmi.n	8004ffc <_fflush_r+0xc>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	059b      	lsls	r3, r3, #22
 8005036:	d4e1      	bmi.n	8004ffc <_fflush_r+0xc>
 8005038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503a:	f7ff fb85 	bl	8004748 <__retarget_lock_release_recursive>
 800503e:	e7dd      	b.n	8004ffc <_fflush_r+0xc>

08005040 <__swhatbuf_r>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	460c      	mov	r4, r1
 8005044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005048:	2900      	cmp	r1, #0
 800504a:	b096      	sub	sp, #88	; 0x58
 800504c:	4615      	mov	r5, r2
 800504e:	461e      	mov	r6, r3
 8005050:	da0d      	bge.n	800506e <__swhatbuf_r+0x2e>
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	bf0c      	ite	eq
 800505e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005062:	2340      	movne	r3, #64	; 0x40
 8005064:	2000      	movs	r0, #0
 8005066:	6031      	str	r1, [r6, #0]
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	b016      	add	sp, #88	; 0x58
 800506c:	bd70      	pop	{r4, r5, r6, pc}
 800506e:	466a      	mov	r2, sp
 8005070:	f000 f848 	bl	8005104 <_fstat_r>
 8005074:	2800      	cmp	r0, #0
 8005076:	dbec      	blt.n	8005052 <__swhatbuf_r+0x12>
 8005078:	9901      	ldr	r1, [sp, #4]
 800507a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800507e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005082:	4259      	negs	r1, r3
 8005084:	4159      	adcs	r1, r3
 8005086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800508a:	e7eb      	b.n	8005064 <__swhatbuf_r+0x24>

0800508c <__smakebuf_r>:
 800508c:	898b      	ldrh	r3, [r1, #12]
 800508e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005090:	079d      	lsls	r5, r3, #30
 8005092:	4606      	mov	r6, r0
 8005094:	460c      	mov	r4, r1
 8005096:	d507      	bpl.n	80050a8 <__smakebuf_r+0x1c>
 8005098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	2301      	movs	r3, #1
 80050a2:	6163      	str	r3, [r4, #20]
 80050a4:	b002      	add	sp, #8
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	ab01      	add	r3, sp, #4
 80050aa:	466a      	mov	r2, sp
 80050ac:	f7ff ffc8 	bl	8005040 <__swhatbuf_r>
 80050b0:	9900      	ldr	r1, [sp, #0]
 80050b2:	4605      	mov	r5, r0
 80050b4:	4630      	mov	r0, r6
 80050b6:	f7ff fbb5 	bl	8004824 <_malloc_r>
 80050ba:	b948      	cbnz	r0, 80050d0 <__smakebuf_r+0x44>
 80050bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c0:	059a      	lsls	r2, r3, #22
 80050c2:	d4ef      	bmi.n	80050a4 <__smakebuf_r+0x18>
 80050c4:	f023 0303 	bic.w	r3, r3, #3
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	e7e3      	b.n	8005098 <__smakebuf_r+0xc>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	6020      	str	r0, [r4, #0]
 80050d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	9b00      	ldr	r3, [sp, #0]
 80050dc:	6163      	str	r3, [r4, #20]
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	6120      	str	r0, [r4, #16]
 80050e2:	b15b      	cbz	r3, 80050fc <__smakebuf_r+0x70>
 80050e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e8:	4630      	mov	r0, r6
 80050ea:	f000 f81d 	bl	8005128 <_isatty_r>
 80050ee:	b128      	cbz	r0, 80050fc <__smakebuf_r+0x70>
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	431d      	orrs	r5, r3
 8005100:	81a5      	strh	r5, [r4, #12]
 8005102:	e7cf      	b.n	80050a4 <__smakebuf_r+0x18>

08005104 <_fstat_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d07      	ldr	r5, [pc, #28]	; (8005124 <_fstat_r+0x20>)
 8005108:	2300      	movs	r3, #0
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	f7fb ff50 	bl	8000fb6 <_fstat>
 8005116:	1c43      	adds	r3, r0, #1
 8005118:	d102      	bne.n	8005120 <_fstat_r+0x1c>
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	b103      	cbz	r3, 8005120 <_fstat_r+0x1c>
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	bd38      	pop	{r3, r4, r5, pc}
 8005122:	bf00      	nop
 8005124:	200002f4 	.word	0x200002f4

08005128 <_isatty_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4d06      	ldr	r5, [pc, #24]	; (8005144 <_isatty_r+0x1c>)
 800512c:	2300      	movs	r3, #0
 800512e:	4604      	mov	r4, r0
 8005130:	4608      	mov	r0, r1
 8005132:	602b      	str	r3, [r5, #0]
 8005134:	f7fb ff4f 	bl	8000fd6 <_isatty>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_isatty_r+0x1a>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	b103      	cbz	r3, 8005142 <_isatty_r+0x1a>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	200002f4 	.word	0x200002f4

08005148 <_sbrk_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	; (8005164 <_sbrk_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fb ff58 	bl	8001008 <_sbrk>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_sbrk_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_sbrk_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	200002f4 	.word	0x200002f4

08005168 <_init>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr

08005174 <_fini>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr
