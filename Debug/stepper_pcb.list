
stepper_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ddc  08003ddc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ddc  08003ddc  00013ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003de4  08003de4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003e54  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003e54  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008987  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f2  00000000  00000000  00028a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  0002a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bb  00000000  00000000  0002aae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161b5  00000000  00000000  0002b0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009651  00000000  00000000  00041258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086d2c  00000000  00000000  0004a8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002560  00000000  00000000  000d15d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000d3b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d5c 	.word	0x08003d5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003d5c 	.word	0x08003d5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fb94 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f838 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8f6 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f8a0 	bl	80006d0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000590:	f000 f8c8 	bl	8000724 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, &answer, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	4913      	ldr	r1, [pc, #76]	; (80005e4 <main+0x68>)
 8000598:	4813      	ldr	r0, [pc, #76]	; (80005e8 <main+0x6c>)
 800059a:	f001 fcd2 	bl	8001f42 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
  HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <main+0x70>)
 80005a6:	f000 ff3f 	bl	8001428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2110      	movs	r1, #16
 80005ae:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x70>)
 80005b0:	f000 ff3a 	bl	8001428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <main+0x70>)
 80005ba:	f000 ff35 	bl	8001428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2108      	movs	r1, #8
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <main+0x70>)
 80005c4:	f000 ff30 	bl	8001428 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <main+0x74>)
 80005d0:	f000 ff2a 	bl	8001428 <HAL_GPIO_WritePin>
  while (1)
  {
	  printf("hello world\n");
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <main+0x78>)
 80005d6:	f002 fd57 	bl	8003088 <puts>
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 1);
	  // HAL_Delay(100);
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 0);
	  // HAL_Delay(100);
	  HAL_Delay(1000);
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f000 fbd7 	bl	8000d90 <HAL_Delay>
  {
 80005e2:	e7f7      	b.n	80005d4 <main+0x58>
 80005e4:	20000114 	.word	0x20000114
 80005e8:	200000cc 	.word	0x200000cc
 80005ec:	40020400 	.word	0x40020400
 80005f0:	40020000 	.word	0x40020000
 80005f4:	08003d74 	.word	0x08003d74

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fe1e 	bl	8003248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <SystemClock_Config+0xd0>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd4>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800066c:	2310      	movs	r3, #16
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f000 feea 	bl	800145c <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068e:	f000 f927 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f94c 	bl	800194c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ba:	f000 f911 	bl	80008e0 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 fb40 	bl	8001d8c <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8e5 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000084 	.word	0x20000084
 8000720:	40004400 	.word	0x40004400

08000724 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART6_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 8000730:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000734:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART6_UART_Init+0x4c>)
 800075c:	f001 fb16 	bl	8001d8c <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f8bb 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000cc 	.word	0x200000cc
 8000774:	40011400 	.word	0x40011400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <MX_GPIO_Init+0x100>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a38      	ldr	r2, [pc, #224]	; (8000878 <MX_GPIO_Init+0x100>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b36      	ldr	r3, [pc, #216]	; (8000878 <MX_GPIO_Init+0x100>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b32      	ldr	r3, [pc, #200]	; (8000878 <MX_GPIO_Init+0x100>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a31      	ldr	r2, [pc, #196]	; (8000878 <MX_GPIO_Init+0x100>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <MX_GPIO_Init+0x100>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_GPIO_Init+0x100>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <MX_GPIO_Init+0x100>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_GPIO_Init+0x100>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <MX_GPIO_Init+0x100>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a23      	ldr	r2, [pc, #140]	; (8000878 <MX_GPIO_Init+0x100>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0x100>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000804:	481d      	ldr	r0, [pc, #116]	; (800087c <MX_GPIO_Init+0x104>)
 8000806:	f000 fe0f 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000810:	481b      	ldr	r0, [pc, #108]	; (8000880 <MX_GPIO_Init+0x108>)
 8000812:	f000 fe09 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_GPIO_Init+0x10c>)
 800082e:	f000 fc77 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 8000832:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_GPIO_Init+0x104>)
 800084c:	f000 fc68 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000850:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_GPIO_Init+0x108>)
 800086a:	f000 fc59 	bl	8001120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020400 	.word	0x40020400
 8000884:	40020800 	.word	0x40020800

08000888 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000890:	1d39      	adds	r1, r7, #4
 8000892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000896:	2201      	movs	r2, #1
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <__io_putchar+0x20>)
 800089a:	f001 fac7 	bl	8001e2c <HAL_UART_Transmit>
  return ch;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000084 	.word	0x20000084

080008ac <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* hadc) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	 printf("received: %d\n", (int)answer);
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <HAL_UART_RxCpltCallback+0x28>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <HAL_UART_RxCpltCallback+0x2c>)
 80008bc:	f002 fb7e 	bl	8002fbc <iprintf>
	 HAL_UART_Receive_IT(&huart6, &answer, 1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	4904      	ldr	r1, [pc, #16]	; (80008d4 <HAL_UART_RxCpltCallback+0x28>)
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_UART_RxCpltCallback+0x30>)
 80008c6:	f001 fb3c 	bl	8001f42 <HAL_UART_Receive_IT>

 }
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000114 	.word	0x20000114
 80008d8:	08003d80 	.word	0x08003d80
 80008dc:	200000cc 	.word	0x200000cc

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800092a:	2007      	movs	r0, #7
 800092c:	f000 fb24 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a45      	ldr	r2, [pc, #276]	; (8000a70 <HAL_UART_MspInit+0x134>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12c      	bne.n	80009b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <HAL_UART_MspInit+0x138>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a43      	ldr	r2, [pc, #268]	; (8000a74 <HAL_UART_MspInit+0x138>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b41      	ldr	r3, [pc, #260]	; (8000a74 <HAL_UART_MspInit+0x138>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <HAL_UART_MspInit+0x138>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a3c      	ldr	r2, [pc, #240]	; (8000a74 <HAL_UART_MspInit+0x138>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b3a      	ldr	r3, [pc, #232]	; (8000a74 <HAL_UART_MspInit+0x138>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	230c      	movs	r3, #12
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4831      	ldr	r0, [pc, #196]	; (8000a78 <HAL_UART_MspInit+0x13c>)
 80009b2:	f000 fbb5 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80009b6:	e057      	b.n	8000a68 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <HAL_UART_MspInit+0x140>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d152      	bne.n	8000a68 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <HAL_UART_MspInit+0x138>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <HAL_UART_MspInit+0x138>)
 80009cc:	f043 0320 	orr.w	r3, r3, #32
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <HAL_UART_MspInit+0x138>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f003 0320 	and.w	r3, r3, #32
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_UART_MspInit+0x138>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <HAL_UART_MspInit+0x138>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HAL_UART_MspInit+0x138>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <HAL_UART_MspInit+0x138>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <HAL_UART_MspInit+0x138>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_UART_MspInit+0x138>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a16:	2340      	movs	r3, #64	; 0x40
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a26:	2308      	movs	r3, #8
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <HAL_UART_MspInit+0x144>)
 8000a32:	f000 fb75 	bl	8001120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <HAL_UART_MspInit+0x13c>)
 8000a54:	f000 fb64 	bl	8001120 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2047      	movs	r0, #71	; 0x47
 8000a5e:	f000 fa96 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a62:	2047      	movs	r0, #71	; 0x47
 8000a64:	f000 faaf 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
}
 8000a68:	bf00      	nop
 8000a6a:	3730      	adds	r7, #48	; 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40011400 	.word	0x40011400
 8000a80:	40020800 	.word	0x40020800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad0:	f000 f93e 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <USART6_IRQHandler+0x10>)
 8000ade:	f001 fa55 	bl	8001f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000cc 	.word	0x200000cc

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e009      	b.n	8000b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fea1 	bl	8000888 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf1      	blt.n	8000b38 <_write+0x12>
  }
  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_close>:

int _close(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b86:	605a      	str	r2, [r3, #4]
  return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_isatty>:

int _isatty(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f002 fb74 	bl	80032e4 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20018000 	.word	0x20018000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000118 	.word	0x20000118
 8000c30:	20000270 	.word	0x20000270

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f002 fb33 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc77 	bl	800057c <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c9c:	08003dec 	.word	0x08003dec
  ldr r2, =_sbss
 8000ca0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca4:	2000026c 	.word	0x2000026c

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f94f 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe04 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f967 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f92f 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	2000011c 	.word	0x2000011c

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	2000011c 	.word	0x2000011c

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff ffee 	bl	8000d78 <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_Delay+0x44>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffde 	bl	8000d78 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff3e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff31 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff feb6 	bl	8000d78 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d008      	beq.n	800102c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e052      	b.n	80010d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0216 	bic.w	r2, r2, #22
 800103a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800104a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	d103      	bne.n	800105c <HAL_DMA_Abort+0x62>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0208 	bic.w	r2, r2, #8
 800106a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800107c:	e013      	b.n	80010a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800107e:	f7ff fe7b 	bl	8000d78 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b05      	cmp	r3, #5
 800108a:	d90c      	bls.n	80010a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2220      	movs	r2, #32
 8001090:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2203      	movs	r2, #3
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e015      	b.n	80010d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e4      	bne.n	800107e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b8:	223f      	movs	r2, #63	; 0x3f
 80010ba:	409a      	lsls	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d004      	beq.n	80010f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e00c      	b.n	8001112 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2205      	movs	r2, #5
 80010fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e159      	b.n	80013f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8148 	bne.w	80013ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d005      	beq.n	8001172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	2b02      	cmp	r3, #2
 8001170:	d130      	bne.n	80011d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a2 	beq.w	80013ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a56      	ldr	r2, [pc, #344]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b54      	ldr	r3, [pc, #336]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_GPIO_Init+0x2ec>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a49      	ldr	r2, [pc, #292]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x202>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x1fe>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a47      	ldr	r2, [pc, #284]	; (8001418 <HAL_GPIO_Init+0x2f8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x1fa>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a46      	ldr	r2, [pc, #280]	; (800141c <HAL_GPIO_Init+0x2fc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x1f6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_GPIO_Init+0x300>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x1f2>
 800130e:	2304      	movs	r3, #4
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001312:	2307      	movs	r3, #7
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x2ec>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_GPIO_Init+0x304>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f aea2 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e267      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d075      	beq.n	8001566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147a:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b04      	cmp	r3, #4
 8001484:	d00c      	beq.n	80014a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001486:	4b85      	ldr	r3, [pc, #532]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	2b08      	cmp	r3, #8
 8001490:	d112      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001492:	4b82      	ldr	r3, [pc, #520]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800149e:	d10b      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d05b      	beq.n	8001564 <HAL_RCC_OscConfig+0x108>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d157      	bne.n	8001564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e242      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c0:	d106      	bne.n	80014d0 <HAL_RCC_OscConfig+0x74>
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a75      	ldr	r2, [pc, #468]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e01d      	b.n	800150c <HAL_RCC_OscConfig+0xb0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x98>
 80014da:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6f      	ldr	r2, [pc, #444]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b6d      	ldr	r3, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6c      	ldr	r2, [pc, #432]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xb0>
 80014f4:	4b69      	ldr	r3, [pc, #420]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a68      	ldr	r2, [pc, #416]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a65      	ldr	r2, [pc, #404]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc30 	bl	8000d78 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc2c 	bl	8000d78 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e207      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xc0>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc1c 	bl	8000d78 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fc18 	bl	8000d78 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1f3      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0xe8>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d063      	beq.n	800163a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	2b08      	cmp	r3, #8
 8001588:	d11c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_RCC_OscConfig+0x240>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x152>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e1c7      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4937      	ldr	r1, [pc, #220]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	e03a      	b.n	800163a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCC_OscConfig+0x244>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fbd1 	bl	8000d78 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fbcd 	bl	8000d78 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1a8      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4925      	ldr	r1, [pc, #148]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e015      	b.n	800163a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x244>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fbb0 	bl	8000d78 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fbac 	bl	8000d78 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e187      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d036      	beq.n	80016b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d016      	beq.n	800167c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_RCC_OscConfig+0x248>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fb90 	bl	8000d78 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff fb8c 	bl	8000d78 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e167      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x200>
 800167a:	e01b      	b.n	80016b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_OscConfig+0x248>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fb79 	bl	8000d78 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	e00e      	b.n	80016a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff fb75 	bl	8000d78 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d907      	bls.n	80016a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e150      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
 800169c:	40023800 	.word	0x40023800
 80016a0:	42470000 	.word	0x42470000
 80016a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ea      	bne.n	800168a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8097 	beq.w	80017f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c6:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10f      	bne.n	80016f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b7d      	ldr	r3, [pc, #500]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a7c      	ldr	r2, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b77      	ldr	r3, [pc, #476]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b74      	ldr	r3, [pc, #464]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a73      	ldr	r2, [pc, #460]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fb35 	bl	8000d78 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fb31 	bl	8000d78 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e10c      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x2ea>
 8001738:	4b64      	ldr	r3, [pc, #400]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a63      	ldr	r2, [pc, #396]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	e01c      	b.n	8001780 <HAL_RCC_OscConfig+0x324>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b05      	cmp	r3, #5
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x30c>
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a5e      	ldr	r2, [pc, #376]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0x324>
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	4a54      	ldr	r2, [pc, #336]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d015      	beq.n	80017b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff faf6 	bl	8000d78 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff faf2 	bl	8000d78 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0cb      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0ee      	beq.n	8001790 <HAL_RCC_OscConfig+0x334>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fae0 	bl	8000d78 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff fadc 	bl	8000d78 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0b5      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ee      	bne.n	80017bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a38      	ldr	r2, [pc, #224]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a1 	beq.w	800193c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d05c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d141      	bne.n	8001892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fab0 	bl	8000d78 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff faac 	bl	8000d78 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e087      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	3b01      	subs	r3, #1
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	491b      	ldr	r1, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fa85 	bl	8000d78 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff fa81 	bl	8000d78 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e05c      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x416>
 8001890:	e054      	b.n	800193c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fa6e 	bl	8000d78 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fa6a 	bl	8000d78 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e045      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x444>
 80018be:	e03d      	b.n	800193c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e038      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40007000 	.word	0x40007000
 80018d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x4ec>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d028      	beq.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d121      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d11a      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800190e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001910:	4293      	cmp	r3, r2
 8001912:	d111      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	3b01      	subs	r3, #1
 8001922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cc      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d90c      	bls.n	8001988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d044      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e067      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4934      	ldr	r1, [pc, #208]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f99c 	bl	8000d78 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff f998 	bl	8000d78 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e04f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d20c      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8fc 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08003d90 	.word	0x08003d90
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b1c:	b094      	sub	sp, #80	; 0x50
 8001b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
 8001b24:	2300      	movs	r3, #0
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b28:	2300      	movs	r3, #0
 8001b2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b30:	4b79      	ldr	r3, [pc, #484]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d00d      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x40>
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	f200 80e1 	bhi.w	8001d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x34>
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4a:	e0db      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b50:	e0db      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b52:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b56:	e0d8      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b58:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b62:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d063      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6e:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	099b      	lsrs	r3, r3, #6
 8001b74:	2200      	movs	r2, #0
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
 8001b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	462b      	mov	r3, r5
 8001b8e:	f04f 0000 	mov.w	r0, #0
 8001b92:	f04f 0100 	mov.w	r1, #0
 8001b96:	0159      	lsls	r1, r3, #5
 8001b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9c:	0150      	lsls	r0, r2, #5
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	1a51      	subs	r1, r2, r1
 8001ba6:	6139      	str	r1, [r7, #16]
 8001ba8:	4629      	mov	r1, r5
 8001baa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bbc:	4659      	mov	r1, fp
 8001bbe:	018b      	lsls	r3, r1, #6
 8001bc0:	4651      	mov	r1, sl
 8001bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bc6:	4651      	mov	r1, sl
 8001bc8:	018a      	lsls	r2, r1, #6
 8001bca:	4651      	mov	r1, sl
 8001bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bea:	4690      	mov	r8, r2
 8001bec:	4699      	mov	r9, r3
 8001bee:	4623      	mov	r3, r4
 8001bf0:	eb18 0303 	adds.w	r3, r8, r3
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	eb49 0303 	adc.w	r3, r9, r3
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	024b      	lsls	r3, r1, #9
 8001c0e:	4621      	mov	r1, r4
 8001c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c14:	4621      	mov	r1, r4
 8001c16:	024a      	lsls	r2, r1, #9
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c28:	f7fe fb2a 	bl	8000280 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4613      	mov	r3, r2
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c34:	e058      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	099b      	lsrs	r3, r3, #6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4611      	mov	r1, r2
 8001c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c50:	4642      	mov	r2, r8
 8001c52:	464b      	mov	r3, r9
 8001c54:	f04f 0000 	mov.w	r0, #0
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	0159      	lsls	r1, r3, #5
 8001c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c62:	0150      	lsls	r0, r2, #5
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4641      	mov	r1, r8
 8001c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c6e:	4649      	mov	r1, r9
 8001c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c88:	ebb2 040a 	subs.w	r4, r2, sl
 8001c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	00eb      	lsls	r3, r5, #3
 8001c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c9e:	00e2      	lsls	r2, r4, #3
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	461d      	mov	r5, r3
 8001ca4:	4643      	mov	r3, r8
 8001ca6:	18e3      	adds	r3, r4, r3
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	464b      	mov	r3, r9
 8001cac:	eb45 0303 	adc.w	r3, r5, r3
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	028b      	lsls	r3, r1, #10
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc8:	4621      	mov	r1, r4
 8001cca:	028a      	lsls	r2, r1, #10
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	61fa      	str	r2, [r7, #28]
 8001cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cdc:	f7fe fad0 	bl	8000280 <__aeabi_uldivmod>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d02:	e002      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3750      	adds	r7, #80	; 0x50
 8001d10:	46bd      	mov	sp, r7
 8001d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08003da0 	.word	0x08003da0

08001d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d68:	f7ff ffdc 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0b5b      	lsrs	r3, r3, #13
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4903      	ldr	r1, [pc, #12]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	08003da0 	.word	0x08003da0

08001d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e042      	b.n	8001e24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fdc2 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2224      	movs	r2, #36	; 0x24
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fdbd 	bl	8002950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d175      	bne.n	8001f38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_UART_Transmit+0x2c>
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e06e      	b.n	8001f3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2221      	movs	r2, #33	; 0x21
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e6a:	f7fe ff85 	bl	8000d78 <HAL_GetTick>
 8001e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	88fa      	ldrh	r2, [r7, #6]
 8001e7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e84:	d108      	bne.n	8001e98 <HAL_UART_Transmit+0x6c>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d104      	bne.n	8001e98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	e003      	b.n	8001ea0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ea0:	e02e      	b.n	8001f00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fb1f 	bl	80024f0 <UART_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e03a      	b.n	8001f3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	3302      	adds	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	e007      	b.n	8001ef2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1cb      	bne.n	8001ea2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2140      	movs	r1, #64	; 0x40
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 faeb 	bl	80024f0 <UART_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e006      	b.n	8001f3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d112      	bne.n	8001f82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_UART_Receive_IT+0x26>
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e00b      	b.n	8001f84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	461a      	mov	r2, r3
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fb12 	bl	80025a2 <UART_Start_Receive_IT>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	e000      	b.n	8001f84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0ba      	sub	sp, #232	; 0xe8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_UART_IRQHandler+0x66>
 8001fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fbf2 	bl	80027d4 <UART_Receive_IT>
      return;
 8001ff0:	e25b      	b.n	80024aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80de 	beq.w	80021b8 <HAL_UART_IRQHandler+0x22c>
 8001ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800200c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80d1 	beq.w	80021b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_UART_IRQHandler+0xae>
 8002022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800203a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_UART_IRQHandler+0xd2>
 8002046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f043 0202 	orr.w	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800205e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_UART_IRQHandler+0xf6>
 800206a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f043 0204 	orr.w	r2, r3, #4
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d011      	beq.n	80020b2 <HAL_UART_IRQHandler+0x126>
 800208e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800209a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f043 0208 	orr.w	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 81f2 	beq.w	80024a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_UART_IRQHandler+0x14e>
 80020c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fb7d 	bl	80027d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <HAL_UART_IRQHandler+0x17a>
 80020fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d04f      	beq.n	80021a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fa85 	bl	8002616 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d141      	bne.n	800219e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3314      	adds	r3, #20
 8002120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002128:	e853 3f00 	ldrex	r3, [r3]
 800212c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3314      	adds	r3, #20
 8002142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002146:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800214a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002156:	e841 2300 	strex	r3, r2, [r1]
 800215a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800215e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1d9      	bne.n	800211a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d013      	beq.n	8002196 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	4a7e      	ldr	r2, [pc, #504]	; (800236c <HAL_UART_IRQHandler+0x3e0>)
 8002174:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ffad 	bl	80010da <HAL_DMA_Abort_IT>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002190:	4610      	mov	r0, r2
 8002192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002194:	e00e      	b.n	80021b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f994 	bl	80024c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800219c:	e00a      	b.n	80021b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f990 	bl	80024c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a4:	e006      	b.n	80021b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f98c 	bl	80024c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80021b2:	e175      	b.n	80024a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b4:	bf00      	nop
    return;
 80021b6:	e173      	b.n	80024a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	2b01      	cmp	r3, #1
 80021be:	f040 814f 	bne.w	8002460 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8148 	beq.w	8002460 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8141 	beq.w	8002460 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	f040 80b6 	bne.w	8002370 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8145 	beq.w	80024a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800221e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002222:	429a      	cmp	r2, r3
 8002224:	f080 813e 	bcs.w	80024a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800222e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223a:	f000 8088 	beq.w	800234e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	330c      	adds	r3, #12
 8002244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800225c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	330c      	adds	r3, #12
 8002266:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800226a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800226e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800227a:	e841 2300 	strex	r3, r2, [r1]
 800227e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1d9      	bne.n	800223e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3314      	adds	r3, #20
 8002290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002294:	e853 3f00 	ldrex	r3, [r3]
 8002298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800229a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3314      	adds	r3, #20
 80022aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80022b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80022b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80022ba:	e841 2300 	strex	r3, r2, [r1]
 80022be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80022c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1e1      	bne.n	800228a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3314      	adds	r3, #20
 80022cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022d0:	e853 3f00 	ldrex	r3, [r3]
 80022d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80022d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3314      	adds	r3, #20
 80022e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80022ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80022f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022f2:	e841 2300 	strex	r3, r2, [r1]
 80022f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80022f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e3      	bne.n	80022c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002316:	e853 3f00 	ldrex	r3, [r3]
 800231a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800231c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800231e:	f023 0310 	bic.w	r3, r3, #16
 8002322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	330c      	adds	r3, #12
 800232c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002330:	65ba      	str	r2, [r7, #88]	; 0x58
 8002332:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002338:	e841 2300 	strex	r3, r2, [r1]
 800233c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800233e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e3      	bne.n	800230c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fe56 	bl	8000ffa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800235c:	b29b      	uxth	r3, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b29b      	uxth	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f8b7 	bl	80024d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800236a:	e09b      	b.n	80024a4 <HAL_UART_IRQHandler+0x518>
 800236c:	080026dd 	.word	0x080026dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002378:	b29b      	uxth	r3, r3
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 808e 	beq.w	80024a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800238c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8089 	beq.w	80024a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	330c      	adds	r3, #12
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	e853 3f00 	ldrex	r3, [r3]
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	330c      	adds	r3, #12
 80023b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80023ba:	647a      	str	r2, [r7, #68]	; 0x44
 80023bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80023c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80023c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e3      	bne.n	8002396 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3314      	adds	r3, #20
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	e853 3f00 	ldrex	r3, [r3]
 80023dc:	623b      	str	r3, [r7, #32]
   return(result);
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3314      	adds	r3, #20
 80023ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80023f2:	633a      	str	r2, [r7, #48]	; 0x30
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023fa:	e841 2300 	strex	r3, r2, [r1]
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e3      	bne.n	80023ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	e853 3f00 	ldrex	r3, [r3]
 8002422:	60fb      	str	r3, [r7, #12]
   return(result);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0310 	bic.w	r3, r3, #16
 800242a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002438:	61fa      	str	r2, [r7, #28]
 800243a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243c:	69b9      	ldr	r1, [r7, #24]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	e841 2300 	strex	r3, r2, [r1]
 8002444:	617b      	str	r3, [r7, #20]
   return(result);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e3      	bne.n	8002414 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002452:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f83d 	bl	80024d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800245e:	e023      	b.n	80024a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <HAL_UART_IRQHandler+0x4f4>
 800246c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f943 	bl	8002704 <UART_Transmit_IT>
    return;
 800247e:	e014      	b.n	80024aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <HAL_UART_IRQHandler+0x51e>
 800248c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f983 	bl	80027a4 <UART_EndTransmit_IT>
    return;
 800249e:	e004      	b.n	80024aa <HAL_UART_IRQHandler+0x51e>
    return;
 80024a0:	bf00      	nop
 80024a2:	e002      	b.n	80024aa <HAL_UART_IRQHandler+0x51e>
      return;
 80024a4:	bf00      	nop
 80024a6:	e000      	b.n	80024aa <HAL_UART_IRQHandler+0x51e>
      return;
 80024a8:	bf00      	nop
  }
}
 80024aa:	37e8      	adds	r7, #232	; 0xe8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002500:	e03b      	b.n	800257a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d037      	beq.n	800257a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7fe fc35 	bl	8000d78 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <UART_WaitOnFlagUntilTimeout+0x30>
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e03a      	b.n	800259a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	d020      	beq.n	800257a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d01d      	beq.n	800257a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b08      	cmp	r3, #8
 800254a:	d116      	bne.n	800257a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f857 	bl	8002616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2208      	movs	r2, #8
 800256c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4013      	ands	r3, r2
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	429a      	cmp	r2, r3
 8002596:	d0b4      	beq.n	8002502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	4613      	mov	r3, r2
 80025ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2222      	movs	r2, #34	; 0x22
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002616:	b480      	push	{r7}
 8002618:	b095      	sub	sp, #84	; 0x54
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002634:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800263e:	643a      	str	r2, [r7, #64]	; 0x40
 8002640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002646:	e841 2300 	strex	r3, r2, [r1]
 800264a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e5      	bne.n	800261e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	61fb      	str	r3, [r7, #28]
   return(result);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3314      	adds	r3, #20
 8002670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e5      	bne.n	8002652 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	2b01      	cmp	r3, #1
 800268c:	d119      	bne.n	80026c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	e853 3f00 	ldrex	r3, [r3]
 800269c:	60bb      	str	r3, [r7, #8]
   return(result);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f023 0310 	bic.w	r3, r3, #16
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	330c      	adds	r3, #12
 80026ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ae:	61ba      	str	r2, [r7, #24]
 80026b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	6979      	ldr	r1, [r7, #20]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	613b      	str	r3, [r7, #16]
   return(result);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e5      	bne.n	800268e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026d0:	bf00      	nop
 80026d2:	3754      	adds	r7, #84	; 0x54
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff fee4 	bl	80024c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b21      	cmp	r3, #33	; 0x21
 8002716:	d13e      	bne.n	8002796 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d114      	bne.n	800274c <UART_Transmit_IT+0x48>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d110      	bne.n	800274c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800273e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	1c9a      	adds	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	621a      	str	r2, [r3, #32]
 800274a:	e008      	b.n	800275e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	1c59      	adds	r1, r3, #1
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6211      	str	r1, [r2, #32]
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29b      	uxth	r3, r3
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4619      	mov	r1, r3
 800276c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002780:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002790:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fe73 	bl	80024b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	; 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b22      	cmp	r3, #34	; 0x22
 80027e6:	f040 80ae 	bne.w	8002946 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	d117      	bne.n	8002824 <UART_Receive_IT+0x50>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d113      	bne.n	8002824 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002812:	b29a      	uxth	r2, r3
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	1c9a      	adds	r2, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
 8002822:	e026      	b.n	8002872 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	d007      	beq.n	8002848 <UART_Receive_IT+0x74>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <UART_Receive_IT+0x82>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e008      	b.n	8002868 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002862:	b2da      	uxtb	r2, r3
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29b      	uxth	r3, r3
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4619      	mov	r1, r3
 8002880:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002882:	2b00      	cmp	r3, #0
 8002884:	d15d      	bne.n	8002942 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0220 	bic.w	r2, r2, #32
 8002894:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d135      	bne.n	8002938 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	613b      	str	r3, [r7, #16]
   return(result);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	623a      	str	r2, [r7, #32]
 80028f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	69f9      	ldr	r1, [r7, #28]
 80028f8:	6a3a      	ldr	r2, [r7, #32]
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b10      	cmp	r3, #16
 8002912:	d10a      	bne.n	800292a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fdd1 	bl	80024d8 <HAL_UARTEx_RxEventCallback>
 8002936:	e002      	b.n	800293e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7fd ffb7 	bl	80008ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e002      	b.n	8002948 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	3730      	adds	r7, #48	; 0x30
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002954:	b0c0      	sub	sp, #256	; 0x100
 8002956:	af00      	add	r7, sp, #0
 8002958:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	68d9      	ldr	r1, [r3, #12]
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	ea40 0301 	orr.w	r3, r0, r1
 8002978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800297a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	431a      	orrs	r2, r3
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	431a      	orrs	r2, r3
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029a8:	f021 010c 	bic.w	r1, r1, #12
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029b6:	430b      	orrs	r3, r1
 80029b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ca:	6999      	ldr	r1, [r3, #24]
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	ea40 0301 	orr.w	r3, r0, r1
 80029d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b8f      	ldr	r3, [pc, #572]	; (8002c1c <UART_SetConfig+0x2cc>)
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d005      	beq.n	80029f0 <UART_SetConfig+0xa0>
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b8d      	ldr	r3, [pc, #564]	; (8002c20 <UART_SetConfig+0x2d0>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d104      	bne.n	80029fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029f0:	f7ff f9b8 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 80029f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029f8:	e003      	b.n	8002a02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029fa:	f7ff f99f 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 80029fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	f040 810c 	bne.w	8002c28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a22:	4622      	mov	r2, r4
 8002a24:	462b      	mov	r3, r5
 8002a26:	1891      	adds	r1, r2, r2
 8002a28:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a32:	4621      	mov	r1, r4
 8002a34:	eb12 0801 	adds.w	r8, r2, r1
 8002a38:	4629      	mov	r1, r5
 8002a3a:	eb43 0901 	adc.w	r9, r3, r1
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a52:	4690      	mov	r8, r2
 8002a54:	4699      	mov	r9, r3
 8002a56:	4623      	mov	r3, r4
 8002a58:	eb18 0303 	adds.w	r3, r8, r3
 8002a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a60:	462b      	mov	r3, r5
 8002a62:	eb49 0303 	adc.w	r3, r9, r3
 8002a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a7e:	460b      	mov	r3, r1
 8002a80:	18db      	adds	r3, r3, r3
 8002a82:	653b      	str	r3, [r7, #80]	; 0x50
 8002a84:	4613      	mov	r3, r2
 8002a86:	eb42 0303 	adc.w	r3, r2, r3
 8002a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a94:	f7fd fbf4 	bl	8000280 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	011c      	lsls	r4, r3, #4
 8002aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ab0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ab4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ab8:	4642      	mov	r2, r8
 8002aba:	464b      	mov	r3, r9
 8002abc:	1891      	adds	r1, r2, r2
 8002abe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ac0:	415b      	adcs	r3, r3
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ac8:	4641      	mov	r1, r8
 8002aca:	eb12 0a01 	adds.w	sl, r2, r1
 8002ace:	4649      	mov	r1, r9
 8002ad0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ae0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae8:	4692      	mov	sl, r2
 8002aea:	469b      	mov	fp, r3
 8002aec:	4643      	mov	r3, r8
 8002aee:	eb1a 0303 	adds.w	r3, sl, r3
 8002af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002af6:	464b      	mov	r3, r9
 8002af8:	eb4b 0303 	adc.w	r3, fp, r3
 8002afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b14:	460b      	mov	r3, r1
 8002b16:	18db      	adds	r3, r3, r3
 8002b18:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	eb42 0303 	adc.w	r3, r2, r3
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44
 8002b22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b2a:	f7fd fba9 	bl	8000280 <__aeabi_uldivmod>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002b36:	fba3 2301 	umull	r2, r3, r3, r1
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2264      	movs	r2, #100	; 0x64
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	1acb      	subs	r3, r1, r3
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b4a:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b58:	441c      	add	r4, r3
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	1891      	adds	r1, r2, r2
 8002b72:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b74:	415b      	adcs	r3, r3
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	1851      	adds	r1, r2, r1
 8002b80:	6339      	str	r1, [r7, #48]	; 0x30
 8002b82:	4649      	mov	r1, r9
 8002b84:	414b      	adcs	r3, r1
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b94:	4659      	mov	r1, fp
 8002b96:	00cb      	lsls	r3, r1, #3
 8002b98:	4651      	mov	r1, sl
 8002b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	00ca      	lsls	r2, r1, #3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4642      	mov	r2, r8
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bb0:	464b      	mov	r3, r9
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	eb42 0303 	adc.w	r3, r2, r3
 8002bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	18db      	adds	r3, r3, r3
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	eb42 0303 	adc.w	r3, r2, r3
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002be2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002be6:	f7fd fb4b 	bl	8000280 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2164      	movs	r1, #100	; 0x64
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	3332      	adds	r3, #50	; 0x32
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 0207 	and.w	r2, r3, #7
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4422      	add	r2, r4
 8002c16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c18:	e106      	b.n	8002e28 <UART_SetConfig+0x4d8>
 8002c1a:	bf00      	nop
 8002c1c:	40011000 	.word	0x40011000
 8002c20:	40011400 	.word	0x40011400
 8002c24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c3a:	4642      	mov	r2, r8
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	1891      	adds	r1, r2, r2
 8002c40:	6239      	str	r1, [r7, #32]
 8002c42:	415b      	adcs	r3, r3
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c4a:	4641      	mov	r1, r8
 8002c4c:	1854      	adds	r4, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb43 0501 	adc.w	r5, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	00eb      	lsls	r3, r5, #3
 8002c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	4614      	mov	r4, r2
 8002c66:	461d      	mov	r5, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	18e3      	adds	r3, r4, r3
 8002c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c70:	464b      	mov	r3, r9
 8002c72:	eb45 0303 	adc.w	r3, r5, r3
 8002c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c96:	4629      	mov	r1, r5
 8002c98:	008b      	lsls	r3, r1, #2
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	008a      	lsls	r2, r1, #2
 8002ca4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ca8:	f7fd faea 	bl	8000280 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4b60      	ldr	r3, [pc, #384]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	011c      	lsls	r4, r3, #4
 8002cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	1891      	adds	r1, r2, r2
 8002cd2:	61b9      	str	r1, [r7, #24]
 8002cd4:	415b      	adcs	r3, r3
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cdc:	4641      	mov	r1, r8
 8002cde:	1851      	adds	r1, r2, r1
 8002ce0:	6139      	str	r1, [r7, #16]
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	414b      	adcs	r3, r1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	00cb      	lsls	r3, r1, #3
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfe:	4651      	mov	r1, sl
 8002d00:	00ca      	lsls	r2, r1, #3
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d10:	464b      	mov	r3, r9
 8002d12:	460a      	mov	r2, r1
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d34:	4649      	mov	r1, r9
 8002d36:	008b      	lsls	r3, r1, #2
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d3e:	4641      	mov	r1, r8
 8002d40:	008a      	lsls	r2, r1, #2
 8002d42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d46:	f7fd fa9b 	bl	8000280 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002d52:	fba3 2301 	umull	r2, r3, r3, r1
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2264      	movs	r2, #100	; 0x64
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	1acb      	subs	r3, r1, r3
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	3332      	adds	r3, #50	; 0x32
 8002d64:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d70:	441c      	add	r4, r3
 8002d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d76:	2200      	movs	r2, #0
 8002d78:	673b      	str	r3, [r7, #112]	; 0x70
 8002d7a:	677a      	str	r2, [r7, #116]	; 0x74
 8002d7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	1891      	adds	r1, r2, r2
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	415b      	adcs	r3, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d90:	4641      	mov	r1, r8
 8002d92:	1851      	adds	r1, r2, r1
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	4649      	mov	r1, r9
 8002d98:	414b      	adcs	r3, r1
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002da8:	4659      	mov	r1, fp
 8002daa:	00cb      	lsls	r3, r1, #3
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db2:	4651      	mov	r1, sl
 8002db4:	00ca      	lsls	r2, r1, #3
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	eb42 0303 	adc.w	r3, r2, r3
 8002dca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd6:	667a      	str	r2, [r7, #100]	; 0x64
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002de4:	4649      	mov	r1, r9
 8002de6:	008b      	lsls	r3, r1, #2
 8002de8:	4641      	mov	r1, r8
 8002dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dee:	4641      	mov	r1, r8
 8002df0:	008a      	lsls	r2, r1, #2
 8002df2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002df6:	f7fd fa43 	bl	8000280 <__aeabi_uldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002e00:	fba3 1302 	umull	r1, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	2164      	movs	r1, #100	; 0x64
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	3332      	adds	r3, #50	; 0x32
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	f003 020f 	and.w	r2, r3, #15
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4422      	add	r2, r4
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e34:	51eb851f 	.word	0x51eb851f

08002e38 <std>:
 8002e38:	2300      	movs	r3, #0
 8002e3a:	b510      	push	{r4, lr}
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e46:	6083      	str	r3, [r0, #8]
 8002e48:	8181      	strh	r1, [r0, #12]
 8002e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8002e4c:	81c2      	strh	r2, [r0, #14]
 8002e4e:	6183      	str	r3, [r0, #24]
 8002e50:	4619      	mov	r1, r3
 8002e52:	2208      	movs	r2, #8
 8002e54:	305c      	adds	r0, #92	; 0x5c
 8002e56:	f000 f9f7 	bl	8003248 <memset>
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <std+0x58>)
 8002e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <std+0x5c>)
 8002e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <std+0x60>)
 8002e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <std+0x64>)
 8002e68:	6323      	str	r3, [r4, #48]	; 0x30
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <std+0x68>)
 8002e6c:	6224      	str	r4, [r4, #32]
 8002e6e:	429c      	cmp	r4, r3
 8002e70:	d006      	beq.n	8002e80 <std+0x48>
 8002e72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002e76:	4294      	cmp	r4, r2
 8002e78:	d002      	beq.n	8002e80 <std+0x48>
 8002e7a:	33d0      	adds	r3, #208	; 0xd0
 8002e7c:	429c      	cmp	r4, r3
 8002e7e:	d105      	bne.n	8002e8c <std+0x54>
 8002e80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e88:	f000 ba56 	b.w	8003338 <__retarget_lock_init_recursive>
 8002e8c:	bd10      	pop	{r4, pc}
 8002e8e:	bf00      	nop
 8002e90:	08003099 	.word	0x08003099
 8002e94:	080030bb 	.word	0x080030bb
 8002e98:	080030f3 	.word	0x080030f3
 8002e9c:	08003117 	.word	0x08003117
 8002ea0:	20000120 	.word	0x20000120

08002ea4 <stdio_exit_handler>:
 8002ea4:	4a02      	ldr	r2, [pc, #8]	; (8002eb0 <stdio_exit_handler+0xc>)
 8002ea6:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <stdio_exit_handler+0x10>)
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <stdio_exit_handler+0x14>)
 8002eaa:	f000 b869 	b.w	8002f80 <_fwalk_sglue>
 8002eae:	bf00      	nop
 8002eb0:	2000000c 	.word	0x2000000c
 8002eb4:	08003be5 	.word	0x08003be5
 8002eb8:	20000018 	.word	0x20000018

08002ebc <cleanup_stdio>:
 8002ebc:	6841      	ldr	r1, [r0, #4]
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <cleanup_stdio+0x34>)
 8002ec0:	4299      	cmp	r1, r3
 8002ec2:	b510      	push	{r4, lr}
 8002ec4:	4604      	mov	r4, r0
 8002ec6:	d001      	beq.n	8002ecc <cleanup_stdio+0x10>
 8002ec8:	f000 fe8c 	bl	8003be4 <_fflush_r>
 8002ecc:	68a1      	ldr	r1, [r4, #8]
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <cleanup_stdio+0x38>)
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d002      	beq.n	8002eda <cleanup_stdio+0x1e>
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f000 fe85 	bl	8003be4 <_fflush_r>
 8002eda:	68e1      	ldr	r1, [r4, #12]
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <cleanup_stdio+0x3c>)
 8002ede:	4299      	cmp	r1, r3
 8002ee0:	d004      	beq.n	8002eec <cleanup_stdio+0x30>
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ee8:	f000 be7c 	b.w	8003be4 <_fflush_r>
 8002eec:	bd10      	pop	{r4, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000120 	.word	0x20000120
 8002ef4:	20000188 	.word	0x20000188
 8002ef8:	200001f0 	.word	0x200001f0

08002efc <global_stdio_init.part.0>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <global_stdio_init.part.0+0x30>)
 8002f00:	4c0b      	ldr	r4, [pc, #44]	; (8002f30 <global_stdio_init.part.0+0x34>)
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <global_stdio_init.part.0+0x38>)
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	4620      	mov	r0, r4
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	f7ff ff94 	bl	8002e38 <std>
 8002f10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002f14:	2201      	movs	r2, #1
 8002f16:	2109      	movs	r1, #9
 8002f18:	f7ff ff8e 	bl	8002e38 <std>
 8002f1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f20:	2202      	movs	r2, #2
 8002f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f26:	2112      	movs	r1, #18
 8002f28:	f7ff bf86 	b.w	8002e38 <std>
 8002f2c:	20000258 	.word	0x20000258
 8002f30:	20000120 	.word	0x20000120
 8002f34:	08002ea5 	.word	0x08002ea5

08002f38 <__sfp_lock_acquire>:
 8002f38:	4801      	ldr	r0, [pc, #4]	; (8002f40 <__sfp_lock_acquire+0x8>)
 8002f3a:	f000 b9fe 	b.w	800333a <__retarget_lock_acquire_recursive>
 8002f3e:	bf00      	nop
 8002f40:	20000261 	.word	0x20000261

08002f44 <__sfp_lock_release>:
 8002f44:	4801      	ldr	r0, [pc, #4]	; (8002f4c <__sfp_lock_release+0x8>)
 8002f46:	f000 b9f9 	b.w	800333c <__retarget_lock_release_recursive>
 8002f4a:	bf00      	nop
 8002f4c:	20000261 	.word	0x20000261

08002f50 <__sinit>:
 8002f50:	b510      	push	{r4, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	f7ff fff0 	bl	8002f38 <__sfp_lock_acquire>
 8002f58:	6a23      	ldr	r3, [r4, #32]
 8002f5a:	b11b      	cbz	r3, 8002f64 <__sinit+0x14>
 8002f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f60:	f7ff bff0 	b.w	8002f44 <__sfp_lock_release>
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <__sinit+0x28>)
 8002f66:	6223      	str	r3, [r4, #32]
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <__sinit+0x2c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f5      	bne.n	8002f5c <__sinit+0xc>
 8002f70:	f7ff ffc4 	bl	8002efc <global_stdio_init.part.0>
 8002f74:	e7f2      	b.n	8002f5c <__sinit+0xc>
 8002f76:	bf00      	nop
 8002f78:	08002ebd 	.word	0x08002ebd
 8002f7c:	20000258 	.word	0x20000258

08002f80 <_fwalk_sglue>:
 8002f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f84:	4607      	mov	r7, r0
 8002f86:	4688      	mov	r8, r1
 8002f88:	4614      	mov	r4, r2
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f90:	f1b9 0901 	subs.w	r9, r9, #1
 8002f94:	d505      	bpl.n	8002fa2 <_fwalk_sglue+0x22>
 8002f96:	6824      	ldr	r4, [r4, #0]
 8002f98:	2c00      	cmp	r4, #0
 8002f9a:	d1f7      	bne.n	8002f8c <_fwalk_sglue+0xc>
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa2:	89ab      	ldrh	r3, [r5, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d907      	bls.n	8002fb8 <_fwalk_sglue+0x38>
 8002fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fac:	3301      	adds	r3, #1
 8002fae:	d003      	beq.n	8002fb8 <_fwalk_sglue+0x38>
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	47c0      	blx	r8
 8002fb6:	4306      	orrs	r6, r0
 8002fb8:	3568      	adds	r5, #104	; 0x68
 8002fba:	e7e9      	b.n	8002f90 <_fwalk_sglue+0x10>

08002fbc <iprintf>:
 8002fbc:	b40f      	push	{r0, r1, r2, r3}
 8002fbe:	b507      	push	{r0, r1, r2, lr}
 8002fc0:	4906      	ldr	r1, [pc, #24]	; (8002fdc <iprintf+0x20>)
 8002fc2:	ab04      	add	r3, sp, #16
 8002fc4:	6808      	ldr	r0, [r1, #0]
 8002fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fca:	6881      	ldr	r1, [r0, #8]
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	f000 fad9 	bl	8003584 <_vfiprintf_r>
 8002fd2:	b003      	add	sp, #12
 8002fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fd8:	b004      	add	sp, #16
 8002fda:	4770      	bx	lr
 8002fdc:	20000064 	.word	0x20000064

08002fe0 <_puts_r>:
 8002fe0:	6a03      	ldr	r3, [r0, #32]
 8002fe2:	b570      	push	{r4, r5, r6, lr}
 8002fe4:	6884      	ldr	r4, [r0, #8]
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	460e      	mov	r6, r1
 8002fea:	b90b      	cbnz	r3, 8002ff0 <_puts_r+0x10>
 8002fec:	f7ff ffb0 	bl	8002f50 <__sinit>
 8002ff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ff2:	07db      	lsls	r3, r3, #31
 8002ff4:	d405      	bmi.n	8003002 <_puts_r+0x22>
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	0598      	lsls	r0, r3, #22
 8002ffa:	d402      	bmi.n	8003002 <_puts_r+0x22>
 8002ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ffe:	f000 f99c 	bl	800333a <__retarget_lock_acquire_recursive>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	0719      	lsls	r1, r3, #28
 8003006:	d513      	bpl.n	8003030 <_puts_r+0x50>
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	b18b      	cbz	r3, 8003030 <_puts_r+0x50>
 800300c:	3e01      	subs	r6, #1
 800300e:	68a3      	ldr	r3, [r4, #8]
 8003010:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003014:	3b01      	subs	r3, #1
 8003016:	60a3      	str	r3, [r4, #8]
 8003018:	b9e9      	cbnz	r1, 8003056 <_puts_r+0x76>
 800301a:	2b00      	cmp	r3, #0
 800301c:	da2e      	bge.n	800307c <_puts_r+0x9c>
 800301e:	4622      	mov	r2, r4
 8003020:	210a      	movs	r1, #10
 8003022:	4628      	mov	r0, r5
 8003024:	f000 f87b 	bl	800311e <__swbuf_r>
 8003028:	3001      	adds	r0, #1
 800302a:	d007      	beq.n	800303c <_puts_r+0x5c>
 800302c:	250a      	movs	r5, #10
 800302e:	e007      	b.n	8003040 <_puts_r+0x60>
 8003030:	4621      	mov	r1, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f000 f8b0 	bl	8003198 <__swsetup_r>
 8003038:	2800      	cmp	r0, #0
 800303a:	d0e7      	beq.n	800300c <_puts_r+0x2c>
 800303c:	f04f 35ff 	mov.w	r5, #4294967295
 8003040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003042:	07da      	lsls	r2, r3, #31
 8003044:	d405      	bmi.n	8003052 <_puts_r+0x72>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	059b      	lsls	r3, r3, #22
 800304a:	d402      	bmi.n	8003052 <_puts_r+0x72>
 800304c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800304e:	f000 f975 	bl	800333c <__retarget_lock_release_recursive>
 8003052:	4628      	mov	r0, r5
 8003054:	bd70      	pop	{r4, r5, r6, pc}
 8003056:	2b00      	cmp	r3, #0
 8003058:	da04      	bge.n	8003064 <_puts_r+0x84>
 800305a:	69a2      	ldr	r2, [r4, #24]
 800305c:	429a      	cmp	r2, r3
 800305e:	dc06      	bgt.n	800306e <_puts_r+0x8e>
 8003060:	290a      	cmp	r1, #10
 8003062:	d004      	beq.n	800306e <_puts_r+0x8e>
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	6022      	str	r2, [r4, #0]
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	e7cf      	b.n	800300e <_puts_r+0x2e>
 800306e:	4622      	mov	r2, r4
 8003070:	4628      	mov	r0, r5
 8003072:	f000 f854 	bl	800311e <__swbuf_r>
 8003076:	3001      	adds	r0, #1
 8003078:	d1c9      	bne.n	800300e <_puts_r+0x2e>
 800307a:	e7df      	b.n	800303c <_puts_r+0x5c>
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	250a      	movs	r5, #10
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	6022      	str	r2, [r4, #0]
 8003084:	701d      	strb	r5, [r3, #0]
 8003086:	e7db      	b.n	8003040 <_puts_r+0x60>

08003088 <puts>:
 8003088:	4b02      	ldr	r3, [pc, #8]	; (8003094 <puts+0xc>)
 800308a:	4601      	mov	r1, r0
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	f7ff bfa7 	b.w	8002fe0 <_puts_r>
 8003092:	bf00      	nop
 8003094:	20000064 	.word	0x20000064

08003098 <__sread>:
 8003098:	b510      	push	{r4, lr}
 800309a:	460c      	mov	r4, r1
 800309c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a0:	f000 f8fc 	bl	800329c <_read_r>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	bfab      	itete	ge
 80030a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030aa:	89a3      	ldrhlt	r3, [r4, #12]
 80030ac:	181b      	addge	r3, r3, r0
 80030ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030b2:	bfac      	ite	ge
 80030b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80030b6:	81a3      	strhlt	r3, [r4, #12]
 80030b8:	bd10      	pop	{r4, pc}

080030ba <__swrite>:
 80030ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030be:	461f      	mov	r7, r3
 80030c0:	898b      	ldrh	r3, [r1, #12]
 80030c2:	05db      	lsls	r3, r3, #23
 80030c4:	4605      	mov	r5, r0
 80030c6:	460c      	mov	r4, r1
 80030c8:	4616      	mov	r6, r2
 80030ca:	d505      	bpl.n	80030d8 <__swrite+0x1e>
 80030cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d0:	2302      	movs	r3, #2
 80030d2:	2200      	movs	r2, #0
 80030d4:	f000 f8d0 	bl	8003278 <_lseek_r>
 80030d8:	89a3      	ldrh	r3, [r4, #12]
 80030da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030e2:	81a3      	strh	r3, [r4, #12]
 80030e4:	4632      	mov	r2, r6
 80030e6:	463b      	mov	r3, r7
 80030e8:	4628      	mov	r0, r5
 80030ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030ee:	f000 b8e7 	b.w	80032c0 <_write_r>

080030f2 <__sseek>:
 80030f2:	b510      	push	{r4, lr}
 80030f4:	460c      	mov	r4, r1
 80030f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030fa:	f000 f8bd 	bl	8003278 <_lseek_r>
 80030fe:	1c43      	adds	r3, r0, #1
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	bf15      	itete	ne
 8003104:	6560      	strne	r0, [r4, #84]	; 0x54
 8003106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800310a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800310e:	81a3      	strheq	r3, [r4, #12]
 8003110:	bf18      	it	ne
 8003112:	81a3      	strhne	r3, [r4, #12]
 8003114:	bd10      	pop	{r4, pc}

08003116 <__sclose>:
 8003116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311a:	f000 b89d 	b.w	8003258 <_close_r>

0800311e <__swbuf_r>:
 800311e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003120:	460e      	mov	r6, r1
 8003122:	4614      	mov	r4, r2
 8003124:	4605      	mov	r5, r0
 8003126:	b118      	cbz	r0, 8003130 <__swbuf_r+0x12>
 8003128:	6a03      	ldr	r3, [r0, #32]
 800312a:	b90b      	cbnz	r3, 8003130 <__swbuf_r+0x12>
 800312c:	f7ff ff10 	bl	8002f50 <__sinit>
 8003130:	69a3      	ldr	r3, [r4, #24]
 8003132:	60a3      	str	r3, [r4, #8]
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	071a      	lsls	r2, r3, #28
 8003138:	d525      	bpl.n	8003186 <__swbuf_r+0x68>
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	b31b      	cbz	r3, 8003186 <__swbuf_r+0x68>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	6922      	ldr	r2, [r4, #16]
 8003142:	1a98      	subs	r0, r3, r2
 8003144:	6963      	ldr	r3, [r4, #20]
 8003146:	b2f6      	uxtb	r6, r6
 8003148:	4283      	cmp	r3, r0
 800314a:	4637      	mov	r7, r6
 800314c:	dc04      	bgt.n	8003158 <__swbuf_r+0x3a>
 800314e:	4621      	mov	r1, r4
 8003150:	4628      	mov	r0, r5
 8003152:	f000 fd47 	bl	8003be4 <_fflush_r>
 8003156:	b9e0      	cbnz	r0, 8003192 <__swbuf_r+0x74>
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	3b01      	subs	r3, #1
 800315c:	60a3      	str	r3, [r4, #8]
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	6022      	str	r2, [r4, #0]
 8003164:	701e      	strb	r6, [r3, #0]
 8003166:	6962      	ldr	r2, [r4, #20]
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	429a      	cmp	r2, r3
 800316c:	d004      	beq.n	8003178 <__swbuf_r+0x5a>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	07db      	lsls	r3, r3, #31
 8003172:	d506      	bpl.n	8003182 <__swbuf_r+0x64>
 8003174:	2e0a      	cmp	r6, #10
 8003176:	d104      	bne.n	8003182 <__swbuf_r+0x64>
 8003178:	4621      	mov	r1, r4
 800317a:	4628      	mov	r0, r5
 800317c:	f000 fd32 	bl	8003be4 <_fflush_r>
 8003180:	b938      	cbnz	r0, 8003192 <__swbuf_r+0x74>
 8003182:	4638      	mov	r0, r7
 8003184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003186:	4621      	mov	r1, r4
 8003188:	4628      	mov	r0, r5
 800318a:	f000 f805 	bl	8003198 <__swsetup_r>
 800318e:	2800      	cmp	r0, #0
 8003190:	d0d5      	beq.n	800313e <__swbuf_r+0x20>
 8003192:	f04f 37ff 	mov.w	r7, #4294967295
 8003196:	e7f4      	b.n	8003182 <__swbuf_r+0x64>

08003198 <__swsetup_r>:
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <__swsetup_r+0xac>)
 800319c:	4605      	mov	r5, r0
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	460c      	mov	r4, r1
 80031a2:	b118      	cbz	r0, 80031ac <__swsetup_r+0x14>
 80031a4:	6a03      	ldr	r3, [r0, #32]
 80031a6:	b90b      	cbnz	r3, 80031ac <__swsetup_r+0x14>
 80031a8:	f7ff fed2 	bl	8002f50 <__sinit>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031b2:	0718      	lsls	r0, r3, #28
 80031b4:	d422      	bmi.n	80031fc <__swsetup_r+0x64>
 80031b6:	06d9      	lsls	r1, r3, #27
 80031b8:	d407      	bmi.n	80031ca <__swsetup_r+0x32>
 80031ba:	2309      	movs	r3, #9
 80031bc:	602b      	str	r3, [r5, #0]
 80031be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	e034      	b.n	8003234 <__swsetup_r+0x9c>
 80031ca:	0758      	lsls	r0, r3, #29
 80031cc:	d512      	bpl.n	80031f4 <__swsetup_r+0x5c>
 80031ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d0:	b141      	cbz	r1, 80031e4 <__swsetup_r+0x4c>
 80031d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031d6:	4299      	cmp	r1, r3
 80031d8:	d002      	beq.n	80031e0 <__swsetup_r+0x48>
 80031da:	4628      	mov	r0, r5
 80031dc:	f000 f8b0 	bl	8003340 <_free_r>
 80031e0:	2300      	movs	r3, #0
 80031e2:	6363      	str	r3, [r4, #52]	; 0x34
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031ea:	81a3      	strh	r3, [r4, #12]
 80031ec:	2300      	movs	r3, #0
 80031ee:	6063      	str	r3, [r4, #4]
 80031f0:	6923      	ldr	r3, [r4, #16]
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	89a3      	ldrh	r3, [r4, #12]
 80031f6:	f043 0308 	orr.w	r3, r3, #8
 80031fa:	81a3      	strh	r3, [r4, #12]
 80031fc:	6923      	ldr	r3, [r4, #16]
 80031fe:	b94b      	cbnz	r3, 8003214 <__swsetup_r+0x7c>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320a:	d003      	beq.n	8003214 <__swsetup_r+0x7c>
 800320c:	4621      	mov	r1, r4
 800320e:	4628      	mov	r0, r5
 8003210:	f000 fd36 	bl	8003c80 <__smakebuf_r>
 8003214:	89a0      	ldrh	r0, [r4, #12]
 8003216:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800321a:	f010 0301 	ands.w	r3, r0, #1
 800321e:	d00a      	beq.n	8003236 <__swsetup_r+0x9e>
 8003220:	2300      	movs	r3, #0
 8003222:	60a3      	str	r3, [r4, #8]
 8003224:	6963      	ldr	r3, [r4, #20]
 8003226:	425b      	negs	r3, r3
 8003228:	61a3      	str	r3, [r4, #24]
 800322a:	6923      	ldr	r3, [r4, #16]
 800322c:	b943      	cbnz	r3, 8003240 <__swsetup_r+0xa8>
 800322e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003232:	d1c4      	bne.n	80031be <__swsetup_r+0x26>
 8003234:	bd38      	pop	{r3, r4, r5, pc}
 8003236:	0781      	lsls	r1, r0, #30
 8003238:	bf58      	it	pl
 800323a:	6963      	ldrpl	r3, [r4, #20]
 800323c:	60a3      	str	r3, [r4, #8]
 800323e:	e7f4      	b.n	800322a <__swsetup_r+0x92>
 8003240:	2000      	movs	r0, #0
 8003242:	e7f7      	b.n	8003234 <__swsetup_r+0x9c>
 8003244:	20000064 	.word	0x20000064

08003248 <memset>:
 8003248:	4402      	add	r2, r0
 800324a:	4603      	mov	r3, r0
 800324c:	4293      	cmp	r3, r2
 800324e:	d100      	bne.n	8003252 <memset+0xa>
 8003250:	4770      	bx	lr
 8003252:	f803 1b01 	strb.w	r1, [r3], #1
 8003256:	e7f9      	b.n	800324c <memset+0x4>

08003258 <_close_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4d06      	ldr	r5, [pc, #24]	; (8003274 <_close_r+0x1c>)
 800325c:	2300      	movs	r3, #0
 800325e:	4604      	mov	r4, r0
 8003260:	4608      	mov	r0, r1
 8003262:	602b      	str	r3, [r5, #0]
 8003264:	f7fd fc7b 	bl	8000b5e <_close>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	d102      	bne.n	8003272 <_close_r+0x1a>
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	b103      	cbz	r3, 8003272 <_close_r+0x1a>
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	2000025c 	.word	0x2000025c

08003278 <_lseek_r>:
 8003278:	b538      	push	{r3, r4, r5, lr}
 800327a:	4d07      	ldr	r5, [pc, #28]	; (8003298 <_lseek_r+0x20>)
 800327c:	4604      	mov	r4, r0
 800327e:	4608      	mov	r0, r1
 8003280:	4611      	mov	r1, r2
 8003282:	2200      	movs	r2, #0
 8003284:	602a      	str	r2, [r5, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f7fd fc90 	bl	8000bac <_lseek>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	d102      	bne.n	8003296 <_lseek_r+0x1e>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b103      	cbz	r3, 8003296 <_lseek_r+0x1e>
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	2000025c 	.word	0x2000025c

0800329c <_read_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4d07      	ldr	r5, [pc, #28]	; (80032bc <_read_r+0x20>)
 80032a0:	4604      	mov	r4, r0
 80032a2:	4608      	mov	r0, r1
 80032a4:	4611      	mov	r1, r2
 80032a6:	2200      	movs	r2, #0
 80032a8:	602a      	str	r2, [r5, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f7fd fc1e 	bl	8000aec <_read>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d102      	bne.n	80032ba <_read_r+0x1e>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	b103      	cbz	r3, 80032ba <_read_r+0x1e>
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	2000025c 	.word	0x2000025c

080032c0 <_write_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4d07      	ldr	r5, [pc, #28]	; (80032e0 <_write_r+0x20>)
 80032c4:	4604      	mov	r4, r0
 80032c6:	4608      	mov	r0, r1
 80032c8:	4611      	mov	r1, r2
 80032ca:	2200      	movs	r2, #0
 80032cc:	602a      	str	r2, [r5, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f7fd fc29 	bl	8000b26 <_write>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_write_r+0x1e>
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	b103      	cbz	r3, 80032de <_write_r+0x1e>
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	2000025c 	.word	0x2000025c

080032e4 <__errno>:
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <__errno+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000064 	.word	0x20000064

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4d0d      	ldr	r5, [pc, #52]	; (8003328 <__libc_init_array+0x38>)
 80032f4:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f6:	1b64      	subs	r4, r4, r5
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	2600      	movs	r6, #0
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	4d0b      	ldr	r5, [pc, #44]	; (8003330 <__libc_init_array+0x40>)
 8003302:	4c0c      	ldr	r4, [pc, #48]	; (8003334 <__libc_init_array+0x44>)
 8003304:	f000 fd2a 	bl	8003d5c <_init>
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	2600      	movs	r6, #0
 800330e:	42a6      	cmp	r6, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f855 3b04 	ldr.w	r3, [r5], #4
 8003318:	4798      	blx	r3
 800331a:	3601      	adds	r6, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003322:	4798      	blx	r3
 8003324:	3601      	adds	r6, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	08003de4 	.word	0x08003de4
 800332c:	08003de4 	.word	0x08003de4
 8003330:	08003de4 	.word	0x08003de4
 8003334:	08003de8 	.word	0x08003de8

08003338 <__retarget_lock_init_recursive>:
 8003338:	4770      	bx	lr

0800333a <__retarget_lock_acquire_recursive>:
 800333a:	4770      	bx	lr

0800333c <__retarget_lock_release_recursive>:
 800333c:	4770      	bx	lr
	...

08003340 <_free_r>:
 8003340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003342:	2900      	cmp	r1, #0
 8003344:	d044      	beq.n	80033d0 <_free_r+0x90>
 8003346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800334a:	9001      	str	r0, [sp, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f1a1 0404 	sub.w	r4, r1, #4
 8003352:	bfb8      	it	lt
 8003354:	18e4      	addlt	r4, r4, r3
 8003356:	f000 f8df 	bl	8003518 <__malloc_lock>
 800335a:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <_free_r+0x94>)
 800335c:	9801      	ldr	r0, [sp, #4]
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	b933      	cbnz	r3, 8003370 <_free_r+0x30>
 8003362:	6063      	str	r3, [r4, #4]
 8003364:	6014      	str	r4, [r2, #0]
 8003366:	b003      	add	sp, #12
 8003368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800336c:	f000 b8da 	b.w	8003524 <__malloc_unlock>
 8003370:	42a3      	cmp	r3, r4
 8003372:	d908      	bls.n	8003386 <_free_r+0x46>
 8003374:	6825      	ldr	r5, [r4, #0]
 8003376:	1961      	adds	r1, r4, r5
 8003378:	428b      	cmp	r3, r1
 800337a:	bf01      	itttt	eq
 800337c:	6819      	ldreq	r1, [r3, #0]
 800337e:	685b      	ldreq	r3, [r3, #4]
 8003380:	1949      	addeq	r1, r1, r5
 8003382:	6021      	streq	r1, [r4, #0]
 8003384:	e7ed      	b.n	8003362 <_free_r+0x22>
 8003386:	461a      	mov	r2, r3
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	b10b      	cbz	r3, 8003390 <_free_r+0x50>
 800338c:	42a3      	cmp	r3, r4
 800338e:	d9fa      	bls.n	8003386 <_free_r+0x46>
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	1855      	adds	r5, r2, r1
 8003394:	42a5      	cmp	r5, r4
 8003396:	d10b      	bne.n	80033b0 <_free_r+0x70>
 8003398:	6824      	ldr	r4, [r4, #0]
 800339a:	4421      	add	r1, r4
 800339c:	1854      	adds	r4, r2, r1
 800339e:	42a3      	cmp	r3, r4
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	d1e0      	bne.n	8003366 <_free_r+0x26>
 80033a4:	681c      	ldr	r4, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	6053      	str	r3, [r2, #4]
 80033aa:	440c      	add	r4, r1
 80033ac:	6014      	str	r4, [r2, #0]
 80033ae:	e7da      	b.n	8003366 <_free_r+0x26>
 80033b0:	d902      	bls.n	80033b8 <_free_r+0x78>
 80033b2:	230c      	movs	r3, #12
 80033b4:	6003      	str	r3, [r0, #0]
 80033b6:	e7d6      	b.n	8003366 <_free_r+0x26>
 80033b8:	6825      	ldr	r5, [r4, #0]
 80033ba:	1961      	adds	r1, r4, r5
 80033bc:	428b      	cmp	r3, r1
 80033be:	bf04      	itt	eq
 80033c0:	6819      	ldreq	r1, [r3, #0]
 80033c2:	685b      	ldreq	r3, [r3, #4]
 80033c4:	6063      	str	r3, [r4, #4]
 80033c6:	bf04      	itt	eq
 80033c8:	1949      	addeq	r1, r1, r5
 80033ca:	6021      	streq	r1, [r4, #0]
 80033cc:	6054      	str	r4, [r2, #4]
 80033ce:	e7ca      	b.n	8003366 <_free_r+0x26>
 80033d0:	b003      	add	sp, #12
 80033d2:	bd30      	pop	{r4, r5, pc}
 80033d4:	20000264 	.word	0x20000264

080033d8 <sbrk_aligned>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	4e0e      	ldr	r6, [pc, #56]	; (8003414 <sbrk_aligned+0x3c>)
 80033dc:	460c      	mov	r4, r1
 80033de:	6831      	ldr	r1, [r6, #0]
 80033e0:	4605      	mov	r5, r0
 80033e2:	b911      	cbnz	r1, 80033ea <sbrk_aligned+0x12>
 80033e4:	f000 fcaa 	bl	8003d3c <_sbrk_r>
 80033e8:	6030      	str	r0, [r6, #0]
 80033ea:	4621      	mov	r1, r4
 80033ec:	4628      	mov	r0, r5
 80033ee:	f000 fca5 	bl	8003d3c <_sbrk_r>
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	d00a      	beq.n	800340c <sbrk_aligned+0x34>
 80033f6:	1cc4      	adds	r4, r0, #3
 80033f8:	f024 0403 	bic.w	r4, r4, #3
 80033fc:	42a0      	cmp	r0, r4
 80033fe:	d007      	beq.n	8003410 <sbrk_aligned+0x38>
 8003400:	1a21      	subs	r1, r4, r0
 8003402:	4628      	mov	r0, r5
 8003404:	f000 fc9a 	bl	8003d3c <_sbrk_r>
 8003408:	3001      	adds	r0, #1
 800340a:	d101      	bne.n	8003410 <sbrk_aligned+0x38>
 800340c:	f04f 34ff 	mov.w	r4, #4294967295
 8003410:	4620      	mov	r0, r4
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	20000268 	.word	0x20000268

08003418 <_malloc_r>:
 8003418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800341c:	1ccd      	adds	r5, r1, #3
 800341e:	f025 0503 	bic.w	r5, r5, #3
 8003422:	3508      	adds	r5, #8
 8003424:	2d0c      	cmp	r5, #12
 8003426:	bf38      	it	cc
 8003428:	250c      	movcc	r5, #12
 800342a:	2d00      	cmp	r5, #0
 800342c:	4607      	mov	r7, r0
 800342e:	db01      	blt.n	8003434 <_malloc_r+0x1c>
 8003430:	42a9      	cmp	r1, r5
 8003432:	d905      	bls.n	8003440 <_malloc_r+0x28>
 8003434:	230c      	movs	r3, #12
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	2600      	movs	r6, #0
 800343a:	4630      	mov	r0, r6
 800343c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003440:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003514 <_malloc_r+0xfc>
 8003444:	f000 f868 	bl	8003518 <__malloc_lock>
 8003448:	f8d8 3000 	ldr.w	r3, [r8]
 800344c:	461c      	mov	r4, r3
 800344e:	bb5c      	cbnz	r4, 80034a8 <_malloc_r+0x90>
 8003450:	4629      	mov	r1, r5
 8003452:	4638      	mov	r0, r7
 8003454:	f7ff ffc0 	bl	80033d8 <sbrk_aligned>
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	4604      	mov	r4, r0
 800345c:	d155      	bne.n	800350a <_malloc_r+0xf2>
 800345e:	f8d8 4000 	ldr.w	r4, [r8]
 8003462:	4626      	mov	r6, r4
 8003464:	2e00      	cmp	r6, #0
 8003466:	d145      	bne.n	80034f4 <_malloc_r+0xdc>
 8003468:	2c00      	cmp	r4, #0
 800346a:	d048      	beq.n	80034fe <_malloc_r+0xe6>
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	4631      	mov	r1, r6
 8003470:	4638      	mov	r0, r7
 8003472:	eb04 0903 	add.w	r9, r4, r3
 8003476:	f000 fc61 	bl	8003d3c <_sbrk_r>
 800347a:	4581      	cmp	r9, r0
 800347c:	d13f      	bne.n	80034fe <_malloc_r+0xe6>
 800347e:	6821      	ldr	r1, [r4, #0]
 8003480:	1a6d      	subs	r5, r5, r1
 8003482:	4629      	mov	r1, r5
 8003484:	4638      	mov	r0, r7
 8003486:	f7ff ffa7 	bl	80033d8 <sbrk_aligned>
 800348a:	3001      	adds	r0, #1
 800348c:	d037      	beq.n	80034fe <_malloc_r+0xe6>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	442b      	add	r3, r5
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	f8d8 3000 	ldr.w	r3, [r8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d038      	beq.n	800350e <_malloc_r+0xf6>
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	42a2      	cmp	r2, r4
 80034a0:	d12b      	bne.n	80034fa <_malloc_r+0xe2>
 80034a2:	2200      	movs	r2, #0
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	e00f      	b.n	80034c8 <_malloc_r+0xb0>
 80034a8:	6822      	ldr	r2, [r4, #0]
 80034aa:	1b52      	subs	r2, r2, r5
 80034ac:	d41f      	bmi.n	80034ee <_malloc_r+0xd6>
 80034ae:	2a0b      	cmp	r2, #11
 80034b0:	d917      	bls.n	80034e2 <_malloc_r+0xca>
 80034b2:	1961      	adds	r1, r4, r5
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	6025      	str	r5, [r4, #0]
 80034b8:	bf18      	it	ne
 80034ba:	6059      	strne	r1, [r3, #4]
 80034bc:	6863      	ldr	r3, [r4, #4]
 80034be:	bf08      	it	eq
 80034c0:	f8c8 1000 	streq.w	r1, [r8]
 80034c4:	5162      	str	r2, [r4, r5]
 80034c6:	604b      	str	r3, [r1, #4]
 80034c8:	4638      	mov	r0, r7
 80034ca:	f104 060b 	add.w	r6, r4, #11
 80034ce:	f000 f829 	bl	8003524 <__malloc_unlock>
 80034d2:	f026 0607 	bic.w	r6, r6, #7
 80034d6:	1d23      	adds	r3, r4, #4
 80034d8:	1af2      	subs	r2, r6, r3
 80034da:	d0ae      	beq.n	800343a <_malloc_r+0x22>
 80034dc:	1b9b      	subs	r3, r3, r6
 80034de:	50a3      	str	r3, [r4, r2]
 80034e0:	e7ab      	b.n	800343a <_malloc_r+0x22>
 80034e2:	42a3      	cmp	r3, r4
 80034e4:	6862      	ldr	r2, [r4, #4]
 80034e6:	d1dd      	bne.n	80034a4 <_malloc_r+0x8c>
 80034e8:	f8c8 2000 	str.w	r2, [r8]
 80034ec:	e7ec      	b.n	80034c8 <_malloc_r+0xb0>
 80034ee:	4623      	mov	r3, r4
 80034f0:	6864      	ldr	r4, [r4, #4]
 80034f2:	e7ac      	b.n	800344e <_malloc_r+0x36>
 80034f4:	4634      	mov	r4, r6
 80034f6:	6876      	ldr	r6, [r6, #4]
 80034f8:	e7b4      	b.n	8003464 <_malloc_r+0x4c>
 80034fa:	4613      	mov	r3, r2
 80034fc:	e7cc      	b.n	8003498 <_malloc_r+0x80>
 80034fe:	230c      	movs	r3, #12
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4638      	mov	r0, r7
 8003504:	f000 f80e 	bl	8003524 <__malloc_unlock>
 8003508:	e797      	b.n	800343a <_malloc_r+0x22>
 800350a:	6025      	str	r5, [r4, #0]
 800350c:	e7dc      	b.n	80034c8 <_malloc_r+0xb0>
 800350e:	605b      	str	r3, [r3, #4]
 8003510:	deff      	udf	#255	; 0xff
 8003512:	bf00      	nop
 8003514:	20000264 	.word	0x20000264

08003518 <__malloc_lock>:
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <__malloc_lock+0x8>)
 800351a:	f7ff bf0e 	b.w	800333a <__retarget_lock_acquire_recursive>
 800351e:	bf00      	nop
 8003520:	20000260 	.word	0x20000260

08003524 <__malloc_unlock>:
 8003524:	4801      	ldr	r0, [pc, #4]	; (800352c <__malloc_unlock+0x8>)
 8003526:	f7ff bf09 	b.w	800333c <__retarget_lock_release_recursive>
 800352a:	bf00      	nop
 800352c:	20000260 	.word	0x20000260

08003530 <__sfputc_r>:
 8003530:	6893      	ldr	r3, [r2, #8]
 8003532:	3b01      	subs	r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	b410      	push	{r4}
 8003538:	6093      	str	r3, [r2, #8]
 800353a:	da08      	bge.n	800354e <__sfputc_r+0x1e>
 800353c:	6994      	ldr	r4, [r2, #24]
 800353e:	42a3      	cmp	r3, r4
 8003540:	db01      	blt.n	8003546 <__sfputc_r+0x16>
 8003542:	290a      	cmp	r1, #10
 8003544:	d103      	bne.n	800354e <__sfputc_r+0x1e>
 8003546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800354a:	f7ff bde8 	b.w	800311e <__swbuf_r>
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	1c58      	adds	r0, r3, #1
 8003552:	6010      	str	r0, [r2, #0]
 8003554:	7019      	strb	r1, [r3, #0]
 8003556:	4608      	mov	r0, r1
 8003558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800355c:	4770      	bx	lr

0800355e <__sfputs_r>:
 800355e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003560:	4606      	mov	r6, r0
 8003562:	460f      	mov	r7, r1
 8003564:	4614      	mov	r4, r2
 8003566:	18d5      	adds	r5, r2, r3
 8003568:	42ac      	cmp	r4, r5
 800356a:	d101      	bne.n	8003570 <__sfputs_r+0x12>
 800356c:	2000      	movs	r0, #0
 800356e:	e007      	b.n	8003580 <__sfputs_r+0x22>
 8003570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003574:	463a      	mov	r2, r7
 8003576:	4630      	mov	r0, r6
 8003578:	f7ff ffda 	bl	8003530 <__sfputc_r>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	d1f3      	bne.n	8003568 <__sfputs_r+0xa>
 8003580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003584 <_vfiprintf_r>:
 8003584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003588:	460d      	mov	r5, r1
 800358a:	b09d      	sub	sp, #116	; 0x74
 800358c:	4614      	mov	r4, r2
 800358e:	4698      	mov	r8, r3
 8003590:	4606      	mov	r6, r0
 8003592:	b118      	cbz	r0, 800359c <_vfiprintf_r+0x18>
 8003594:	6a03      	ldr	r3, [r0, #32]
 8003596:	b90b      	cbnz	r3, 800359c <_vfiprintf_r+0x18>
 8003598:	f7ff fcda 	bl	8002f50 <__sinit>
 800359c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800359e:	07d9      	lsls	r1, r3, #31
 80035a0:	d405      	bmi.n	80035ae <_vfiprintf_r+0x2a>
 80035a2:	89ab      	ldrh	r3, [r5, #12]
 80035a4:	059a      	lsls	r2, r3, #22
 80035a6:	d402      	bmi.n	80035ae <_vfiprintf_r+0x2a>
 80035a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035aa:	f7ff fec6 	bl	800333a <__retarget_lock_acquire_recursive>
 80035ae:	89ab      	ldrh	r3, [r5, #12]
 80035b0:	071b      	lsls	r3, r3, #28
 80035b2:	d501      	bpl.n	80035b8 <_vfiprintf_r+0x34>
 80035b4:	692b      	ldr	r3, [r5, #16]
 80035b6:	b99b      	cbnz	r3, 80035e0 <_vfiprintf_r+0x5c>
 80035b8:	4629      	mov	r1, r5
 80035ba:	4630      	mov	r0, r6
 80035bc:	f7ff fdec 	bl	8003198 <__swsetup_r>
 80035c0:	b170      	cbz	r0, 80035e0 <_vfiprintf_r+0x5c>
 80035c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035c4:	07dc      	lsls	r4, r3, #31
 80035c6:	d504      	bpl.n	80035d2 <_vfiprintf_r+0x4e>
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	b01d      	add	sp, #116	; 0x74
 80035ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d2:	89ab      	ldrh	r3, [r5, #12]
 80035d4:	0598      	lsls	r0, r3, #22
 80035d6:	d4f7      	bmi.n	80035c8 <_vfiprintf_r+0x44>
 80035d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035da:	f7ff feaf 	bl	800333c <__retarget_lock_release_recursive>
 80035de:	e7f3      	b.n	80035c8 <_vfiprintf_r+0x44>
 80035e0:	2300      	movs	r3, #0
 80035e2:	9309      	str	r3, [sp, #36]	; 0x24
 80035e4:	2320      	movs	r3, #32
 80035e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80035ee:	2330      	movs	r3, #48	; 0x30
 80035f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80037a4 <_vfiprintf_r+0x220>
 80035f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035f8:	f04f 0901 	mov.w	r9, #1
 80035fc:	4623      	mov	r3, r4
 80035fe:	469a      	mov	sl, r3
 8003600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003604:	b10a      	cbz	r2, 800360a <_vfiprintf_r+0x86>
 8003606:	2a25      	cmp	r2, #37	; 0x25
 8003608:	d1f9      	bne.n	80035fe <_vfiprintf_r+0x7a>
 800360a:	ebba 0b04 	subs.w	fp, sl, r4
 800360e:	d00b      	beq.n	8003628 <_vfiprintf_r+0xa4>
 8003610:	465b      	mov	r3, fp
 8003612:	4622      	mov	r2, r4
 8003614:	4629      	mov	r1, r5
 8003616:	4630      	mov	r0, r6
 8003618:	f7ff ffa1 	bl	800355e <__sfputs_r>
 800361c:	3001      	adds	r0, #1
 800361e:	f000 80a9 	beq.w	8003774 <_vfiprintf_r+0x1f0>
 8003622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003624:	445a      	add	r2, fp
 8003626:	9209      	str	r2, [sp, #36]	; 0x24
 8003628:	f89a 3000 	ldrb.w	r3, [sl]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a1 	beq.w	8003774 <_vfiprintf_r+0x1f0>
 8003632:	2300      	movs	r3, #0
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800363c:	f10a 0a01 	add.w	sl, sl, #1
 8003640:	9304      	str	r3, [sp, #16]
 8003642:	9307      	str	r3, [sp, #28]
 8003644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003648:	931a      	str	r3, [sp, #104]	; 0x68
 800364a:	4654      	mov	r4, sl
 800364c:	2205      	movs	r2, #5
 800364e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003652:	4854      	ldr	r0, [pc, #336]	; (80037a4 <_vfiprintf_r+0x220>)
 8003654:	f7fc fdc4 	bl	80001e0 <memchr>
 8003658:	9a04      	ldr	r2, [sp, #16]
 800365a:	b9d8      	cbnz	r0, 8003694 <_vfiprintf_r+0x110>
 800365c:	06d1      	lsls	r1, r2, #27
 800365e:	bf44      	itt	mi
 8003660:	2320      	movmi	r3, #32
 8003662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003666:	0713      	lsls	r3, r2, #28
 8003668:	bf44      	itt	mi
 800366a:	232b      	movmi	r3, #43	; 0x2b
 800366c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003670:	f89a 3000 	ldrb.w	r3, [sl]
 8003674:	2b2a      	cmp	r3, #42	; 0x2a
 8003676:	d015      	beq.n	80036a4 <_vfiprintf_r+0x120>
 8003678:	9a07      	ldr	r2, [sp, #28]
 800367a:	4654      	mov	r4, sl
 800367c:	2000      	movs	r0, #0
 800367e:	f04f 0c0a 	mov.w	ip, #10
 8003682:	4621      	mov	r1, r4
 8003684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003688:	3b30      	subs	r3, #48	; 0x30
 800368a:	2b09      	cmp	r3, #9
 800368c:	d94d      	bls.n	800372a <_vfiprintf_r+0x1a6>
 800368e:	b1b0      	cbz	r0, 80036be <_vfiprintf_r+0x13a>
 8003690:	9207      	str	r2, [sp, #28]
 8003692:	e014      	b.n	80036be <_vfiprintf_r+0x13a>
 8003694:	eba0 0308 	sub.w	r3, r0, r8
 8003698:	fa09 f303 	lsl.w	r3, r9, r3
 800369c:	4313      	orrs	r3, r2
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	46a2      	mov	sl, r4
 80036a2:	e7d2      	b.n	800364a <_vfiprintf_r+0xc6>
 80036a4:	9b03      	ldr	r3, [sp, #12]
 80036a6:	1d19      	adds	r1, r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	9103      	str	r1, [sp, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bfbb      	ittet	lt
 80036b0:	425b      	neglt	r3, r3
 80036b2:	f042 0202 	orrlt.w	r2, r2, #2
 80036b6:	9307      	strge	r3, [sp, #28]
 80036b8:	9307      	strlt	r3, [sp, #28]
 80036ba:	bfb8      	it	lt
 80036bc:	9204      	strlt	r2, [sp, #16]
 80036be:	7823      	ldrb	r3, [r4, #0]
 80036c0:	2b2e      	cmp	r3, #46	; 0x2e
 80036c2:	d10c      	bne.n	80036de <_vfiprintf_r+0x15a>
 80036c4:	7863      	ldrb	r3, [r4, #1]
 80036c6:	2b2a      	cmp	r3, #42	; 0x2a
 80036c8:	d134      	bne.n	8003734 <_vfiprintf_r+0x1b0>
 80036ca:	9b03      	ldr	r3, [sp, #12]
 80036cc:	1d1a      	adds	r2, r3, #4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	9203      	str	r2, [sp, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bfb8      	it	lt
 80036d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80036da:	3402      	adds	r4, #2
 80036dc:	9305      	str	r3, [sp, #20]
 80036de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80037b4 <_vfiprintf_r+0x230>
 80036e2:	7821      	ldrb	r1, [r4, #0]
 80036e4:	2203      	movs	r2, #3
 80036e6:	4650      	mov	r0, sl
 80036e8:	f7fc fd7a 	bl	80001e0 <memchr>
 80036ec:	b138      	cbz	r0, 80036fe <_vfiprintf_r+0x17a>
 80036ee:	9b04      	ldr	r3, [sp, #16]
 80036f0:	eba0 000a 	sub.w	r0, r0, sl
 80036f4:	2240      	movs	r2, #64	; 0x40
 80036f6:	4082      	lsls	r2, r0
 80036f8:	4313      	orrs	r3, r2
 80036fa:	3401      	adds	r4, #1
 80036fc:	9304      	str	r3, [sp, #16]
 80036fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003702:	4829      	ldr	r0, [pc, #164]	; (80037a8 <_vfiprintf_r+0x224>)
 8003704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003708:	2206      	movs	r2, #6
 800370a:	f7fc fd69 	bl	80001e0 <memchr>
 800370e:	2800      	cmp	r0, #0
 8003710:	d03f      	beq.n	8003792 <_vfiprintf_r+0x20e>
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <_vfiprintf_r+0x228>)
 8003714:	bb1b      	cbnz	r3, 800375e <_vfiprintf_r+0x1da>
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	3307      	adds	r3, #7
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	3308      	adds	r3, #8
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003724:	443b      	add	r3, r7
 8003726:	9309      	str	r3, [sp, #36]	; 0x24
 8003728:	e768      	b.n	80035fc <_vfiprintf_r+0x78>
 800372a:	fb0c 3202 	mla	r2, ip, r2, r3
 800372e:	460c      	mov	r4, r1
 8003730:	2001      	movs	r0, #1
 8003732:	e7a6      	b.n	8003682 <_vfiprintf_r+0xfe>
 8003734:	2300      	movs	r3, #0
 8003736:	3401      	adds	r4, #1
 8003738:	9305      	str	r3, [sp, #20]
 800373a:	4619      	mov	r1, r3
 800373c:	f04f 0c0a 	mov.w	ip, #10
 8003740:	4620      	mov	r0, r4
 8003742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003746:	3a30      	subs	r2, #48	; 0x30
 8003748:	2a09      	cmp	r2, #9
 800374a:	d903      	bls.n	8003754 <_vfiprintf_r+0x1d0>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0c6      	beq.n	80036de <_vfiprintf_r+0x15a>
 8003750:	9105      	str	r1, [sp, #20]
 8003752:	e7c4      	b.n	80036de <_vfiprintf_r+0x15a>
 8003754:	fb0c 2101 	mla	r1, ip, r1, r2
 8003758:	4604      	mov	r4, r0
 800375a:	2301      	movs	r3, #1
 800375c:	e7f0      	b.n	8003740 <_vfiprintf_r+0x1bc>
 800375e:	ab03      	add	r3, sp, #12
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	462a      	mov	r2, r5
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <_vfiprintf_r+0x22c>)
 8003766:	a904      	add	r1, sp, #16
 8003768:	4630      	mov	r0, r6
 800376a:	f3af 8000 	nop.w
 800376e:	4607      	mov	r7, r0
 8003770:	1c78      	adds	r0, r7, #1
 8003772:	d1d6      	bne.n	8003722 <_vfiprintf_r+0x19e>
 8003774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003776:	07d9      	lsls	r1, r3, #31
 8003778:	d405      	bmi.n	8003786 <_vfiprintf_r+0x202>
 800377a:	89ab      	ldrh	r3, [r5, #12]
 800377c:	059a      	lsls	r2, r3, #22
 800377e:	d402      	bmi.n	8003786 <_vfiprintf_r+0x202>
 8003780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003782:	f7ff fddb 	bl	800333c <__retarget_lock_release_recursive>
 8003786:	89ab      	ldrh	r3, [r5, #12]
 8003788:	065b      	lsls	r3, r3, #25
 800378a:	f53f af1d 	bmi.w	80035c8 <_vfiprintf_r+0x44>
 800378e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003790:	e71c      	b.n	80035cc <_vfiprintf_r+0x48>
 8003792:	ab03      	add	r3, sp, #12
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	462a      	mov	r2, r5
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <_vfiprintf_r+0x22c>)
 800379a:	a904      	add	r1, sp, #16
 800379c:	4630      	mov	r0, r6
 800379e:	f000 f879 	bl	8003894 <_printf_i>
 80037a2:	e7e4      	b.n	800376e <_vfiprintf_r+0x1ea>
 80037a4:	08003da8 	.word	0x08003da8
 80037a8:	08003db2 	.word	0x08003db2
 80037ac:	00000000 	.word	0x00000000
 80037b0:	0800355f 	.word	0x0800355f
 80037b4:	08003dae 	.word	0x08003dae

080037b8 <_printf_common>:
 80037b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037bc:	4616      	mov	r6, r2
 80037be:	4699      	mov	r9, r3
 80037c0:	688a      	ldr	r2, [r1, #8]
 80037c2:	690b      	ldr	r3, [r1, #16]
 80037c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bfb8      	it	lt
 80037cc:	4613      	movlt	r3, r2
 80037ce:	6033      	str	r3, [r6, #0]
 80037d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037d4:	4607      	mov	r7, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	b10a      	cbz	r2, 80037de <_printf_common+0x26>
 80037da:	3301      	adds	r3, #1
 80037dc:	6033      	str	r3, [r6, #0]
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	0699      	lsls	r1, r3, #26
 80037e2:	bf42      	ittt	mi
 80037e4:	6833      	ldrmi	r3, [r6, #0]
 80037e6:	3302      	addmi	r3, #2
 80037e8:	6033      	strmi	r3, [r6, #0]
 80037ea:	6825      	ldr	r5, [r4, #0]
 80037ec:	f015 0506 	ands.w	r5, r5, #6
 80037f0:	d106      	bne.n	8003800 <_printf_common+0x48>
 80037f2:	f104 0a19 	add.w	sl, r4, #25
 80037f6:	68e3      	ldr	r3, [r4, #12]
 80037f8:	6832      	ldr	r2, [r6, #0]
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	42ab      	cmp	r3, r5
 80037fe:	dc26      	bgt.n	800384e <_printf_common+0x96>
 8003800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003804:	1e13      	subs	r3, r2, #0
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	bf18      	it	ne
 800380a:	2301      	movne	r3, #1
 800380c:	0692      	lsls	r2, r2, #26
 800380e:	d42b      	bmi.n	8003868 <_printf_common+0xb0>
 8003810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003814:	4649      	mov	r1, r9
 8003816:	4638      	mov	r0, r7
 8003818:	47c0      	blx	r8
 800381a:	3001      	adds	r0, #1
 800381c:	d01e      	beq.n	800385c <_printf_common+0xa4>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	6922      	ldr	r2, [r4, #16]
 8003822:	f003 0306 	and.w	r3, r3, #6
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf02      	ittt	eq
 800382a:	68e5      	ldreq	r5, [r4, #12]
 800382c:	6833      	ldreq	r3, [r6, #0]
 800382e:	1aed      	subeq	r5, r5, r3
 8003830:	68a3      	ldr	r3, [r4, #8]
 8003832:	bf0c      	ite	eq
 8003834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003838:	2500      	movne	r5, #0
 800383a:	4293      	cmp	r3, r2
 800383c:	bfc4      	itt	gt
 800383e:	1a9b      	subgt	r3, r3, r2
 8003840:	18ed      	addgt	r5, r5, r3
 8003842:	2600      	movs	r6, #0
 8003844:	341a      	adds	r4, #26
 8003846:	42b5      	cmp	r5, r6
 8003848:	d11a      	bne.n	8003880 <_printf_common+0xc8>
 800384a:	2000      	movs	r0, #0
 800384c:	e008      	b.n	8003860 <_printf_common+0xa8>
 800384e:	2301      	movs	r3, #1
 8003850:	4652      	mov	r2, sl
 8003852:	4649      	mov	r1, r9
 8003854:	4638      	mov	r0, r7
 8003856:	47c0      	blx	r8
 8003858:	3001      	adds	r0, #1
 800385a:	d103      	bne.n	8003864 <_printf_common+0xac>
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003864:	3501      	adds	r5, #1
 8003866:	e7c6      	b.n	80037f6 <_printf_common+0x3e>
 8003868:	18e1      	adds	r1, r4, r3
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	2030      	movs	r0, #48	; 0x30
 800386e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003872:	4422      	add	r2, r4
 8003874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800387c:	3302      	adds	r3, #2
 800387e:	e7c7      	b.n	8003810 <_printf_common+0x58>
 8003880:	2301      	movs	r3, #1
 8003882:	4622      	mov	r2, r4
 8003884:	4649      	mov	r1, r9
 8003886:	4638      	mov	r0, r7
 8003888:	47c0      	blx	r8
 800388a:	3001      	adds	r0, #1
 800388c:	d0e6      	beq.n	800385c <_printf_common+0xa4>
 800388e:	3601      	adds	r6, #1
 8003890:	e7d9      	b.n	8003846 <_printf_common+0x8e>
	...

08003894 <_printf_i>:
 8003894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	7e0f      	ldrb	r7, [r1, #24]
 800389a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800389c:	2f78      	cmp	r7, #120	; 0x78
 800389e:	4691      	mov	r9, r2
 80038a0:	4680      	mov	r8, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	469a      	mov	sl, r3
 80038a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038aa:	d807      	bhi.n	80038bc <_printf_i+0x28>
 80038ac:	2f62      	cmp	r7, #98	; 0x62
 80038ae:	d80a      	bhi.n	80038c6 <_printf_i+0x32>
 80038b0:	2f00      	cmp	r7, #0
 80038b2:	f000 80d4 	beq.w	8003a5e <_printf_i+0x1ca>
 80038b6:	2f58      	cmp	r7, #88	; 0x58
 80038b8:	f000 80c0 	beq.w	8003a3c <_printf_i+0x1a8>
 80038bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038c4:	e03a      	b.n	800393c <_printf_i+0xa8>
 80038c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ca:	2b15      	cmp	r3, #21
 80038cc:	d8f6      	bhi.n	80038bc <_printf_i+0x28>
 80038ce:	a101      	add	r1, pc, #4	; (adr r1, 80038d4 <_printf_i+0x40>)
 80038d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038d4:	0800392d 	.word	0x0800392d
 80038d8:	08003941 	.word	0x08003941
 80038dc:	080038bd 	.word	0x080038bd
 80038e0:	080038bd 	.word	0x080038bd
 80038e4:	080038bd 	.word	0x080038bd
 80038e8:	080038bd 	.word	0x080038bd
 80038ec:	08003941 	.word	0x08003941
 80038f0:	080038bd 	.word	0x080038bd
 80038f4:	080038bd 	.word	0x080038bd
 80038f8:	080038bd 	.word	0x080038bd
 80038fc:	080038bd 	.word	0x080038bd
 8003900:	08003a45 	.word	0x08003a45
 8003904:	0800396d 	.word	0x0800396d
 8003908:	080039ff 	.word	0x080039ff
 800390c:	080038bd 	.word	0x080038bd
 8003910:	080038bd 	.word	0x080038bd
 8003914:	08003a67 	.word	0x08003a67
 8003918:	080038bd 	.word	0x080038bd
 800391c:	0800396d 	.word	0x0800396d
 8003920:	080038bd 	.word	0x080038bd
 8003924:	080038bd 	.word	0x080038bd
 8003928:	08003a07 	.word	0x08003a07
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	1d1a      	adds	r2, r3, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	602a      	str	r2, [r5, #0]
 8003934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800393c:	2301      	movs	r3, #1
 800393e:	e09f      	b.n	8003a80 <_printf_i+0x1ec>
 8003940:	6820      	ldr	r0, [r4, #0]
 8003942:	682b      	ldr	r3, [r5, #0]
 8003944:	0607      	lsls	r7, r0, #24
 8003946:	f103 0104 	add.w	r1, r3, #4
 800394a:	6029      	str	r1, [r5, #0]
 800394c:	d501      	bpl.n	8003952 <_printf_i+0xbe>
 800394e:	681e      	ldr	r6, [r3, #0]
 8003950:	e003      	b.n	800395a <_printf_i+0xc6>
 8003952:	0646      	lsls	r6, r0, #25
 8003954:	d5fb      	bpl.n	800394e <_printf_i+0xba>
 8003956:	f9b3 6000 	ldrsh.w	r6, [r3]
 800395a:	2e00      	cmp	r6, #0
 800395c:	da03      	bge.n	8003966 <_printf_i+0xd2>
 800395e:	232d      	movs	r3, #45	; 0x2d
 8003960:	4276      	negs	r6, r6
 8003962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003966:	485a      	ldr	r0, [pc, #360]	; (8003ad0 <_printf_i+0x23c>)
 8003968:	230a      	movs	r3, #10
 800396a:	e012      	b.n	8003992 <_printf_i+0xfe>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	6820      	ldr	r0, [r4, #0]
 8003970:	1d19      	adds	r1, r3, #4
 8003972:	6029      	str	r1, [r5, #0]
 8003974:	0605      	lsls	r5, r0, #24
 8003976:	d501      	bpl.n	800397c <_printf_i+0xe8>
 8003978:	681e      	ldr	r6, [r3, #0]
 800397a:	e002      	b.n	8003982 <_printf_i+0xee>
 800397c:	0641      	lsls	r1, r0, #25
 800397e:	d5fb      	bpl.n	8003978 <_printf_i+0xe4>
 8003980:	881e      	ldrh	r6, [r3, #0]
 8003982:	4853      	ldr	r0, [pc, #332]	; (8003ad0 <_printf_i+0x23c>)
 8003984:	2f6f      	cmp	r7, #111	; 0x6f
 8003986:	bf0c      	ite	eq
 8003988:	2308      	moveq	r3, #8
 800398a:	230a      	movne	r3, #10
 800398c:	2100      	movs	r1, #0
 800398e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003992:	6865      	ldr	r5, [r4, #4]
 8003994:	60a5      	str	r5, [r4, #8]
 8003996:	2d00      	cmp	r5, #0
 8003998:	bfa2      	ittt	ge
 800399a:	6821      	ldrge	r1, [r4, #0]
 800399c:	f021 0104 	bicge.w	r1, r1, #4
 80039a0:	6021      	strge	r1, [r4, #0]
 80039a2:	b90e      	cbnz	r6, 80039a8 <_printf_i+0x114>
 80039a4:	2d00      	cmp	r5, #0
 80039a6:	d04b      	beq.n	8003a40 <_printf_i+0x1ac>
 80039a8:	4615      	mov	r5, r2
 80039aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80039ae:	fb03 6711 	mls	r7, r3, r1, r6
 80039b2:	5dc7      	ldrb	r7, [r0, r7]
 80039b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039b8:	4637      	mov	r7, r6
 80039ba:	42bb      	cmp	r3, r7
 80039bc:	460e      	mov	r6, r1
 80039be:	d9f4      	bls.n	80039aa <_printf_i+0x116>
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d10b      	bne.n	80039dc <_printf_i+0x148>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	07de      	lsls	r6, r3, #31
 80039c8:	d508      	bpl.n	80039dc <_printf_i+0x148>
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	6861      	ldr	r1, [r4, #4]
 80039ce:	4299      	cmp	r1, r3
 80039d0:	bfde      	ittt	le
 80039d2:	2330      	movle	r3, #48	; 0x30
 80039d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039dc:	1b52      	subs	r2, r2, r5
 80039de:	6122      	str	r2, [r4, #16]
 80039e0:	f8cd a000 	str.w	sl, [sp]
 80039e4:	464b      	mov	r3, r9
 80039e6:	aa03      	add	r2, sp, #12
 80039e8:	4621      	mov	r1, r4
 80039ea:	4640      	mov	r0, r8
 80039ec:	f7ff fee4 	bl	80037b8 <_printf_common>
 80039f0:	3001      	adds	r0, #1
 80039f2:	d14a      	bne.n	8003a8a <_printf_i+0x1f6>
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	b004      	add	sp, #16
 80039fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	f043 0320 	orr.w	r3, r3, #32
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	4833      	ldr	r0, [pc, #204]	; (8003ad4 <_printf_i+0x240>)
 8003a08:	2778      	movs	r7, #120	; 0x78
 8003a0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	6829      	ldr	r1, [r5, #0]
 8003a12:	061f      	lsls	r7, r3, #24
 8003a14:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a18:	d402      	bmi.n	8003a20 <_printf_i+0x18c>
 8003a1a:	065f      	lsls	r7, r3, #25
 8003a1c:	bf48      	it	mi
 8003a1e:	b2b6      	uxthmi	r6, r6
 8003a20:	07df      	lsls	r7, r3, #31
 8003a22:	bf48      	it	mi
 8003a24:	f043 0320 	orrmi.w	r3, r3, #32
 8003a28:	6029      	str	r1, [r5, #0]
 8003a2a:	bf48      	it	mi
 8003a2c:	6023      	strmi	r3, [r4, #0]
 8003a2e:	b91e      	cbnz	r6, 8003a38 <_printf_i+0x1a4>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	f023 0320 	bic.w	r3, r3, #32
 8003a36:	6023      	str	r3, [r4, #0]
 8003a38:	2310      	movs	r3, #16
 8003a3a:	e7a7      	b.n	800398c <_printf_i+0xf8>
 8003a3c:	4824      	ldr	r0, [pc, #144]	; (8003ad0 <_printf_i+0x23c>)
 8003a3e:	e7e4      	b.n	8003a0a <_printf_i+0x176>
 8003a40:	4615      	mov	r5, r2
 8003a42:	e7bd      	b.n	80039c0 <_printf_i+0x12c>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	6826      	ldr	r6, [r4, #0]
 8003a48:	6961      	ldr	r1, [r4, #20]
 8003a4a:	1d18      	adds	r0, r3, #4
 8003a4c:	6028      	str	r0, [r5, #0]
 8003a4e:	0635      	lsls	r5, r6, #24
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	d501      	bpl.n	8003a58 <_printf_i+0x1c4>
 8003a54:	6019      	str	r1, [r3, #0]
 8003a56:	e002      	b.n	8003a5e <_printf_i+0x1ca>
 8003a58:	0670      	lsls	r0, r6, #25
 8003a5a:	d5fb      	bpl.n	8003a54 <_printf_i+0x1c0>
 8003a5c:	8019      	strh	r1, [r3, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6123      	str	r3, [r4, #16]
 8003a62:	4615      	mov	r5, r2
 8003a64:	e7bc      	b.n	80039e0 <_printf_i+0x14c>
 8003a66:	682b      	ldr	r3, [r5, #0]
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	602a      	str	r2, [r5, #0]
 8003a6c:	681d      	ldr	r5, [r3, #0]
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	2100      	movs	r1, #0
 8003a72:	4628      	mov	r0, r5
 8003a74:	f7fc fbb4 	bl	80001e0 <memchr>
 8003a78:	b108      	cbz	r0, 8003a7e <_printf_i+0x1ea>
 8003a7a:	1b40      	subs	r0, r0, r5
 8003a7c:	6060      	str	r0, [r4, #4]
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	6123      	str	r3, [r4, #16]
 8003a82:	2300      	movs	r3, #0
 8003a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a88:	e7aa      	b.n	80039e0 <_printf_i+0x14c>
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	462a      	mov	r2, r5
 8003a8e:	4649      	mov	r1, r9
 8003a90:	4640      	mov	r0, r8
 8003a92:	47d0      	blx	sl
 8003a94:	3001      	adds	r0, #1
 8003a96:	d0ad      	beq.n	80039f4 <_printf_i+0x160>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	079b      	lsls	r3, r3, #30
 8003a9c:	d413      	bmi.n	8003ac6 <_printf_i+0x232>
 8003a9e:	68e0      	ldr	r0, [r4, #12]
 8003aa0:	9b03      	ldr	r3, [sp, #12]
 8003aa2:	4298      	cmp	r0, r3
 8003aa4:	bfb8      	it	lt
 8003aa6:	4618      	movlt	r0, r3
 8003aa8:	e7a6      	b.n	80039f8 <_printf_i+0x164>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4632      	mov	r2, r6
 8003aae:	4649      	mov	r1, r9
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	47d0      	blx	sl
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d09d      	beq.n	80039f4 <_printf_i+0x160>
 8003ab8:	3501      	adds	r5, #1
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	9903      	ldr	r1, [sp, #12]
 8003abe:	1a5b      	subs	r3, r3, r1
 8003ac0:	42ab      	cmp	r3, r5
 8003ac2:	dcf2      	bgt.n	8003aaa <_printf_i+0x216>
 8003ac4:	e7eb      	b.n	8003a9e <_printf_i+0x20a>
 8003ac6:	2500      	movs	r5, #0
 8003ac8:	f104 0619 	add.w	r6, r4, #25
 8003acc:	e7f5      	b.n	8003aba <_printf_i+0x226>
 8003ace:	bf00      	nop
 8003ad0:	08003db9 	.word	0x08003db9
 8003ad4:	08003dca 	.word	0x08003dca

08003ad8 <__sflush_r>:
 8003ad8:	898a      	ldrh	r2, [r1, #12]
 8003ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	4605      	mov	r5, r0
 8003ae0:	0710      	lsls	r0, r2, #28
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	d458      	bmi.n	8003b98 <__sflush_r+0xc0>
 8003ae6:	684b      	ldr	r3, [r1, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	dc05      	bgt.n	8003af8 <__sflush_r+0x20>
 8003aec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	dc02      	bgt.n	8003af8 <__sflush_r+0x20>
 8003af2:	2000      	movs	r0, #0
 8003af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003afa:	2e00      	cmp	r6, #0
 8003afc:	d0f9      	beq.n	8003af2 <__sflush_r+0x1a>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b04:	682f      	ldr	r7, [r5, #0]
 8003b06:	6a21      	ldr	r1, [r4, #32]
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	d032      	beq.n	8003b72 <__sflush_r+0x9a>
 8003b0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	075a      	lsls	r2, r3, #29
 8003b12:	d505      	bpl.n	8003b20 <__sflush_r+0x48>
 8003b14:	6863      	ldr	r3, [r4, #4]
 8003b16:	1ac0      	subs	r0, r0, r3
 8003b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b1a:	b10b      	cbz	r3, 8003b20 <__sflush_r+0x48>
 8003b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b1e:	1ac0      	subs	r0, r0, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	4602      	mov	r2, r0
 8003b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b26:	6a21      	ldr	r1, [r4, #32]
 8003b28:	4628      	mov	r0, r5
 8003b2a:	47b0      	blx	r6
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	d106      	bne.n	8003b40 <__sflush_r+0x68>
 8003b32:	6829      	ldr	r1, [r5, #0]
 8003b34:	291d      	cmp	r1, #29
 8003b36:	d82b      	bhi.n	8003b90 <__sflush_r+0xb8>
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <__sflush_r+0x108>)
 8003b3a:	410a      	asrs	r2, r1
 8003b3c:	07d6      	lsls	r6, r2, #31
 8003b3e:	d427      	bmi.n	8003b90 <__sflush_r+0xb8>
 8003b40:	2200      	movs	r2, #0
 8003b42:	6062      	str	r2, [r4, #4]
 8003b44:	04d9      	lsls	r1, r3, #19
 8003b46:	6922      	ldr	r2, [r4, #16]
 8003b48:	6022      	str	r2, [r4, #0]
 8003b4a:	d504      	bpl.n	8003b56 <__sflush_r+0x7e>
 8003b4c:	1c42      	adds	r2, r0, #1
 8003b4e:	d101      	bne.n	8003b54 <__sflush_r+0x7c>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b903      	cbnz	r3, 8003b56 <__sflush_r+0x7e>
 8003b54:	6560      	str	r0, [r4, #84]	; 0x54
 8003b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b58:	602f      	str	r7, [r5, #0]
 8003b5a:	2900      	cmp	r1, #0
 8003b5c:	d0c9      	beq.n	8003af2 <__sflush_r+0x1a>
 8003b5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b62:	4299      	cmp	r1, r3
 8003b64:	d002      	beq.n	8003b6c <__sflush_r+0x94>
 8003b66:	4628      	mov	r0, r5
 8003b68:	f7ff fbea 	bl	8003340 <_free_r>
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b70:	e7c0      	b.n	8003af4 <__sflush_r+0x1c>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b0      	blx	r6
 8003b78:	1c41      	adds	r1, r0, #1
 8003b7a:	d1c8      	bne.n	8003b0e <__sflush_r+0x36>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0c5      	beq.n	8003b0e <__sflush_r+0x36>
 8003b82:	2b1d      	cmp	r3, #29
 8003b84:	d001      	beq.n	8003b8a <__sflush_r+0xb2>
 8003b86:	2b16      	cmp	r3, #22
 8003b88:	d101      	bne.n	8003b8e <__sflush_r+0xb6>
 8003b8a:	602f      	str	r7, [r5, #0]
 8003b8c:	e7b1      	b.n	8003af2 <__sflush_r+0x1a>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	e7ad      	b.n	8003af4 <__sflush_r+0x1c>
 8003b98:	690f      	ldr	r7, [r1, #16]
 8003b9a:	2f00      	cmp	r7, #0
 8003b9c:	d0a9      	beq.n	8003af2 <__sflush_r+0x1a>
 8003b9e:	0793      	lsls	r3, r2, #30
 8003ba0:	680e      	ldr	r6, [r1, #0]
 8003ba2:	bf08      	it	eq
 8003ba4:	694b      	ldreq	r3, [r1, #20]
 8003ba6:	600f      	str	r7, [r1, #0]
 8003ba8:	bf18      	it	ne
 8003baa:	2300      	movne	r3, #0
 8003bac:	eba6 0807 	sub.w	r8, r6, r7
 8003bb0:	608b      	str	r3, [r1, #8]
 8003bb2:	f1b8 0f00 	cmp.w	r8, #0
 8003bb6:	dd9c      	ble.n	8003af2 <__sflush_r+0x1a>
 8003bb8:	6a21      	ldr	r1, [r4, #32]
 8003bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bbc:	4643      	mov	r3, r8
 8003bbe:	463a      	mov	r2, r7
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	47b0      	blx	r6
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	dc06      	bgt.n	8003bd6 <__sflush_r+0xfe>
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	e78e      	b.n	8003af4 <__sflush_r+0x1c>
 8003bd6:	4407      	add	r7, r0
 8003bd8:	eba8 0800 	sub.w	r8, r8, r0
 8003bdc:	e7e9      	b.n	8003bb2 <__sflush_r+0xda>
 8003bde:	bf00      	nop
 8003be0:	dfbffffe 	.word	0xdfbffffe

08003be4 <_fflush_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	690b      	ldr	r3, [r1, #16]
 8003be8:	4605      	mov	r5, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	b913      	cbnz	r3, 8003bf4 <_fflush_r+0x10>
 8003bee:	2500      	movs	r5, #0
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	b118      	cbz	r0, 8003bfe <_fflush_r+0x1a>
 8003bf6:	6a03      	ldr	r3, [r0, #32]
 8003bf8:	b90b      	cbnz	r3, 8003bfe <_fflush_r+0x1a>
 8003bfa:	f7ff f9a9 	bl	8002f50 <__sinit>
 8003bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f3      	beq.n	8003bee <_fflush_r+0xa>
 8003c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c08:	07d0      	lsls	r0, r2, #31
 8003c0a:	d404      	bmi.n	8003c16 <_fflush_r+0x32>
 8003c0c:	0599      	lsls	r1, r3, #22
 8003c0e:	d402      	bmi.n	8003c16 <_fflush_r+0x32>
 8003c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c12:	f7ff fb92 	bl	800333a <__retarget_lock_acquire_recursive>
 8003c16:	4628      	mov	r0, r5
 8003c18:	4621      	mov	r1, r4
 8003c1a:	f7ff ff5d 	bl	8003ad8 <__sflush_r>
 8003c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c20:	07da      	lsls	r2, r3, #31
 8003c22:	4605      	mov	r5, r0
 8003c24:	d4e4      	bmi.n	8003bf0 <_fflush_r+0xc>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	059b      	lsls	r3, r3, #22
 8003c2a:	d4e1      	bmi.n	8003bf0 <_fflush_r+0xc>
 8003c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c2e:	f7ff fb85 	bl	800333c <__retarget_lock_release_recursive>
 8003c32:	e7dd      	b.n	8003bf0 <_fflush_r+0xc>

08003c34 <__swhatbuf_r>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	460c      	mov	r4, r1
 8003c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3c:	2900      	cmp	r1, #0
 8003c3e:	b096      	sub	sp, #88	; 0x58
 8003c40:	4615      	mov	r5, r2
 8003c42:	461e      	mov	r6, r3
 8003c44:	da0d      	bge.n	8003c62 <__swhatbuf_r+0x2e>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	bf0c      	ite	eq
 8003c52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003c56:	2340      	movne	r3, #64	; 0x40
 8003c58:	2000      	movs	r0, #0
 8003c5a:	6031      	str	r1, [r6, #0]
 8003c5c:	602b      	str	r3, [r5, #0]
 8003c5e:	b016      	add	sp, #88	; 0x58
 8003c60:	bd70      	pop	{r4, r5, r6, pc}
 8003c62:	466a      	mov	r2, sp
 8003c64:	f000 f848 	bl	8003cf8 <_fstat_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	dbec      	blt.n	8003c46 <__swhatbuf_r+0x12>
 8003c6c:	9901      	ldr	r1, [sp, #4]
 8003c6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003c72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003c76:	4259      	negs	r1, r3
 8003c78:	4159      	adcs	r1, r3
 8003c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c7e:	e7eb      	b.n	8003c58 <__swhatbuf_r+0x24>

08003c80 <__smakebuf_r>:
 8003c80:	898b      	ldrh	r3, [r1, #12]
 8003c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c84:	079d      	lsls	r5, r3, #30
 8003c86:	4606      	mov	r6, r0
 8003c88:	460c      	mov	r4, r1
 8003c8a:	d507      	bpl.n	8003c9c <__smakebuf_r+0x1c>
 8003c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	6123      	str	r3, [r4, #16]
 8003c94:	2301      	movs	r3, #1
 8003c96:	6163      	str	r3, [r4, #20]
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	ab01      	add	r3, sp, #4
 8003c9e:	466a      	mov	r2, sp
 8003ca0:	f7ff ffc8 	bl	8003c34 <__swhatbuf_r>
 8003ca4:	9900      	ldr	r1, [sp, #0]
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f7ff fbb5 	bl	8003418 <_malloc_r>
 8003cae:	b948      	cbnz	r0, 8003cc4 <__smakebuf_r+0x44>
 8003cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cb4:	059a      	lsls	r2, r3, #22
 8003cb6:	d4ef      	bmi.n	8003c98 <__smakebuf_r+0x18>
 8003cb8:	f023 0303 	bic.w	r3, r3, #3
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	e7e3      	b.n	8003c8c <__smakebuf_r+0xc>
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	6020      	str	r0, [r4, #0]
 8003cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ccc:	81a3      	strh	r3, [r4, #12]
 8003cce:	9b00      	ldr	r3, [sp, #0]
 8003cd0:	6163      	str	r3, [r4, #20]
 8003cd2:	9b01      	ldr	r3, [sp, #4]
 8003cd4:	6120      	str	r0, [r4, #16]
 8003cd6:	b15b      	cbz	r3, 8003cf0 <__smakebuf_r+0x70>
 8003cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f000 f81d 	bl	8003d1c <_isatty_r>
 8003ce2:	b128      	cbz	r0, 8003cf0 <__smakebuf_r+0x70>
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	f023 0303 	bic.w	r3, r3, #3
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	81a3      	strh	r3, [r4, #12]
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	431d      	orrs	r5, r3
 8003cf4:	81a5      	strh	r5, [r4, #12]
 8003cf6:	e7cf      	b.n	8003c98 <__smakebuf_r+0x18>

08003cf8 <_fstat_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4d07      	ldr	r5, [pc, #28]	; (8003d18 <_fstat_r+0x20>)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4604      	mov	r4, r0
 8003d00:	4608      	mov	r0, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	f7fc ff36 	bl	8000b76 <_fstat>
 8003d0a:	1c43      	adds	r3, r0, #1
 8003d0c:	d102      	bne.n	8003d14 <_fstat_r+0x1c>
 8003d0e:	682b      	ldr	r3, [r5, #0]
 8003d10:	b103      	cbz	r3, 8003d14 <_fstat_r+0x1c>
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	bd38      	pop	{r3, r4, r5, pc}
 8003d16:	bf00      	nop
 8003d18:	2000025c 	.word	0x2000025c

08003d1c <_isatty_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4d06      	ldr	r5, [pc, #24]	; (8003d38 <_isatty_r+0x1c>)
 8003d20:	2300      	movs	r3, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	602b      	str	r3, [r5, #0]
 8003d28:	f7fc ff35 	bl	8000b96 <_isatty>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d102      	bne.n	8003d36 <_isatty_r+0x1a>
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	b103      	cbz	r3, 8003d36 <_isatty_r+0x1a>
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	bd38      	pop	{r3, r4, r5, pc}
 8003d38:	2000025c 	.word	0x2000025c

08003d3c <_sbrk_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4d06      	ldr	r5, [pc, #24]	; (8003d58 <_sbrk_r+0x1c>)
 8003d40:	2300      	movs	r3, #0
 8003d42:	4604      	mov	r4, r0
 8003d44:	4608      	mov	r0, r1
 8003d46:	602b      	str	r3, [r5, #0]
 8003d48:	f7fc ff3e 	bl	8000bc8 <_sbrk>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d102      	bne.n	8003d56 <_sbrk_r+0x1a>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	b103      	cbz	r3, 8003d56 <_sbrk_r+0x1a>
 8003d54:	6023      	str	r3, [r4, #0]
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
 8003d58:	2000025c 	.word	0x2000025c

08003d5c <_init>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	bf00      	nop
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr

08003d68 <_fini>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	bf00      	nop
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr
