
stepper_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ddc  08005ddc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de4  08005de4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000074  08005e60  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08005e60  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc05  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f84  00000000  00000000  0002dcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  0002fc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9a  00000000  00000000  00030a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017143  00000000  00000000  0003149a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efd7  00000000  00000000  000485dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f704  00000000  00000000  000575b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040f4  00000000  00000000  000e6cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000eadac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c30 	.word	0x08005c30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005c30 	.word	0x08005c30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_GPIO_EXTI_Callback>:
int PAN_STOP = 302;
int PAN_UP = 310;
int PAN_DOWN = 295;


void HAL_GPIO_EXTI_Callback(uint16_t pin){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	if(pin == GPIO_PIN_12 || pin == GPIO_PIN_13 || pin == GPIO_PIN_14 || pin == GPIO_PIN_15){
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800058c:	d00b      	beq.n	80005a6 <HAL_GPIO_EXTI_Callback+0x2a>
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000594:	d007      	beq.n	80005a6 <HAL_GPIO_EXTI_Callback+0x2a>
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800059c:	d003      	beq.n	80005a6 <HAL_GPIO_EXTI_Callback+0x2a>
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005a4:	d102      	bne.n	80005ac <HAL_GPIO_EXTI_Callback+0x30>
		HAL_TIM_Base_Start_IT(&htim5);
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x38>)
 80005a8:	f002 fb34 	bl	8002c14 <HAL_TIM_Base_Start_IT>
	}
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000168 	.word	0x20000168

080005b8 <set_forward_dir>:
	HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 0);
	HAL_Delay(5);
}

void set_forward_dir()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <set_forward_dir+0x34>)
 80005c4:	f001 fe0c 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <set_forward_dir+0x34>)
 80005ce:	f001 fe07 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <set_forward_dir+0x34>)
 80005d8:	f001 fe02 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <set_forward_dir+0x34>)
 80005e2:	f001 fdfd 	bl	80021e0 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020400 	.word	0x40020400

080005f0 <set_backward_dir>:
void set_backward_dir()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <set_backward_dir+0x34>)
 80005fc:	f001 fdf0 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <set_backward_dir+0x34>)
 8000606:	f001 fdeb 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 800060a:	2201      	movs	r2, #1
 800060c:	2120      	movs	r1, #32
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <set_backward_dir+0x34>)
 8000610:	f001 fde6 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 8000614:	2201      	movs	r2, #1
 8000616:	2108      	movs	r1, #8
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <set_backward_dir+0x34>)
 800061a:	f001 fde1 	bl	80021e0 <HAL_GPIO_WritePin>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020400 	.word	0x40020400

08000628 <set_left_dir>:
void set_left_dir()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <set_left_dir+0x34>)
 8000634:	f001 fdd4 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2110      	movs	r1, #16
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <set_left_dir+0x34>)
 800063e:	f001 fdcf 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 8000642:	2200      	movs	r2, #0
 8000644:	2120      	movs	r1, #32
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <set_left_dir+0x34>)
 8000648:	f001 fdca 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 800064c:	2201      	movs	r2, #1
 800064e:	2108      	movs	r1, #8
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <set_left_dir+0x34>)
 8000652:	f001 fdc5 	bl	80021e0 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020400 	.word	0x40020400

08000660 <set_right_dir>:
void set_right_dir()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <set_right_dir+0x34>)
 800066c:	f001 fdb8 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2110      	movs	r1, #16
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <set_right_dir+0x34>)
 8000676:	f001 fdb3 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <set_right_dir+0x34>)
 8000680:	f001 fdae 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <set_right_dir+0x34>)
 800068a:	f001 fda9 	bl	80021e0 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020400 	.word	0x40020400

08000698 <set_ccw_dir>:
void set_ccw_dir()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <set_ccw_dir+0x34>)
 80006a4:	f001 fd9c 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <set_ccw_dir+0x34>)
 80006ae:	f001 fd97 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2120      	movs	r1, #32
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <set_ccw_dir+0x34>)
 80006b8:	f001 fd92 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 80006bc:	2200      	movs	r2, #0
 80006be:	2108      	movs	r1, #8
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <set_ccw_dir+0x34>)
 80006c2:	f001 fd8d 	bl	80021e0 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020400 	.word	0x40020400

080006d0 <set_cw_dir>:
void set_cw_dir()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006da:	480a      	ldr	r0, [pc, #40]	; (8000704 <set_cw_dir+0x34>)
 80006dc:	f001 fd80 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2110      	movs	r1, #16
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <set_cw_dir+0x34>)
 80006e6:	f001 fd7b 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2120      	movs	r1, #32
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <set_cw_dir+0x34>)
 80006f0:	f001 fd76 	bl	80021e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2108      	movs	r1, #8
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <set_cw_dir+0x34>)
 80006fa:	f001 fd71 	bl	80021e0 <HAL_GPIO_WritePin>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40020400 	.word	0x40020400

08000708 <enable>:

static int steps_left = 0;
static int disabled = 0;
void enable()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4802      	ldr	r0, [pc, #8]	; (800071c <enable+0x14>)
 8000714:	f001 fd64 	bl	80021e0 <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020000 	.word	0x40020000

08000720 <disable>:
void disable()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <disable+0x14>)
 800072c:	f001 fd58 	bl	80021e0 <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020000 	.word	0x40020000

08000738 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	static int dir = 0;

    if (htim->Instance == TIM11) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d155      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0xbe>
    	int disable_next = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
    	if (steps_left > 0)
 800074e:	4b6b      	ldr	r3, [pc, #428]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	dd2c      	ble.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0x78>
    	{
    		enable();
 8000756:	f7ff ffd7 	bl	8000708 <enable>
    		if (stepState)
 800075a:	4b69      	ldr	r3, [pc, #420]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00a      	beq.n	8000778 <HAL_TIM_PeriodElapsedCallback+0x40>
    		{
    			steps_left--;
 8000762:	4b66      	ldr	r3, [pc, #408]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	4a64      	ldr	r2, [pc, #400]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800076a:	6013      	str	r3, [r2, #0]
    			if (steps_left == 0)
 800076c:	4b63      	ldr	r3, [pc, #396]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d101      	bne.n	8000778 <HAL_TIM_PeriodElapsedCallback+0x40>
    			{
    				disable_next = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
    			}
    		}
    		switch(dir)
 8000778:	4b62      	ldr	r3, [pc, #392]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d817      	bhi.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000780:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000786:	bf00      	nop
 8000788:	08000799 	.word	0x08000799
 800078c:	0800079f 	.word	0x0800079f
 8000790:	080007a5 	.word	0x080007a5
 8000794:	080007ab 	.word	0x080007ab
    		{
    		case 0:
    			set_forward_dir();
 8000798:	f7ff ff0e 	bl	80005b8 <set_forward_dir>
    			break;
 800079c:	e008      	b.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0x78>
    		case 1:
    			set_backward_dir();
 800079e:	f7ff ff27 	bl	80005f0 <set_backward_dir>
    			break;
 80007a2:	e005      	b.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0x78>
    		case 2:
    			set_left_dir();
 80007a4:	f7ff ff40 	bl	8000628 <set_left_dir>
    			break;
 80007a8:	e002      	b.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0x78>
    		case 3:
    			set_right_dir();
 80007aa:	f7ff ff59 	bl	8000660 <set_right_dir>
    			break;
 80007ae:	bf00      	nop
    		}
    	}
		HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, stepState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007b0:	4b53      	ldr	r3, [pc, #332]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4851      	ldr	r0, [pc, #324]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80007c4:	f001 fd0c 	bl	80021e0 <HAL_GPIO_WritePin>
    	stepState = !stepState;
 80007c8:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf0c      	ite	eq
 80007d0:	2301      	moveq	r3, #1
 80007d2:	2300      	movne	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b49      	ldr	r3, [pc, #292]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80007da:	601a      	str	r2, [r3, #0]
    	if (disable_next)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f000 8086 	beq.w	80008f0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
    	{
    		disable();
 80007e4:	f7ff ff9c 	bl	8000720 <disable>
    		disabled = 1;
 80007e8:	4b48      	ldr	r3, [pc, #288]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
    		HAL_TIM_Base_Stop_IT(&htim11);
 80007ee:	4848      	ldr	r0, [pc, #288]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80007f0:	f002 fa72 	bl	8002cd8 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim11);
			}
		}
		HAL_TIM_Base_Stop_IT(&htim5);
	}
}
 80007f4:	e07c      	b.n	80008f0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
    else if (htim->Instance == TIM10)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a46      	ldr	r2, [pc, #280]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d108      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0xda>
    	TIM2->CCR1 = PINCH_BACKWARD_CCR;
 8000800:	4b45      	ldr	r3, [pc, #276]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
    	HAL_TIM_Base_Stop_IT(&htim10);
 800080a:	4844      	ldr	r0, [pc, #272]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800080c:	f002 fa64 	bl	8002cd8 <HAL_TIM_Base_Stop_IT>
}
 8000810:	e06e      	b.n	80008f0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
    else if(htim->Instance == TIM5){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a42      	ldr	r2, [pc, #264]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d169      	bne.n	80008f0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		GPIO_PinState ultra1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800081c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000820:	4840      	ldr	r0, [pc, #256]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000822:	f001 fcc5 	bl	80021b0 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	72fb      	strb	r3, [r7, #11]
		GPIO_PinState ultra2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800082a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082e:	483d      	ldr	r0, [pc, #244]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000830:	f001 fcbe 	bl	80021b0 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	72bb      	strb	r3, [r7, #10]
		GPIO_PinState ultra3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083c:	4839      	ldr	r0, [pc, #228]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800083e:	f001 fcb7 	bl	80021b0 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	727b      	strb	r3, [r7, #9]
		GPIO_PinState ultra4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	4836      	ldr	r0, [pc, #216]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800084c:	f001 fcb0 	bl	80021b0 <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	723b      	strb	r3, [r7, #8]
		if (steps_left == 0)
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d146      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x1b2>
			if(ultra1){
 800085c:	7afb      	ldrb	r3, [r7, #11]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00e      	beq.n	8000880 <HAL_TIM_PeriodElapsedCallback+0x148>
				 set_forward_dir();
 8000862:	f7ff fea9 	bl	80005b8 <set_forward_dir>
				 dir = 0;
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
				 steps_left = 50;
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800086e:	2232      	movs	r2, #50	; 0x32
 8000870:	601a      	str	r2, [r3, #0]
				printf("1\n");
 8000872:	482d      	ldr	r0, [pc, #180]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000874:	f004 fb72 	bl	8004f5c <puts>
				HAL_TIM_Base_Start_IT(&htim11);
 8000878:	4825      	ldr	r0, [pc, #148]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800087a:	f002 f9cb 	bl	8002c14 <HAL_TIM_Base_Start_IT>
 800087e:	e034      	b.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x1b2>
			else if(ultra2){
 8000880:	7abb      	ldrb	r3, [r7, #10]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00e      	beq.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x16c>
				set_left_dir();
 8000886:	f7ff fecf 	bl	8000628 <set_left_dir>
				dir = 3;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800088c:	2203      	movs	r2, #3
 800088e:	601a      	str	r2, [r3, #0]
				steps_left = 50;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000892:	2232      	movs	r2, #50	; 0x32
 8000894:	601a      	str	r2, [r3, #0]
				printf("2\n");
 8000896:	4825      	ldr	r0, [pc, #148]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000898:	f004 fb60 	bl	8004f5c <puts>
				HAL_TIM_Base_Start_IT(&htim11);
 800089c:	481c      	ldr	r0, [pc, #112]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800089e:	f002 f9b9 	bl	8002c14 <HAL_TIM_Base_Start_IT>
 80008a2:	e022      	b.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x1b2>
			else if(ultra3){
 80008a4:	7a7b      	ldrb	r3, [r7, #9]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00e      	beq.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x190>
				set_backward_dir();
 80008aa:	f7ff fea1 	bl	80005f0 <set_backward_dir>
				dir = 1;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
				steps_left = 50;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80008b6:	2232      	movs	r2, #50	; 0x32
 80008b8:	601a      	str	r2, [r3, #0]
				printf("3\n");
 80008ba:	481d      	ldr	r0, [pc, #116]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008bc:	f004 fb4e 	bl	8004f5c <puts>
				HAL_TIM_Base_Start_IT(&htim11);
 80008c0:	4813      	ldr	r0, [pc, #76]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80008c2:	f002 f9a7 	bl	8002c14 <HAL_TIM_Base_Start_IT>
 80008c6:	e010      	b.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x1b2>
			else if(ultra4)
 80008c8:	7a3b      	ldrb	r3, [r7, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00d      	beq.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x1b2>
				set_right_dir();
 80008ce:	f7ff fec7 	bl	8000660 <set_right_dir>
				dir = 2;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	601a      	str	r2, [r3, #0]
				steps_left = 50;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80008da:	2232      	movs	r2, #50	; 0x32
 80008dc:	601a      	str	r2, [r3, #0]
				printf("4\n");
 80008de:	4815      	ldr	r0, [pc, #84]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80008e0:	f004 fb3c 	bl	8004f5c <puts>
				HAL_TIM_Base_Start_IT(&htim11);
 80008e4:	480a      	ldr	r0, [pc, #40]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80008e6:	f002 f995 	bl	8002c14 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim5);
 80008ea:	4813      	ldr	r0, [pc, #76]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80008ec:	f002 f9f4 	bl	8002cd8 <HAL_TIM_Base_Stop_IT>
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40014800 	.word	0x40014800
 80008fc:	200002dc 	.word	0x200002dc
 8000900:	200002d8 	.word	0x200002d8
 8000904:	200002e8 	.word	0x200002e8
 8000908:	40020000 	.word	0x40020000
 800090c:	200002e0 	.word	0x200002e0
 8000910:	200001f8 	.word	0x200001f8
 8000914:	40014400 	.word	0x40014400
 8000918:	20000008 	.word	0x20000008
 800091c:	200001b0 	.word	0x200001b0
 8000920:	40000c00 	.word	0x40000c00
 8000924:	40020400 	.word	0x40020400
 8000928:	08005c48 	.word	0x08005c48
 800092c:	08005c4c 	.word	0x08005c4c
 8000930:	08005c50 	.word	0x08005c50
 8000934:	08005c54 	.word	0x08005c54
 8000938:	20000168 	.word	0x20000168

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f001 f878 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f85a 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 fb14 	bl	8000f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800094c:	f000 fabe 	bl	8000ecc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000950:	f000 fae6 	bl	8000f20 <MX_USART6_UART_Init>
  MX_TIM11_Init();
 8000954:	f000 fa96 	bl	8000e84 <MX_TIM11_Init>
  MX_TIM2_Init();
 8000958:	f000 f8bc 	bl	8000ad4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800095c:	f000 f930 	bl	8000bc0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000960:	f000 fa6c 	bl	8000e3c <MX_TIM10_Init>
  MX_TIM4_Init();
 8000964:	f000 f9a4 	bl	8000cb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000968:	f000 fa1a 	bl	8000da0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  // HAL_TIM_Base_Start_IT(&htim10);
  HAL_UART_Receive_IT(&huart6, &answer, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	491a      	ldr	r1, [pc, #104]	; (80009d8 <main+0x9c>)
 8000970:	481a      	ldr	r0, [pc, #104]	; (80009dc <main+0xa0>)
 8000972:	f003 f9c0 	bl	8003cf6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &number, 1);
 8000976:	2201      	movs	r2, #1
 8000978:	4919      	ldr	r1, [pc, #100]	; (80009e0 <main+0xa4>)
 800097a:	481a      	ldr	r0, [pc, #104]	; (80009e4 <main+0xa8>)
 800097c:	f003 f9bb 	bl	8003cf6 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000980:	2100      	movs	r1, #0
 8000982:	4819      	ldr	r0, [pc, #100]	; (80009e8 <main+0xac>)
 8000984:	f002 fa30 	bl	8002de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000988:	2100      	movs	r1, #0
 800098a:	4818      	ldr	r0, [pc, #96]	; (80009ec <main+0xb0>)
 800098c:	f002 fa2c 	bl	8002de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4817      	ldr	r0, [pc, #92]	; (80009f0 <main+0xb4>)
 8000994:	f002 fa28 	bl	8002de8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
  HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099e:	4815      	ldr	r0, [pc, #84]	; (80009f4 <main+0xb8>)
 80009a0:	f001 fc1e 	bl	80021e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2110      	movs	r1, #16
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <main+0xb8>)
 80009aa:	f001 fc19 	bl	80021e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <main+0xb8>)
 80009b4:	f001 fc14 	bl	80021e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2108      	movs	r1, #8
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <main+0xb8>)
 80009be:	f001 fc0f 	bl	80021e0 <HAL_GPIO_WritePin>

  disable();
 80009c2:	f7ff fead 	bl	8000720 <disable>
  while (1)
  {
	  printf("hello world\n");
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <main+0xbc>)
 80009c8:	f004 fac8 	bl	8004f5c <puts>
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 1);
	  // HAL_Delay(100);
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 0);
	  // HAL_Delay(100);
	  HAL_Delay(1000);
 80009cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d0:	f001 f8a2 	bl	8001b18 <HAL_Delay>
	  printf("hello world\n");
 80009d4:	e7f7      	b.n	80009c6 <main+0x8a>
 80009d6:	bf00      	nop
 80009d8:	200002d0 	.word	0x200002d0
 80009dc:	20000288 	.word	0x20000288
 80009e0:	200002e4 	.word	0x200002e4
 80009e4:	20000240 	.word	0x20000240
 80009e8:	20000090 	.word	0x20000090
 80009ec:	200000d8 	.word	0x200000d8
 80009f0:	20000120 	.word	0x20000120
 80009f4:	40020400 	.word	0x40020400
 80009f8:	08005c58 	.word	0x08005c58

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 fb86 	bl	800511c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <SystemClock_Config+0xd0>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <SystemClock_Config+0xd0>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <SystemClock_Config+0xd0>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a70:	2310      	movs	r3, #16
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fbdc 	bl	8002244 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a92:	f000 fc7b 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fe3e 	bl	8002734 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000abe:	f000 fc65 	bl	800138c <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3750      	adds	r7, #80	; 0x50
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b04:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 419;
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b0e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b1c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b2e:	4823      	ldr	r0, [pc, #140]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b30:	f002 f820 	bl	8002b74 <HAL_TIM_Base_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b3a:	f000 fc27 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481c      	ldr	r0, [pc, #112]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b4c:	f002 fbae 	bl	80032ac <HAL_TIM_ConfigClockSource>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b56:	f000 fc19 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b5c:	f002 f8eb 	bl	8002d36 <HAL_TIM_PWM_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b66:	f000 fc11 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	4619      	mov	r1, r3
 8000b78:	4810      	ldr	r0, [pc, #64]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000b7a:	f002 ff5f 	bl	8003a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b84:	f000 fc02 	bl	800138c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b88:	2360      	movs	r3, #96	; 0x60
 8000b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000ba0:	f002 fac2 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000baa:	f000 fbef 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM2_Init+0xe8>)
 8000bb0:	f000 fcbe 	bl	8001530 <HAL_TIM_MspPostInit>

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	; 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000090 	.word	0x20000090

08000bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	615a      	str	r2, [r3, #20]
 8000bee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000bf2:	4a2e      	ldr	r2, [pc, #184]	; (8000cac <MX_TIM3_Init+0xec>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 419;
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000bf8:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000bfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c06:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c18:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c1a:	f001 ffab 	bl	8002b74 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c24:	f000 fbb2 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	4619      	mov	r1, r3
 8000c34:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c36:	f002 fb39 	bl	80032ac <HAL_TIM_ConfigClockSource>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c40:	f000 fba4 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c46:	f002 f876 	bl	8002d36 <HAL_TIM_PWM_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c50:	f000 fb9c 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	4619      	mov	r1, r3
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c64:	f002 feea 	bl	8003a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c6e:	f000 fb8d 	bl	800138c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c72:	2360      	movs	r3, #96	; 0x60
 8000c74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c8a:	f002 fa4d 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c94:	f000 fb7a 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c9a:	f000 fc49 	bl	8001530 <HAL_TIM_MspPostInit>

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000d8 	.word	0x200000d8
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	; 0x38
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000ce2:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <MX_TIM4_Init+0xec>)
 8000ce4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000ce8:	f240 3247 	movw	r2, #839	; 0x347
 8000cec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3999;
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000cf6:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000cfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d08:	4823      	ldr	r0, [pc, #140]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000d0a:	f001 ff33 	bl	8002b74 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d14:	f000 fb3a 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d22:	4619      	mov	r1, r3
 8000d24:	481c      	ldr	r0, [pc, #112]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000d26:	f002 fac1 	bl	80032ac <HAL_TIM_ConfigClockSource>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d30:	f000 fb2c 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000d36:	f001 fffe 	bl	8002d36 <HAL_TIM_PWM_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d40:	f000 fb24 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4619      	mov	r1, r3
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000d54:	f002 fe72 	bl	8003a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d5e:	f000 fb15 	bl	800138c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d62:	2360      	movs	r3, #96	; 0x60
 8000d64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000d7a:	f002 f9d5 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000d84:	f000 fb02 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <MX_TIM4_Init+0xe8>)
 8000d8a:	f000 fbd1 	bl	8001530 <HAL_TIM_MspPostInit>

}
 8000d8e:	bf00      	nop
 8000d90:	3738      	adds	r7, #56	; 0x38
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000120 	.word	0x20000120
 8000d9c:	40000800 	.word	0x40000800

08000da0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000dbe:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <MX_TIM5_Init+0x98>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000dc4:	2253      	movs	r2, #83	; 0x53
 8000dc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3999;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000dd0:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000dd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000de2:	4814      	ldr	r0, [pc, #80]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000de4:	f001 fec6 	bl	8002b74 <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000dee:	f000 facd 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000e00:	f002 fa54 	bl	80032ac <HAL_TIM_ConfigClockSource>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 fabf 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <MX_TIM5_Init+0x94>)
 8000e1c:	f002 fe0e 	bl	8003a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e26:	f000 fab1 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000168 	.word	0x20000168
 8000e38:	40000c00 	.word	0x40000c00

08000e3c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_TIM10_Init+0x40>)
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <MX_TIM10_Init+0x44>)
 8000e44:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4500;
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_TIM10_Init+0x40>)
 8000e48:	f241 1294 	movw	r2, #4500	; 0x1194
 8000e4c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_TIM10_Init+0x40>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9000;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_TIM10_Init+0x40>)
 8000e56:	f242 3228 	movw	r2, #9000	; 0x2328
 8000e5a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <MX_TIM10_Init+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_TIM10_Init+0x40>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_TIM10_Init+0x40>)
 8000e6a:	f001 fe83 	bl	8002b74 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000e74:	f000 fa8a 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200001b0 	.word	0x200001b0
 8000e80:	40014400 	.word	0x40014400

08000e84 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_TIM11_Init+0x40>)
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <MX_TIM11_Init+0x44>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 39;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_TIM11_Init+0x40>)
 8000e90:	2227      	movs	r2, #39	; 0x27
 8000e92:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_TIM11_Init+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 3999;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_TIM11_Init+0x40>)
 8000e9c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000ea0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_TIM11_Init+0x40>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_TIM11_Init+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_TIM11_Init+0x40>)
 8000eb0:	f001 fe60 	bl	8002b74 <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000eba:	f000 fa67 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001f8 	.word	0x200001f8
 8000ec8:	40014800 	.word	0x40014800

08000ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_USART2_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f002 fe1c 	bl	8003b40 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f0e:	f000 fa3d 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000240 	.word	0x20000240
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_USART6_UART_Init+0x50>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_USART6_UART_Init+0x4c>)
 8000f58:	f002 fdf2 	bl	8003b40 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f62:	f000 fa13 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000288 	.word	0x20000288
 8000f70:	40011400 	.word	0x40011400

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a45      	ldr	r2, [pc, #276]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a3e      	ldr	r2, [pc, #248]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <MX_GPIO_Init+0x134>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	482b      	ldr	r0, [pc, #172]	; (80010ac <MX_GPIO_Init+0x138>)
 8001000:	f001 f8ee 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800100a:	4829      	ldr	r0, [pc, #164]	; (80010b0 <MX_GPIO_Init+0x13c>)
 800100c:	f001 f8e8 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001016:	4827      	ldr	r0, [pc, #156]	; (80010b4 <MX_GPIO_Init+0x140>)
 8001018:	f001 f8e2 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800101c:	230f      	movs	r3, #15
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	481e      	ldr	r0, [pc, #120]	; (80010ac <MX_GPIO_Init+0x138>)
 8001034:	f000 ff38 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 8001038:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4817      	ldr	r0, [pc, #92]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8001052:	f000 ff29 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001056:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_GPIO_Init+0x140>)
 8001070:	f000 ff1a 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001074:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	480a      	ldr	r0, [pc, #40]	; (80010b4 <MX_GPIO_Init+0x140>)
 800108c:	f000 ff0c 	bl	8001ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2028      	movs	r0, #40	; 0x28
 8001096:	f000 fe3e 	bl	8001d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800109a:	2028      	movs	r0, #40	; 0x28
 800109c:	f000 fe57 	bl	8001d4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400

080010b8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	2201      	movs	r2, #1
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <__io_putchar+0x20>)
 80010ca:	f002 fd89 	bl	8003be0 <HAL_UART_Transmit>
  return ch;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000240 	.word	0x20000240

080010dc <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* hadc) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	if (hadc == &huart2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a95      	ldr	r2, [pc, #596]	; (800133c <HAL_UART_RxCpltCallback+0x260>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d12b      	bne.n	8001144 <HAL_UART_RxCpltCallback+0x68>
	{
		static char numbers[4] = {0};
		static int offset = 0;


		if (number != '\n')
 80010ec:	4b94      	ldr	r3, [pc, #592]	; (8001340 <HAL_UART_RxCpltCallback+0x264>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	2b0a      	cmp	r3, #10
 80010f2:	d021      	beq.n	8001138 <HAL_UART_RxCpltCallback+0x5c>
		{
			printf("received: %c\n", number);
 80010f4:	4b92      	ldr	r3, [pc, #584]	; (8001340 <HAL_UART_RxCpltCallback+0x264>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4892      	ldr	r0, [pc, #584]	; (8001344 <HAL_UART_RxCpltCallback+0x268>)
 80010fc:	f003 fec8 	bl	8004e90 <iprintf>
			numbers[offset++] = number;
 8001100:	4b8f      	ldr	r3, [pc, #572]	; (8001340 <HAL_UART_RxCpltCallback+0x264>)
 8001102:	8818      	ldrh	r0, [r3, #0]
 8001104:	4b90      	ldr	r3, [pc, #576]	; (8001348 <HAL_UART_RxCpltCallback+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	498f      	ldr	r1, [pc, #572]	; (8001348 <HAL_UART_RxCpltCallback+0x26c>)
 800110c:	600a      	str	r2, [r1, #0]
 800110e:	b2c1      	uxtb	r1, r0
 8001110:	4a8e      	ldr	r2, [pc, #568]	; (800134c <HAL_UART_RxCpltCallback+0x270>)
 8001112:	54d1      	strb	r1, [r2, r3]

			if (offset == 3)
 8001114:	4b8c      	ldr	r3, [pc, #560]	; (8001348 <HAL_UART_RxCpltCallback+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d10d      	bne.n	8001138 <HAL_UART_RxCpltCallback+0x5c>
			{
				int intNum = atoi(numbers);
 800111c:	488b      	ldr	r0, [pc, #556]	; (800134c <HAL_UART_RxCpltCallback+0x270>)
 800111e:	f003 fd65 	bl	8004bec <atoi>
 8001122:	60f8      	str	r0, [r7, #12]
				printf("set: %d\n", intNum);
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	488a      	ldr	r0, [pc, #552]	; (8001350 <HAL_UART_RxCpltCallback+0x274>)
 8001128:	f003 feb2 	bl	8004e90 <iprintf>
				// TIM2->CCR1 = intNum;
				TIM3->CCR1 = intNum;
 800112c:	4a89      	ldr	r2, [pc, #548]	; (8001354 <HAL_UART_RxCpltCallback+0x278>)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6353      	str	r3, [r2, #52]	; 0x34
				offset = 0;
 8001132:	4b85      	ldr	r3, [pc, #532]	; (8001348 <HAL_UART_RxCpltCallback+0x26c>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart2, &number, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	4981      	ldr	r1, [pc, #516]	; (8001340 <HAL_UART_RxCpltCallback+0x264>)
 800113c:	487f      	ldr	r0, [pc, #508]	; (800133c <HAL_UART_RxCpltCallback+0x260>)
 800113e:	f002 fdda 	bl	8003cf6 <HAL_UART_Receive_IT>
 8001142:	e0f8      	b.n	8001336 <HAL_UART_RxCpltCallback+0x25a>

	}
	else
	{

		answers[answerOffset--] = answer;
 8001144:	4b84      	ldr	r3, [pc, #528]	; (8001358 <HAL_UART_RxCpltCallback+0x27c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	4983      	ldr	r1, [pc, #524]	; (8001358 <HAL_UART_RxCpltCallback+0x27c>)
 800114c:	600a      	str	r2, [r1, #0]
 800114e:	4a83      	ldr	r2, [pc, #524]	; (800135c <HAL_UART_RxCpltCallback+0x280>)
 8001150:	7811      	ldrb	r1, [r2, #0]
 8001152:	4a83      	ldr	r2, [pc, #524]	; (8001360 <HAL_UART_RxCpltCallback+0x284>)
 8001154:	54d1      	strb	r1, [r2, r3]
		if (answerOffset == -1)
 8001156:	4b80      	ldr	r3, [pc, #512]	; (8001358 <HAL_UART_RxCpltCallback+0x27c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115e:	d151      	bne.n	8001204 <HAL_UART_RxCpltCallback+0x128>
		{
			answerOffset = 1;
 8001160:	4b7d      	ldr	r3, [pc, #500]	; (8001358 <HAL_UART_RxCpltCallback+0x27c>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
		else
		{
			HAL_UART_Receive_IT(&huart6, &answer, 1);
			return;
		}
		printf("received: %d\n", *(uint16_t*)(&answers));
 8001166:	4b7e      	ldr	r3, [pc, #504]	; (8001360 <HAL_UART_RxCpltCallback+0x284>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	487d      	ldr	r0, [pc, #500]	; (8001364 <HAL_UART_RxCpltCallback+0x288>)
 800116e:	f003 fe8f 	bl	8004e90 <iprintf>
		static int hold = 0;
		switch(*(uint16_t*)(&answers))
 8001172:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <HAL_UART_RxCpltCallback+0x284>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	2b1f      	cmp	r3, #31
 800117a:	f200 8099 	bhi.w	80012b0 <HAL_UART_RxCpltCallback+0x1d4>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <HAL_UART_RxCpltCallback+0xa8>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001211 	.word	0x08001211
 8001188:	08001217 	.word	0x08001217
 800118c:	080012b1 	.word	0x080012b1
 8001190:	0800121d 	.word	0x0800121d
 8001194:	080012b1 	.word	0x080012b1
 8001198:	080012b1 	.word	0x080012b1
 800119c:	080012b1 	.word	0x080012b1
 80011a0:	08001223 	.word	0x08001223
 80011a4:	080012b1 	.word	0x080012b1
 80011a8:	080012b1 	.word	0x080012b1
 80011ac:	080012b1 	.word	0x080012b1
 80011b0:	080012b1 	.word	0x080012b1
 80011b4:	080012b1 	.word	0x080012b1
 80011b8:	080012b1 	.word	0x080012b1
 80011bc:	080012b1 	.word	0x080012b1
 80011c0:	08001229 	.word	0x08001229
 80011c4:	080012b1 	.word	0x080012b1
 80011c8:	080012b1 	.word	0x080012b1
 80011cc:	080012b1 	.word	0x080012b1
 80011d0:	080012b1 	.word	0x080012b1
 80011d4:	080012b1 	.word	0x080012b1
 80011d8:	080012b1 	.word	0x080012b1
 80011dc:	080012b1 	.word	0x080012b1
 80011e0:	080012b1 	.word	0x080012b1
 80011e4:	080012b1 	.word	0x080012b1
 80011e8:	080012b1 	.word	0x080012b1
 80011ec:	080012b1 	.word	0x080012b1
 80011f0:	080012b1 	.word	0x080012b1
 80011f4:	080012b1 	.word	0x080012b1
 80011f8:	080012b1 	.word	0x080012b1
 80011fc:	080012b1 	.word	0x080012b1
 8001200:	0800123b 	.word	0x0800123b
			HAL_UART_Receive_IT(&huart6, &answer, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	4955      	ldr	r1, [pc, #340]	; (800135c <HAL_UART_RxCpltCallback+0x280>)
 8001208:	4857      	ldr	r0, [pc, #348]	; (8001368 <HAL_UART_RxCpltCallback+0x28c>)
 800120a:	f002 fd74 	bl	8003cf6 <HAL_UART_Receive_IT>
			return;
 800120e:	e092      	b.n	8001336 <HAL_UART_RxCpltCallback+0x25a>
		{
		case 1:
			set_ccw_dir();
 8001210:	f7ff fa42 	bl	8000698 <set_ccw_dir>
			break;
 8001214:	e04c      	b.n	80012b0 <HAL_UART_RxCpltCallback+0x1d4>
		case 2:
			set_cw_dir();
 8001216:	f7ff fa5b 	bl	80006d0 <set_cw_dir>
			break;
 800121a:	e049      	b.n	80012b0 <HAL_UART_RxCpltCallback+0x1d4>
		case 4:
			set_forward_dir();
 800121c:	f7ff f9cc 	bl	80005b8 <set_forward_dir>
			break;
 8001220:	e046      	b.n	80012b0 <HAL_UART_RxCpltCallback+0x1d4>
		case 8:
			set_backward_dir();
 8001222:	f7ff f9e5 	bl	80005f0 <set_backward_dir>
			break;
 8001226:	e043      	b.n	80012b0 <HAL_UART_RxCpltCallback+0x1d4>
		case 16:
			HAL_TIM_Base_Start_IT(&htim10);
 8001228:	4850      	ldr	r0, [pc, #320]	; (800136c <HAL_UART_RxCpltCallback+0x290>)
 800122a:	f001 fcf3 	bl	8002c14 <HAL_TIM_Base_Start_IT>
			TIM2->CCR1 = PINCH_FORWARD_CCR;
 800122e:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_UART_RxCpltCallback+0x294>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001238:	e03a      	b.n	80012b0 <HAL_UART_RxCpltCallback+0x1d4>
		case 32:
			static int spinning = 0;

			if (!hold)
 800123a:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <HAL_UART_RxCpltCallback+0x298>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d108      	bne.n	8001254 <HAL_UART_RxCpltCallback+0x178>
			{
				hold = 1;
 8001242:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <HAL_UART_RxCpltCallback+0x298>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
				spinning = 1-spinning;
 8001248:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <HAL_UART_RxCpltCallback+0x29c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1c3 0301 	rsb	r3, r3, #1
 8001250:	4a49      	ldr	r2, [pc, #292]	; (8001378 <HAL_UART_RxCpltCallback+0x29c>)
 8001252:	6013      	str	r3, [r2, #0]
			}
			if (!spinning)
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <HAL_UART_RxCpltCallback+0x29c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d114      	bne.n	8001286 <HAL_UART_RxCpltCallback+0x1aa>
			{
				HAL_GPIO_WritePin(HB1_GPIO, HB1_PIN, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2101      	movs	r1, #1
 8001260:	4846      	ldr	r0, [pc, #280]	; (800137c <HAL_UART_RxCpltCallback+0x2a0>)
 8001262:	f000 ffbd 	bl	80021e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HB2_GPIO, HB2_PIN, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2102      	movs	r1, #2
 800126a:	4844      	ldr	r0, [pc, #272]	; (800137c <HAL_UART_RxCpltCallback+0x2a0>)
 800126c:	f000 ffb8 	bl	80021e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HB3_GPIO, HB3_PIN, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2104      	movs	r1, #4
 8001274:	4841      	ldr	r0, [pc, #260]	; (800137c <HAL_UART_RxCpltCallback+0x2a0>)
 8001276:	f000 ffb3 	bl	80021e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HB4_GPIO, HB4_PIN, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2108      	movs	r1, #8
 800127e:	483f      	ldr	r0, [pc, #252]	; (800137c <HAL_UART_RxCpltCallback+0x2a0>)
 8001280:	f000 ffae 	bl	80021e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HB1_GPIO, HB1_PIN, 0);
				HAL_GPIO_WritePin(HB2_GPIO, HB2_PIN, 1);
				HAL_GPIO_WritePin(HB3_GPIO, HB3_PIN, 1);
				HAL_GPIO_WritePin(HB4_GPIO, HB4_PIN, 0);
			}
			break;
 8001284:	e013      	b.n	80012ae <HAL_UART_RxCpltCallback+0x1d2>
				HAL_GPIO_WritePin(HB1_GPIO, HB1_PIN, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2101      	movs	r1, #1
 800128a:	483c      	ldr	r0, [pc, #240]	; (800137c <HAL_UART_RxCpltCallback+0x2a0>)
 800128c:	f000 ffa8 	bl	80021e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HB2_GPIO, HB2_PIN, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	2102      	movs	r1, #2
 8001294:	4839      	ldr	r0, [pc, #228]	; (800137c <HAL_UART_RxCpltCallback+0x2a0>)
 8001296:	f000 ffa3 	bl	80021e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HB3_GPIO, HB3_PIN, 1);
 800129a:	2201      	movs	r2, #1
 800129c:	2104      	movs	r1, #4
 800129e:	4837      	ldr	r0, [pc, #220]	; (800137c <HAL_UART_RxCpltCallback+0x2a0>)
 80012a0:	f000 ff9e 	bl	80021e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HB4_GPIO, HB4_PIN, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2108      	movs	r1, #8
 80012a8:	4834      	ldr	r0, [pc, #208]	; (800137c <HAL_UART_RxCpltCallback+0x2a0>)
 80012aa:	f000 ff99 	bl	80021e0 <HAL_GPIO_WritePin>
			break;
 80012ae:	bf00      	nop

		}

		if ((answer & 0b1111) == 0 && !disabled && steps_left == 0)
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_UART_RxCpltCallback+0x280>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d110      	bne.n	80012de <HAL_UART_RxCpltCallback+0x202>
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_UART_RxCpltCallback+0x2a4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10c      	bne.n	80012de <HAL_UART_RxCpltCallback+0x202>
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_UART_RxCpltCallback+0x2a8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <HAL_UART_RxCpltCallback+0x202>
		{
			disabled = 1;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HAL_UART_RxCpltCallback+0x2a4>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
			disable();
 80012d2:	f7ff fa25 	bl	8000720 <disable>
			HAL_TIM_Base_Stop_IT(&htim11);
 80012d6:	482c      	ldr	r0, [pc, #176]	; (8001388 <HAL_UART_RxCpltCallback+0x2ac>)
 80012d8:	f001 fcfe 	bl	8002cd8 <HAL_TIM_Base_Stop_IT>
 80012dc:	e011      	b.n	8001302 <HAL_UART_RxCpltCallback+0x226>
		}
		else if ((answer & 0b1111) != 0 && disabled)
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_UART_RxCpltCallback+0x280>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_UART_RxCpltCallback+0x226>
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <HAL_UART_RxCpltCallback+0x2a4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_UART_RxCpltCallback+0x226>
		{
			disabled = 0;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_UART_RxCpltCallback+0x2a4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
			enable();
 80012f8:	f7ff fa06 	bl	8000708 <enable>
			HAL_TIM_Base_Start_IT(&htim11);
 80012fc:	4822      	ldr	r0, [pc, #136]	; (8001388 <HAL_UART_RxCpltCallback+0x2ac>)
 80012fe:	f001 fc89 	bl	8002c14 <HAL_TIM_Base_Start_IT>
		}
		disabled = (answer & 0b1111) == 0;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_UART_RxCpltCallback+0x280>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_UART_RxCpltCallback+0x2a4>)
 8001318:	601a      	str	r2, [r3, #0]
		if ((answer & 32) == 0)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_UART_RxCpltCallback+0x280>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <HAL_UART_RxCpltCallback+0x250>
		{
			hold = 0;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_UART_RxCpltCallback+0x298>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
		}
		 HAL_UART_Receive_IT(&huart6, &answer, 1);
 800132c:	2201      	movs	r2, #1
 800132e:	490b      	ldr	r1, [pc, #44]	; (800135c <HAL_UART_RxCpltCallback+0x280>)
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <HAL_UART_RxCpltCallback+0x28c>)
 8001332:	f002 fce0 	bl	8003cf6 <HAL_UART_Receive_IT>
	}
 }
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000240 	.word	0x20000240
 8001340:	200002e4 	.word	0x200002e4
 8001344:	08005c64 	.word	0x08005c64
 8001348:	200002ec 	.word	0x200002ec
 800134c:	200002f0 	.word	0x200002f0
 8001350:	08005c74 	.word	0x08005c74
 8001354:	40000400 	.word	0x40000400
 8001358:	20000000 	.word	0x20000000
 800135c:	200002d0 	.word	0x200002d0
 8001360:	200002d4 	.word	0x200002d4
 8001364:	08005c80 	.word	0x08005c80
 8001368:	20000288 	.word	0x20000288
 800136c:	200001b0 	.word	0x200001b0
 8001370:	20000004 	.word	0x20000004
 8001374:	200002f4 	.word	0x200002f4
 8001378:	200002f8 	.word	0x200002f8
 800137c:	40020800 	.word	0x40020800
 8001380:	200002e0 	.word	0x200002e0
 8001384:	200002dc 	.word	0x200002dc
 8001388:	200001f8 	.word	0x200001f8

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>
	...

08001398 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013d6:	2007      	movs	r0, #7
 80013d8:	f000 fc92 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f8:	d10e      	bne.n	8001418 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	4b46      	ldr	r3, [pc, #280]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a45      	ldr	r2, [pc, #276]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001416:	e07a      	b.n	800150e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a3f      	ldr	r2, [pc, #252]	; (800151c <HAL_TIM_Base_MspInit+0x134>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10e      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a3b      	ldr	r2, [pc, #236]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
}
 800143e:	e066      	b.n	800150e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a36      	ldr	r2, [pc, #216]	; (8001520 <HAL_TIM_Base_MspInit+0x138>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10e      	bne.n	8001468 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	4b32      	ldr	r3, [pc, #200]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a31      	ldr	r2, [pc, #196]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]
}
 8001466:	e052      	b.n	800150e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <HAL_TIM_Base_MspInit+0x13c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d116      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a27      	ldr	r2, [pc, #156]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2032      	movs	r0, #50	; 0x32
 8001494:	f000 fc3f 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 fc58 	bl	8001d4e <HAL_NVIC_EnableIRQ>
}
 800149e:	e036      	b.n	800150e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM10)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_TIM_Base_MspInit+0x140>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d116      	bne.n	80014d8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2019      	movs	r0, #25
 80014cc:	f000 fc23 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014d0:	2019      	movs	r0, #25
 80014d2:	f000 fc3c 	bl	8001d4e <HAL_NVIC_EnableIRQ>
}
 80014d6:	e01a      	b.n	800150e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM11)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_TIM_Base_MspInit+0x144>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d115      	bne.n	800150e <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_TIM_Base_MspInit+0x130>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	201a      	movs	r0, #26
 8001504:	f000 fc07 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001508:	201a      	movs	r0, #26
 800150a:	f000 fc20 	bl	8001d4e <HAL_NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40000400 	.word	0x40000400
 8001520:	40000800 	.word	0x40000800
 8001524:	40000c00 	.word	0x40000c00
 8001528:	40014400 	.word	0x40014400
 800152c:	40014800 	.word	0x40014800

08001530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001550:	d11f      	bne.n	8001592 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a33      	ldr	r2, [pc, #204]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800156e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001580:	2301      	movs	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4828      	ldr	r0, [pc, #160]	; (800162c <HAL_TIM_MspPostInit+0xfc>)
 800158c:	f000 fc8c 	bl	8001ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001590:	e046      	b.n	8001620 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a26      	ldr	r2, [pc, #152]	; (8001630 <HAL_TIM_MspPostInit+0x100>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d11e      	bne.n	80015da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6313      	str	r3, [r2, #48]	; 0x30
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b8:	2340      	movs	r3, #64	; 0x40
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015c8:	2302      	movs	r3, #2
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4816      	ldr	r0, [pc, #88]	; (800162c <HAL_TIM_MspPostInit+0xfc>)
 80015d4:	f000 fc68 	bl	8001ea8 <HAL_GPIO_Init>
}
 80015d8:	e022      	b.n	8001620 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_TIM_MspPostInit+0x104>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d11d      	bne.n	8001620 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_TIM_MspPostInit+0xf8>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001610:	2302      	movs	r3, #2
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <HAL_TIM_MspPostInit+0x108>)
 800161c:	f000 fc44 	bl	8001ea8 <HAL_GPIO_Init>
}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40000400 	.word	0x40000400
 8001634:	40000800 	.word	0x40000800
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a49      	ldr	r2, [pc, #292]	; (8001780 <HAL_UART_MspInit+0x144>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d134      	bne.n	80016c8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <HAL_UART_MspInit+0x148>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_UART_MspInit+0x148>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b45      	ldr	r3, [pc, #276]	; (8001784 <HAL_UART_MspInit+0x148>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_UART_MspInit+0x148>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_UART_MspInit+0x148>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_UART_MspInit+0x148>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001696:	230c      	movs	r3, #12
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4835      	ldr	r0, [pc, #212]	; (8001788 <HAL_UART_MspInit+0x14c>)
 80016b2:	f000 fbf9 	bl	8001ea8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2026      	movs	r0, #38	; 0x26
 80016bc:	f000 fb2b 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c0:	2026      	movs	r0, #38	; 0x26
 80016c2:	f000 fb44 	bl	8001d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016c6:	e057      	b.n	8001778 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2f      	ldr	r2, [pc, #188]	; (800178c <HAL_UART_MspInit+0x150>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d152      	bne.n	8001778 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_UART_MspInit+0x148>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <HAL_UART_MspInit+0x148>)
 80016dc:	f043 0320 	orr.w	r3, r3, #32
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <HAL_UART_MspInit+0x148>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_UART_MspInit+0x148>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a23      	ldr	r2, [pc, #140]	; (8001784 <HAL_UART_MspInit+0x148>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_UART_MspInit+0x148>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_UART_MspInit+0x148>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <HAL_UART_MspInit+0x148>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_UART_MspInit+0x148>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001726:	2340      	movs	r3, #64	; 0x40
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001736:	2308      	movs	r3, #8
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4813      	ldr	r0, [pc, #76]	; (8001790 <HAL_UART_MspInit+0x154>)
 8001742:	f000 fbb1 	bl	8001ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001758:	2308      	movs	r3, #8
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <HAL_UART_MspInit+0x14c>)
 8001764:	f000 fba0 	bl	8001ea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2047      	movs	r0, #71	; 0x47
 800176e:	f000 fad2 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001772:	2047      	movs	r0, #71	; 0x47
 8001774:	f000 faeb 	bl	8001d4e <HAL_NVIC_EnableIRQ>
}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40004400 	.word	0x40004400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000
 800178c:	40011400 	.word	0x40011400
 8001790:	40020800 	.word	0x40020800

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f97a 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017ee:	f001 fbab 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001b0 	.word	0x200001b0

080017fc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001802:	f001 fba1 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001f8 	.word	0x200001f8

08001810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART2_IRQHandler+0x10>)
 8001816:	f002 fa93 	bl	8003d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000240 	.word	0x20000240

08001824 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001828:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800182c:	f000 fcf2 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001830:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001834:	f000 fcee 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001838:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800183c:	f000 fcea 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001840:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001844:	f000 fce6 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM5_IRQHandler+0x10>)
 8001852:	f001 fb79 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000168 	.word	0x20000168

08001860 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <USART6_IRQHandler+0x10>)
 8001866:	f002 fa6b 	bl	8003d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000288 	.word	0x20000288

08001874 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e00a      	b.n	800189c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001886:	f3af 8000 	nop.w
 800188a:	4601      	mov	r1, r0
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf0      	blt.n	8001886 <_read+0x12>
  }

  return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e009      	b.n	80018d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fbf5 	bl	80010b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf1      	blt.n	80018c0 <_write+0x12>
  }
  return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_close>:

int _close(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f003 fc1a 	bl	80051b8 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20018000 	.word	0x20018000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	200002fc 	.word	0x200002fc
 80019b8:	20000450 	.word	0x20000450

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
                                                                                               ldr   sp, =_estack    		 /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019e4:	f7ff ffea 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ea:	490d      	ldr	r1, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a00:	4c0a      	ldr	r4, [pc, #40]	; (8001a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f003 fbd9 	bl	80051c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7fe ff93 	bl	800093c <main>
  bx  lr    
 8001a16:	4770      	bx	lr
                                                                                               ldr   sp, =_estack    		 /* set stack pointer */
 8001a18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a24:	08005dec 	.word	0x08005dec
  ldr r2, =_sbss
 8001a28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a2c:	20000450 	.word	0x20000450

08001a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_Init+0x40>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_Init+0x40>)
 8001a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_Init+0x40>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f94f 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fc96 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f967 	bl	8001d6a <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f92f 	bl	8001d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	20000014 	.word	0x20000014
 8001ad4:	20000010 	.word	0x20000010

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000014 	.word	0x20000014
 8001afc:	20000300 	.word	0x20000300

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000300 	.word	0x20000300

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff ffee 	bl	8001b00 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000014 	.word	0x20000014

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60d3      	str	r3, [r2, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db0b      	blt.n	8001bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4907      	ldr	r1, [pc, #28]	; (8001bfc <__NVIC_EnableIRQ+0x38>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	2001      	movs	r0, #1
 8001be6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	; (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f7ff ff8e 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff29 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff3e 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ff8e 	bl	8001c54 <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff5d 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff31 	bl	8001bc4 <__NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffa2 	bl	8001cbc <SysTick_Config>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff feb6 	bl	8001b00 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d008      	beq.n	8001db4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e052      	b.n	8001e5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0216 	bic.w	r2, r2, #22
 8001dc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <HAL_DMA_Abort+0x62>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0208 	bic.w	r2, r2, #8
 8001df2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e04:	e013      	b.n	8001e2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e06:	f7ff fe7b 	bl	8001b00 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d90c      	bls.n	8001e2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e015      	b.n	8001e5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e4      	bne.n	8001e06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	223f      	movs	r2, #63	; 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d004      	beq.n	8001e80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e00c      	b.n	8001e9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2205      	movs	r2, #5
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e159      	b.n	8002178 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 8148 	bne.w	8002172 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d130      	bne.n	8001f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a2 	beq.w	8002172 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b57      	ldr	r3, [pc, #348]	; (8002190 <HAL_GPIO_Init+0x2e8>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a56      	ldr	r2, [pc, #344]	; (8002190 <HAL_GPIO_Init+0x2e8>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b54      	ldr	r3, [pc, #336]	; (8002190 <HAL_GPIO_Init+0x2e8>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204a:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_GPIO_Init+0x2ec>)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a49      	ldr	r2, [pc, #292]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_GPIO_Init+0x202>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a48      	ldr	r2, [pc, #288]	; (800219c <HAL_GPIO_Init+0x2f4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0x1fe>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a47      	ldr	r2, [pc, #284]	; (80021a0 <HAL_GPIO_Init+0x2f8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00d      	beq.n	80020a2 <HAL_GPIO_Init+0x1fa>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a46      	ldr	r2, [pc, #280]	; (80021a4 <HAL_GPIO_Init+0x2fc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <HAL_GPIO_Init+0x1f6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a45      	ldr	r2, [pc, #276]	; (80021a8 <HAL_GPIO_Init+0x300>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_GPIO_Init+0x1f2>
 8002096:	2304      	movs	r3, #4
 8002098:	e008      	b.n	80020ac <HAL_GPIO_Init+0x204>
 800209a:	2307      	movs	r3, #7
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x204>
 800209e:	2303      	movs	r3, #3
 80020a0:	e004      	b.n	80020ac <HAL_GPIO_Init+0x204>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e002      	b.n	80020ac <HAL_GPIO_Init+0x204>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x204>
 80020aa:	2300      	movs	r3, #0
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f002 0203 	and.w	r2, r2, #3
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020bc:	4935      	ldr	r1, [pc, #212]	; (8002194 <HAL_GPIO_Init+0x2ec>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_GPIO_Init+0x304>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ee:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <HAL_GPIO_Init+0x304>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_GPIO_Init+0x304>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002118:	4a24      	ldr	r2, [pc, #144]	; (80021ac <HAL_GPIO_Init+0x304>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_GPIO_Init+0x304>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002142:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <HAL_GPIO_Init+0x304>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_GPIO_Init+0x304>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216c:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <HAL_GPIO_Init+0x304>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3301      	adds	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	f67f aea2 	bls.w	8001ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40013800 	.word	0x40013800
 8002198:	40020000 	.word	0x40020000
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020c00 	.word	0x40020c00
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021fc:	e003      	b.n	8002206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	041a      	lsls	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	619a      	str	r2, [r3, #24]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f9a2 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e267      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d075      	beq.n	800234e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002262:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d00c      	beq.n	8002288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226e:	4b85      	ldr	r3, [pc, #532]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002276:	2b08      	cmp	r3, #8
 8002278:	d112      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002286:	d10b      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	4b7e      	ldr	r3, [pc, #504]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d05b      	beq.n	800234c <HAL_RCC_OscConfig+0x108>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d157      	bne.n	800234c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e242      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d106      	bne.n	80022b8 <HAL_RCC_OscConfig+0x74>
 80022aa:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a75      	ldr	r2, [pc, #468]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xb0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x98>
 80022c2:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6f      	ldr	r2, [pc, #444]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b6d      	ldr	r3, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6c      	ldr	r2, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xb0>
 80022dc:	4b69      	ldr	r3, [pc, #420]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a68      	ldr	r2, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fc00 	bl	8001b00 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fbfc 	bl	8001b00 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e207      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xc0>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fbec 	bl	8001b00 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fbe8 	bl	8001b00 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1f3      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	4b51      	ldr	r3, [pc, #324]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0xe8>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x152>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e1c7      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4937      	ldr	r1, [pc, #220]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	e03a      	b.n	8002422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x244>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7ff fba1 	bl	8001b00 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c2:	f7ff fb9d 	bl	8001b00 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1a8      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4925      	ldr	r1, [pc, #148]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	e015      	b.n	8002422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_OscConfig+0x244>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fb80 	bl	8001b00 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff fb7c 	bl	8001b00 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e187      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d036      	beq.n	800249c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_RCC_OscConfig+0x248>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7ff fb60 	bl	8001b00 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002444:	f7ff fb5c 	bl	8001b00 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e167      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x200>
 8002462:	e01b      	b.n	800249c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_OscConfig+0x248>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff fb49 	bl	8001b00 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	e00e      	b.n	8002490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002472:	f7ff fb45 	bl	8001b00 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d907      	bls.n	8002490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e150      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
 8002484:	40023800 	.word	0x40023800
 8002488:	42470000 	.word	0x42470000
 800248c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ea      	bne.n	8002472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8097 	beq.w	80025d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a7c      	ldr	r2, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b7a      	ldr	r3, [pc, #488]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e6:	4b74      	ldr	r3, [pc, #464]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a73      	ldr	r2, [pc, #460]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fb05 	bl	8001b00 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff fb01 	bl	8001b00 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e10c      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x2ea>
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a63      	ldr	r2, [pc, #396]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
 800252c:	e01c      	b.n	8002568 <HAL_RCC_OscConfig+0x324>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x30c>
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a5e      	ldr	r2, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a5b      	ldr	r2, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0x324>
 8002550:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002562:	f023 0304 	bic.w	r3, r3, #4
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d015      	beq.n	800259c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7ff fac6 	bl	8001b00 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7ff fac2 	bl	8001b00 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e0cb      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ee      	beq.n	8002578 <HAL_RCC_OscConfig+0x334>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fab0 	bl	8001b00 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7ff faac 	bl	8001b00 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0b5      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ee      	bne.n	80025a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a38      	ldr	r2, [pc, #224]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a1 	beq.w	8002724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d05c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d141      	bne.n	800267a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff fa80 	bl	8001b00 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff fa7c 	bl	8001b00 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e087      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	019b      	lsls	r3, r3, #6
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	491b      	ldr	r1, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fa55 	bl	8001b00 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fa51 	bl	8001b00 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e05c      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x416>
 8002678:	e054      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff fa3e 	bl	8001b00 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff fa3a 	bl	8001b00 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e045      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x444>
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e038      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40007000 	.word	0x40007000
 80026bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4ec>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d028      	beq.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d121      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d11a      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026f0:	4013      	ands	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0cc      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d90c      	bls.n	8002770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d044      	beq.n	8002854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e067      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4934      	ldr	r1, [pc, #208]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7ff f96c 	bl	8001b00 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7ff f968 	bl	8001b00 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e04f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d20c      	bcs.n	800287c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f8cc 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023c00 	.word	0x40023c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08005c90 	.word	0x08005c90
 80028f8:	2000000c 	.word	0x2000000c
 80028fc:	20000010 	.word	0x20000010

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b094      	sub	sp, #80	; 0x50
 8002906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	647b      	str	r3, [r7, #68]	; 0x44
 800290c:	2300      	movs	r3, #0
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002910:	2300      	movs	r3, #0
 8002912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002918:	4b79      	ldr	r3, [pc, #484]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d00d      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x40>
 8002924:	2b08      	cmp	r3, #8
 8002926:	f200 80e1 	bhi.w	8002aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
 800292e:	2b04      	cmp	r3, #4
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x3a>
 8002932:	e0db      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b73      	ldr	r3, [pc, #460]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002938:	e0db      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293a:	4b73      	ldr	r3, [pc, #460]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800293e:	e0d8      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002940:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002948:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294a:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002956:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	2200      	movs	r2, #0
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
 800296e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002972:	4622      	mov	r2, r4
 8002974:	462b      	mov	r3, r5
 8002976:	f04f 0000 	mov.w	r0, #0
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002984:	0150      	lsls	r0, r2, #5
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4621      	mov	r1, r4
 800298c:	1a51      	subs	r1, r2, r1
 800298e:	6139      	str	r1, [r7, #16]
 8002990:	4629      	mov	r1, r5
 8002992:	eb63 0301 	sbc.w	r3, r3, r1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a4:	4659      	mov	r1, fp
 80029a6:	018b      	lsls	r3, r1, #6
 80029a8:	4651      	mov	r1, sl
 80029aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ae:	4651      	mov	r1, sl
 80029b0:	018a      	lsls	r2, r1, #6
 80029b2:	4651      	mov	r1, sl
 80029b4:	ebb2 0801 	subs.w	r8, r2, r1
 80029b8:	4659      	mov	r1, fp
 80029ba:	eb63 0901 	sbc.w	r9, r3, r1
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d2:	4690      	mov	r8, r2
 80029d4:	4699      	mov	r9, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	eb18 0303 	adds.w	r3, r8, r3
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	462b      	mov	r3, r5
 80029e0:	eb49 0303 	adc.w	r3, r9, r3
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029f2:	4629      	mov	r1, r5
 80029f4:	024b      	lsls	r3, r1, #9
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029fc:	4621      	mov	r1, r4
 80029fe:	024a      	lsls	r2, r1, #9
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a10:	f7fd fc36 	bl	8000280 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a1c:	e058      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	2200      	movs	r2, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	4611      	mov	r1, r2
 8002a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4a:	0150      	lsls	r0, r2, #5
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a56:	4649      	mov	r1, r9
 8002a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a70:	ebb2 040a 	subs.w	r4, r2, sl
 8002a74:	eb63 050b 	sbc.w	r5, r3, fp
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	00eb      	lsls	r3, r5, #3
 8002a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a86:	00e2      	lsls	r2, r4, #3
 8002a88:	4614      	mov	r4, r2
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	18e3      	adds	r3, r4, r3
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	464b      	mov	r3, r9
 8002a94:	eb45 0303 	adc.w	r3, r5, r3
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	028b      	lsls	r3, r1, #10
 8002aaa:	4621      	mov	r1, r4
 8002aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	028a      	lsls	r2, r1, #10
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aba:	2200      	movs	r2, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	61fa      	str	r2, [r7, #28]
 8002ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac4:	f7fd fbdc 	bl	8000280 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4613      	mov	r3, r2
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3750      	adds	r7, #80	; 0x50
 8002af8:	46bd      	mov	sp, r7
 8002afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	007a1200 	.word	0x007a1200

08002b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	2000000c 	.word	0x2000000c

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08005ca0 	.word	0x08005ca0

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b50:	f7ff ffdc 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0b5b      	lsrs	r3, r3, #13
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	08005ca0 	.word	0x08005ca0

08002b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e041      	b.n	8002c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fc24 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f000 fc6a 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e044      	b.n	8002cb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d018      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x6c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c56:	d013      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x6c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00e      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x6c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <HAL_TIM_Base_Start_IT+0xb8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d009      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x6c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x6c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d111      	bne.n	8002ca4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d010      	beq.n	8002cb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca2:	e007      	b.n	8002cb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40000c00 	.word	0x40000c00
 8002cd4:	40014000 	.word	0x40014000

08002cd8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10f      	bne.n	8002d20 <HAL_TIM_Base_Stop_IT+0x48>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	f240 4344 	movw	r3, #1092	; 0x444
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_Base_Stop_IT+0x48>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e041      	b.n	8002dcc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d106      	bne.n	8002d62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f839 	bl	8002dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f000 fb89 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_TIM_PWM_Start+0x24>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e022      	b.n	8002e52 <HAL_TIM_PWM_Start+0x6a>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d109      	bne.n	8002e26 <HAL_TIM_PWM_Start+0x3e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e015      	b.n	8002e52 <HAL_TIM_PWM_Start+0x6a>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d109      	bne.n	8002e40 <HAL_TIM_PWM_Start+0x58>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e008      	b.n	8002e52 <HAL_TIM_PWM_Start+0x6a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e068      	b.n	8002f2c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <HAL_TIM_PWM_Start+0x82>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	e013      	b.n	8002e92 <HAL_TIM_PWM_Start+0xaa>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_PWM_Start+0x92>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e78:	e00b      	b.n	8002e92 <HAL_TIM_PWM_Start+0xaa>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_PWM_Start+0xa2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e88:	e003      	b.n	8002e92 <HAL_TIM_PWM_Start+0xaa>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2201      	movs	r2, #1
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fda8 	bl	80039f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_TIM_PWM_Start+0x14c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d107      	bne.n	8002eba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <HAL_TIM_PWM_Start+0x14c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x10e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d013      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x10e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_TIM_PWM_Start+0x150>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x10e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_TIM_PWM_Start+0x154>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x10e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_TIM_PWM_Start+0x158>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x10e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_TIM_PWM_Start+0x15c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d111      	bne.n	8002f1a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b06      	cmp	r3, #6
 8002f06:	d010      	beq.n	8002f2a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f18:	e007      	b.n	8002f2a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40014000 	.word	0x40014000

08002f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0202 	mvn.w	r2, #2
 8002f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa5b 	bl	800344e <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa4d 	bl	800343a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fa5e 	bl	8003462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d020      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0204 	mvn.w	r2, #4
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa35 	bl	800344e <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa27 	bl	800343a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa38 	bl	8003462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0208 	mvn.w	r2, #8
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2204      	movs	r2, #4
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa0f 	bl	800344e <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa01 	bl	800343a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fa12 	bl	8003462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d020      	beq.n	8003090 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0210 	mvn.w	r2, #16
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2208      	movs	r2, #8
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f9e9 	bl	800344e <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9db 	bl	800343a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f9ec 	bl	8003462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0201 	mvn.w	r2, #1
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fb42 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fd2a 	bl	8003b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f9bd 	bl	8003476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0220 	mvn.w	r2, #32
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fcfc 	bl	8003b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003142:	2302      	movs	r3, #2
 8003144:	e0ae      	b.n	80032a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	f200 809f 	bhi.w	8003294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003156:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	08003191 	.word	0x08003191
 8003160:	08003295 	.word	0x08003295
 8003164:	08003295 	.word	0x08003295
 8003168:	08003295 	.word	0x08003295
 800316c:	080031d1 	.word	0x080031d1
 8003170:	08003295 	.word	0x08003295
 8003174:	08003295 	.word	0x08003295
 8003178:	08003295 	.word	0x08003295
 800317c:	08003213 	.word	0x08003213
 8003180:	08003295 	.word	0x08003295
 8003184:	08003295 	.word	0x08003295
 8003188:	08003295 	.word	0x08003295
 800318c:	08003253 	.word	0x08003253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fa04 	bl	80035a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0208 	orr.w	r2, r2, #8
 80031aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6999      	ldr	r1, [r3, #24]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	619a      	str	r2, [r3, #24]
      break;
 80031ce:	e064      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fa4a 	bl	8003670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6999      	ldr	r1, [r3, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	021a      	lsls	r2, r3, #8
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	619a      	str	r2, [r3, #24]
      break;
 8003210:	e043      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fa95 	bl	8003748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0208 	orr.w	r2, r2, #8
 800322c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0204 	bic.w	r2, r2, #4
 800323c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69d9      	ldr	r1, [r3, #28]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
      break;
 8003250:	e023      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fadf 	bl	800381c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69d9      	ldr	r1, [r3, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	021a      	lsls	r2, r3, #8
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	61da      	str	r2, [r3, #28]
      break;
 8003292:	e002      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
      break;
 8003298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_TIM_ConfigClockSource+0x1c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0b4      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x186>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003300:	d03e      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0xd4>
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003306:	f200 8087 	bhi.w	8003418 <HAL_TIM_ConfigClockSource+0x16c>
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330e:	f000 8086 	beq.w	800341e <HAL_TIM_ConfigClockSource+0x172>
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	d87f      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b70      	cmp	r3, #112	; 0x70
 800331a:	d01a      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0xa6>
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d87b      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b60      	cmp	r3, #96	; 0x60
 8003322:	d050      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d877      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b50      	cmp	r3, #80	; 0x50
 800332a:	d03c      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0xfa>
 800332c:	2b50      	cmp	r3, #80	; 0x50
 800332e:	d873      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d058      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d86f      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x16c>
 8003338:	2b30      	cmp	r3, #48	; 0x30
 800333a:	d064      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x15a>
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d86b      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b20      	cmp	r3, #32
 8003342:	d060      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x15a>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d867      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x16c>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d05c      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x15a>
 800334c:	2b10      	cmp	r3, #16
 800334e:	d05a      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x15a>
 8003350:	e062      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003362:	f000 fb25 	bl	80039b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	609a      	str	r2, [r3, #8]
      break;
 800337e:	e04f      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003390:	f000 fb0e 	bl	80039b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a2:	609a      	str	r2, [r3, #8]
      break;
 80033a4:	e03c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	461a      	mov	r2, r3
 80033b4:	f000 fa82 	bl	80038bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2150      	movs	r1, #80	; 0x50
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fadb 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 80033c4:	e02c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d2:	461a      	mov	r2, r3
 80033d4:	f000 faa1 	bl	800391a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2160      	movs	r1, #96	; 0x60
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 facb 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 80033e4:	e01c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	461a      	mov	r2, r3
 80033f4:	f000 fa62 	bl	80038bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2140      	movs	r1, #64	; 0x40
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fabb 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003404:	e00c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f000 fab2 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003416:	e003      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e000      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800341e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <TIM_Base_SetConfig+0xfc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00f      	beq.n	80034c4 <TIM_Base_SetConfig+0x38>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d00b      	beq.n	80034c4 <TIM_Base_SetConfig+0x38>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a37      	ldr	r2, [pc, #220]	; (800358c <TIM_Base_SetConfig+0x100>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d007      	beq.n	80034c4 <TIM_Base_SetConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a36      	ldr	r2, [pc, #216]	; (8003590 <TIM_Base_SetConfig+0x104>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a35      	ldr	r2, [pc, #212]	; (8003594 <TIM_Base_SetConfig+0x108>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d108      	bne.n	80034d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <TIM_Base_SetConfig+0xfc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01b      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d017      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a28      	ldr	r2, [pc, #160]	; (800358c <TIM_Base_SetConfig+0x100>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <TIM_Base_SetConfig+0x104>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00f      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <TIM_Base_SetConfig+0x108>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00b      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a25      	ldr	r2, [pc, #148]	; (8003598 <TIM_Base_SetConfig+0x10c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a24      	ldr	r2, [pc, #144]	; (800359c <TIM_Base_SetConfig+0x110>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <TIM_Base_SetConfig+0x114>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <TIM_Base_SetConfig+0xfc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f023 0201 	bic.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]
  }
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40010000 	.word	0x40010000
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400
 80035a0:	40014800 	.word	0x40014800

080035a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f023 0201 	bic.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f023 0302 	bic.w	r3, r3, #2
 80035ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <TIM_OC1_SetConfig+0xc8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10c      	bne.n	800361a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0308 	bic.w	r3, r3, #8
 8003606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a13      	ldr	r2, [pc, #76]	; (800366c <TIM_OC1_SetConfig+0xc8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d111      	bne.n	8003646 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	621a      	str	r2, [r3, #32]
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40010000 	.word	0x40010000

08003670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f023 0210 	bic.w	r2, r3, #16
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0320 	bic.w	r3, r3, #32
 80036ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <TIM_OC2_SetConfig+0xd4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d10d      	bne.n	80036ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a15      	ldr	r2, [pc, #84]	; (8003744 <TIM_OC2_SetConfig+0xd4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d113      	bne.n	800371c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40010000 	.word	0x40010000

08003748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <TIM_OC3_SetConfig+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10d      	bne.n	80037c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <TIM_OC3_SetConfig+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d113      	bne.n	80037f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40010000 	.word	0x40010000

0800381c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	031b      	lsls	r3, r3, #12
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <TIM_OC4_SetConfig+0x9c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d109      	bne.n	8003890 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	019b      	lsls	r3, r3, #6
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40010000 	.word	0x40010000

080038bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 030a 	bic.w	r3, r3, #10
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f023 0210 	bic.w	r2, r3, #16
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003956:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	f043 0307 	orr.w	r3, r3, #7
 800399c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2201      	movs	r2, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e050      	b.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d018      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa0:	d013      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00e      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d009      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a15      	ldr	r2, [pc, #84]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d004      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40014000 	.word	0x40014000

08003b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e042      	b.n	8003bd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fd68 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fdbd 	bl	8004704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d175      	bne.n	8003cec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_UART_Transmit+0x2c>
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e06e      	b.n	8003cee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1e:	f7fd ff6f 	bl	8001b00 <HAL_GetTick>
 8003c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d108      	bne.n	8003c4c <HAL_UART_Transmit+0x6c>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e003      	b.n	8003c54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c54:	e02e      	b.n	8003cb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fb1f 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e03a      	b.n	8003cee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3302      	adds	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e007      	b.n	8003ca6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1cb      	bne.n	8003c56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 faeb 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e006      	b.n	8003cee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d112      	bne.n	8003d36 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Receive_IT+0x26>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e00b      	b.n	8003d38 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb12 	bl	8004356 <UART_Start_Receive_IT>
 8003d32:	4603      	mov	r3, r0
 8003d34:	e000      	b.n	8003d38 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b0ba      	sub	sp, #232	; 0xe8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_UART_IRQHandler+0x66>
 8003d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fbf2 	bl	8004588 <UART_Receive_IT>
      return;
 8003da4:	e25b      	b.n	800425e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80de 	beq.w	8003f6c <HAL_UART_IRQHandler+0x22c>
 8003db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80d1 	beq.w	8003f6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_UART_IRQHandler+0xae>
 8003dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f043 0201 	orr.w	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_UART_IRQHandler+0xd2>
 8003dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f043 0202 	orr.w	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_UART_IRQHandler+0xf6>
 8003e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f043 0204 	orr.w	r2, r3, #4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d011      	beq.n	8003e66 <HAL_UART_IRQHandler+0x126>
 8003e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d105      	bne.n	8003e5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f043 0208 	orr.w	r2, r3, #8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 81f2 	beq.w	8004254 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_UART_IRQHandler+0x14e>
 8003e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fb7d 	bl	8004588 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d103      	bne.n	8003eba <HAL_UART_IRQHandler+0x17a>
 8003eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d04f      	beq.n	8003f5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa85 	bl	80043ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d141      	bne.n	8003f52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3314      	adds	r3, #20
 8003ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003efa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1d9      	bne.n	8003ece <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d013      	beq.n	8003f4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	4a7e      	ldr	r2, [pc, #504]	; (8004120 <HAL_UART_IRQHandler+0x3e0>)
 8003f28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd ff97 	bl	8001e62 <HAL_DMA_Abort_IT>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f44:	4610      	mov	r0, r2
 8003f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	e00e      	b.n	8003f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f994 	bl	8004278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	e00a      	b.n	8003f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f990 	bl	8004278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e006      	b.n	8003f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f98c 	bl	8004278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003f66:	e175      	b.n	8004254 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	bf00      	nop
    return;
 8003f6a:	e173      	b.n	8004254 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 814f 	bne.w	8004214 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8148 	beq.w	8004214 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8141 	beq.w	8004214 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	f040 80b6 	bne.w	8004124 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8145 	beq.w	8004258 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	f080 813e 	bcs.w	8004258 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fee:	f000 8088 	beq.w	8004102 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800400c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800401e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800402a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1d9      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800404e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004062:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004066:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800406a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e1      	bne.n	800403e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3314      	adds	r3, #20
 8004080:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800408a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800409e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e3      	bne.n	800407a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d2:	f023 0310 	bic.w	r3, r3, #16
 80040d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80040e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e3      	bne.n	80040c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fd fe40 	bl	8001d82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004110:	b29b      	uxth	r3, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	b29b      	uxth	r3, r3
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8b7 	bl	800428c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800411e:	e09b      	b.n	8004258 <HAL_UART_IRQHandler+0x518>
 8004120:	08004491 	.word	0x08004491
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800412c:	b29b      	uxth	r3, r3
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 808e 	beq.w	800425c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8089 	beq.w	800425c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800416e:	647a      	str	r2, [r7, #68]	; 0x44
 8004170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800417c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e3      	bne.n	800414a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	623b      	str	r3, [r7, #32]
   return(result);
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041a6:	633a      	str	r2, [r7, #48]	; 0x30
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e3      	bne.n	8004182 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0310 	bic.w	r3, r3, #16
 80041de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041ec:	61fa      	str	r2, [r7, #28]
 80041ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	69b9      	ldr	r1, [r7, #24]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	617b      	str	r3, [r7, #20]
   return(result);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e3      	bne.n	80041c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004206:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f83d 	bl	800428c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004212:	e023      	b.n	800425c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <HAL_UART_IRQHandler+0x4f4>
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f943 	bl	80044b8 <UART_Transmit_IT>
    return;
 8004232:	e014      	b.n	800425e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <HAL_UART_IRQHandler+0x51e>
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f983 	bl	8004558 <UART_EndTransmit_IT>
    return;
 8004252:	e004      	b.n	800425e <HAL_UART_IRQHandler+0x51e>
    return;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <HAL_UART_IRQHandler+0x51e>
      return;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <HAL_UART_IRQHandler+0x51e>
      return;
 800425c:	bf00      	nop
  }
}
 800425e:	37e8      	adds	r7, #232	; 0xe8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b4:	e03b      	b.n	800432e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d037      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fd fc1f 	bl	8001b00 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	6a3a      	ldr	r2, [r7, #32]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e03a      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d023      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0x8a>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b80      	cmp	r3, #128	; 0x80
 80042ea:	d020      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0x8a>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d01d      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d116      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f857 	bl	80043ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2208      	movs	r2, #8
 8004320:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e00f      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4013      	ands	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	429a      	cmp	r2, r3
 800434a:	d0b4      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	4613      	mov	r3, r2
 8004362:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2222      	movs	r2, #34	; 0x22
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0220 	orr.w	r2, r2, #32
 80043ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b095      	sub	sp, #84	; 0x54
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043f2:	643a      	str	r2, [r7, #64]	; 0x40
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e5      	bne.n	80043d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3314      	adds	r3, #20
 800440c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	61fb      	str	r3, [r7, #28]
   return(result);
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	64bb      	str	r3, [r7, #72]	; 0x48
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800442c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	2b01      	cmp	r3, #1
 8004440:	d119      	bne.n	8004476 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	60bb      	str	r3, [r7, #8]
   return(result);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f023 0310 	bic.w	r3, r3, #16
 8004458:	647b      	str	r3, [r7, #68]	; 0x44
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004462:	61ba      	str	r2, [r7, #24]
 8004464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6979      	ldr	r1, [r7, #20]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	613b      	str	r3, [r7, #16]
   return(result);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e5      	bne.n	8004442 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004484:	bf00      	nop
 8004486:	3754      	adds	r7, #84	; 0x54
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff fee4 	bl	8004278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b21      	cmp	r3, #33	; 0x21
 80044ca:	d13e      	bne.n	800454a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	d114      	bne.n	8004500 <UART_Transmit_IT+0x48>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d110      	bne.n	8004500 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	621a      	str	r2, [r3, #32]
 80044fe:	e008      	b.n	8004512 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6211      	str	r1, [r2, #32]
 800450a:	781a      	ldrb	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29b      	uxth	r3, r3
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	4619      	mov	r1, r3
 8004520:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004534:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004544:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fe73 	bl	8004264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08c      	sub	sp, #48	; 0x30
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b22      	cmp	r3, #34	; 0x22
 800459a:	f040 80ae 	bne.w	80046fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d117      	bne.n	80045d8 <UART_Receive_IT+0x50>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d113      	bne.n	80045d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	629a      	str	r2, [r3, #40]	; 0x28
 80045d6:	e026      	b.n	8004626 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ea:	d007      	beq.n	80045fc <UART_Receive_IT+0x74>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <UART_Receive_IT+0x82>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	e008      	b.n	800461c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004616:	b2da      	uxtb	r2, r3
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4619      	mov	r1, r3
 8004634:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004636:	2b00      	cmp	r3, #0
 8004638:	d15d      	bne.n	80046f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0220 	bic.w	r2, r2, #32
 8004648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0201 	bic.w	r2, r2, #1
 8004668:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	2b01      	cmp	r3, #1
 800467e:	d135      	bne.n	80046ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	613b      	str	r3, [r7, #16]
   return(result);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f023 0310 	bic.w	r3, r3, #16
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a6:	623a      	str	r2, [r7, #32]
 80046a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	69f9      	ldr	r1, [r7, #28]
 80046ac:	6a3a      	ldr	r2, [r7, #32]
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e5      	bne.n	8004686 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d10a      	bne.n	80046de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046e2:	4619      	mov	r1, r3
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fdd1 	bl	800428c <HAL_UARTEx_RxEventCallback>
 80046ea:	e002      	b.n	80046f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fc fcf5 	bl	80010dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e002      	b.n	80046fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3730      	adds	r7, #48	; 0x30
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b0c0      	sub	sp, #256	; 0x100
 800470a:	af00      	add	r7, sp, #0
 800470c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	68d9      	ldr	r1, [r3, #12]
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	ea40 0301 	orr.w	r3, r0, r1
 800472c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	431a      	orrs	r2, r3
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	431a      	orrs	r2, r3
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800475c:	f021 010c 	bic.w	r1, r1, #12
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800476a:	430b      	orrs	r3, r1
 800476c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477e:	6999      	ldr	r1, [r3, #24]
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	ea40 0301 	orr.w	r3, r0, r1
 800478a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b8f      	ldr	r3, [pc, #572]	; (80049d0 <UART_SetConfig+0x2cc>)
 8004794:	429a      	cmp	r2, r3
 8004796:	d005      	beq.n	80047a4 <UART_SetConfig+0xa0>
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <UART_SetConfig+0x2d0>)
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d104      	bne.n	80047ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047a4:	f7fe f9d2 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 80047a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047ac:	e003      	b.n	80047b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ae:	f7fe f9b9 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 80047b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c0:	f040 810c 	bne.w	80049dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047d6:	4622      	mov	r2, r4
 80047d8:	462b      	mov	r3, r5
 80047da:	1891      	adds	r1, r2, r2
 80047dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80047de:	415b      	adcs	r3, r3
 80047e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047e6:	4621      	mov	r1, r4
 80047e8:	eb12 0801 	adds.w	r8, r2, r1
 80047ec:	4629      	mov	r1, r5
 80047ee:	eb43 0901 	adc.w	r9, r3, r1
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004806:	4690      	mov	r8, r2
 8004808:	4699      	mov	r9, r3
 800480a:	4623      	mov	r3, r4
 800480c:	eb18 0303 	adds.w	r3, r8, r3
 8004810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004814:	462b      	mov	r3, r5
 8004816:	eb49 0303 	adc.w	r3, r9, r3
 800481a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800482a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800482e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004832:	460b      	mov	r3, r1
 8004834:	18db      	adds	r3, r3, r3
 8004836:	653b      	str	r3, [r7, #80]	; 0x50
 8004838:	4613      	mov	r3, r2
 800483a:	eb42 0303 	adc.w	r3, r2, r3
 800483e:	657b      	str	r3, [r7, #84]	; 0x54
 8004840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004844:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004848:	f7fb fd1a 	bl	8000280 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <UART_SetConfig+0x2d4>)
 8004852:	fba3 2302 	umull	r2, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	011c      	lsls	r4, r3, #4
 800485a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004864:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004868:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	1891      	adds	r1, r2, r2
 8004872:	64b9      	str	r1, [r7, #72]	; 0x48
 8004874:	415b      	adcs	r3, r3
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800487c:	4641      	mov	r1, r8
 800487e:	eb12 0a01 	adds.w	sl, r2, r1
 8004882:	4649      	mov	r1, r9
 8004884:	eb43 0b01 	adc.w	fp, r3, r1
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004894:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800489c:	4692      	mov	sl, r2
 800489e:	469b      	mov	fp, r3
 80048a0:	4643      	mov	r3, r8
 80048a2:	eb1a 0303 	adds.w	r3, sl, r3
 80048a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048aa:	464b      	mov	r3, r9
 80048ac:	eb4b 0303 	adc.w	r3, fp, r3
 80048b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048c8:	460b      	mov	r3, r1
 80048ca:	18db      	adds	r3, r3, r3
 80048cc:	643b      	str	r3, [r7, #64]	; 0x40
 80048ce:	4613      	mov	r3, r2
 80048d0:	eb42 0303 	adc.w	r3, r2, r3
 80048d4:	647b      	str	r3, [r7, #68]	; 0x44
 80048d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048de:	f7fb fccf 	bl	8000280 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <UART_SetConfig+0x2d4>)
 80048ea:	fba3 2301 	umull	r2, r3, r3, r1
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	2264      	movs	r2, #100	; 0x64
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	1acb      	subs	r3, r1, r3
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048fe:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <UART_SetConfig+0x2d4>)
 8004900:	fba3 2302 	umull	r2, r3, r3, r2
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800490c:	441c      	add	r4, r3
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004918:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800491c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	63b9      	str	r1, [r7, #56]	; 0x38
 8004928:	415b      	adcs	r3, r3
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004930:	4641      	mov	r1, r8
 8004932:	1851      	adds	r1, r2, r1
 8004934:	6339      	str	r1, [r7, #48]	; 0x30
 8004936:	4649      	mov	r1, r9
 8004938:	414b      	adcs	r3, r1
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004948:	4659      	mov	r1, fp
 800494a:	00cb      	lsls	r3, r1, #3
 800494c:	4651      	mov	r1, sl
 800494e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004952:	4651      	mov	r1, sl
 8004954:	00ca      	lsls	r2, r1, #3
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	4603      	mov	r3, r0
 800495c:	4642      	mov	r2, r8
 800495e:	189b      	adds	r3, r3, r2
 8004960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004964:	464b      	mov	r3, r9
 8004966:	460a      	mov	r2, r1
 8004968:	eb42 0303 	adc.w	r3, r2, r3
 800496c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800497c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004984:	460b      	mov	r3, r1
 8004986:	18db      	adds	r3, r3, r3
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
 800498a:	4613      	mov	r3, r2
 800498c:	eb42 0303 	adc.w	r3, r2, r3
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004996:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800499a:	f7fb fc71 	bl	8000280 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <UART_SetConfig+0x2d4>)
 80049a4:	fba3 1302 	umull	r1, r3, r3, r2
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	2164      	movs	r1, #100	; 0x64
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	3332      	adds	r3, #50	; 0x32
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <UART_SetConfig+0x2d4>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	f003 0207 	and.w	r2, r3, #7
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4422      	add	r2, r4
 80049ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049cc:	e106      	b.n	8004bdc <UART_SetConfig+0x4d8>
 80049ce:	bf00      	nop
 80049d0:	40011000 	.word	0x40011000
 80049d4:	40011400 	.word	0x40011400
 80049d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049ee:	4642      	mov	r2, r8
 80049f0:	464b      	mov	r3, r9
 80049f2:	1891      	adds	r1, r2, r2
 80049f4:	6239      	str	r1, [r7, #32]
 80049f6:	415b      	adcs	r3, r3
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049fe:	4641      	mov	r1, r8
 8004a00:	1854      	adds	r4, r2, r1
 8004a02:	4649      	mov	r1, r9
 8004a04:	eb43 0501 	adc.w	r5, r3, r1
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	00eb      	lsls	r3, r5, #3
 8004a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a16:	00e2      	lsls	r2, r4, #3
 8004a18:	4614      	mov	r4, r2
 8004a1a:	461d      	mov	r5, r3
 8004a1c:	4643      	mov	r3, r8
 8004a1e:	18e3      	adds	r3, r4, r3
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a24:	464b      	mov	r3, r9
 8004a26:	eb45 0303 	adc.w	r3, r5, r3
 8004a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	008b      	lsls	r3, r1, #2
 8004a4e:	4621      	mov	r1, r4
 8004a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a54:	4621      	mov	r1, r4
 8004a56:	008a      	lsls	r2, r1, #2
 8004a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a5c:	f7fb fc10 	bl	8000280 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4b60      	ldr	r3, [pc, #384]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004a66:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	011c      	lsls	r4, r3, #4
 8004a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	61b9      	str	r1, [r7, #24]
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a90:	4641      	mov	r1, r8
 8004a92:	1851      	adds	r1, r2, r1
 8004a94:	6139      	str	r1, [r7, #16]
 8004a96:	4649      	mov	r1, r9
 8004a98:	414b      	adcs	r3, r1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	00cb      	lsls	r3, r1, #3
 8004aac:	4651      	mov	r1, sl
 8004aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	00ca      	lsls	r2, r1, #3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	4642      	mov	r2, r8
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	eb42 0303 	adc.w	r3, r2, r3
 8004acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ada:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ae8:	4649      	mov	r1, r9
 8004aea:	008b      	lsls	r3, r1, #2
 8004aec:	4641      	mov	r1, r8
 8004aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af2:	4641      	mov	r1, r8
 8004af4:	008a      	lsls	r2, r1, #2
 8004af6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004afa:	f7fb fbc1 	bl	8000280 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004b06:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	2264      	movs	r2, #100	; 0x64
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	1acb      	subs	r3, r1, r3
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	3332      	adds	r3, #50	; 0x32
 8004b18:	4a33      	ldr	r2, [pc, #204]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b24:	441c      	add	r4, r3
 8004b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b2e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	1891      	adds	r1, r2, r2
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b44:	4641      	mov	r1, r8
 8004b46:	1851      	adds	r1, r2, r1
 8004b48:	6039      	str	r1, [r7, #0]
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	607b      	str	r3, [r7, #4]
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4651      	mov	r1, sl
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4642      	mov	r2, r8
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b76:	464b      	mov	r3, r9
 8004b78:	460a      	mov	r2, r1
 8004b7a:	eb42 0303 	adc.w	r3, r2, r3
 8004b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	663b      	str	r3, [r7, #96]	; 0x60
 8004b8a:	667a      	str	r2, [r7, #100]	; 0x64
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b98:	4649      	mov	r1, r9
 8004b9a:	008b      	lsls	r3, r1, #2
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	008a      	lsls	r2, r1, #2
 8004ba6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004baa:	f7fb fb69 	bl	8000280 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	2164      	movs	r1, #100	; 0x64
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	3332      	adds	r3, #50	; 0x32
 8004bc6:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4422      	add	r2, r4
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004be2:	46bd      	mov	sp, r7
 8004be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be8:	51eb851f 	.word	0x51eb851f

08004bec <atoi>:
 8004bec:	220a      	movs	r2, #10
 8004bee:	2100      	movs	r1, #0
 8004bf0:	f000 b882 	b.w	8004cf8 <strtol>

08004bf4 <_strtol_l.constprop.0>:
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfa:	d001      	beq.n	8004c00 <_strtol_l.constprop.0+0xc>
 8004bfc:	2b24      	cmp	r3, #36	; 0x24
 8004bfe:	d906      	bls.n	8004c0e <_strtol_l.constprop.0+0x1a>
 8004c00:	f000 fada 	bl	80051b8 <__errno>
 8004c04:	2316      	movs	r3, #22
 8004c06:	6003      	str	r3, [r0, #0]
 8004c08:	2000      	movs	r0, #0
 8004c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004cf4 <_strtol_l.constprop.0+0x100>
 8004c12:	460d      	mov	r5, r1
 8004c14:	462e      	mov	r6, r5
 8004c16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004c1e:	f017 0708 	ands.w	r7, r7, #8
 8004c22:	d1f7      	bne.n	8004c14 <_strtol_l.constprop.0+0x20>
 8004c24:	2c2d      	cmp	r4, #45	; 0x2d
 8004c26:	d132      	bne.n	8004c8e <_strtol_l.constprop.0+0x9a>
 8004c28:	782c      	ldrb	r4, [r5, #0]
 8004c2a:	2701      	movs	r7, #1
 8004c2c:	1cb5      	adds	r5, r6, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d05b      	beq.n	8004cea <_strtol_l.constprop.0+0xf6>
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d109      	bne.n	8004c4a <_strtol_l.constprop.0+0x56>
 8004c36:	2c30      	cmp	r4, #48	; 0x30
 8004c38:	d107      	bne.n	8004c4a <_strtol_l.constprop.0+0x56>
 8004c3a:	782c      	ldrb	r4, [r5, #0]
 8004c3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004c40:	2c58      	cmp	r4, #88	; 0x58
 8004c42:	d14d      	bne.n	8004ce0 <_strtol_l.constprop.0+0xec>
 8004c44:	786c      	ldrb	r4, [r5, #1]
 8004c46:	2310      	movs	r3, #16
 8004c48:	3502      	adds	r5, #2
 8004c4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004c4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c52:	f04f 0e00 	mov.w	lr, #0
 8004c56:	fbb8 f9f3 	udiv	r9, r8, r3
 8004c5a:	4676      	mov	r6, lr
 8004c5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004c60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004c64:	f1bc 0f09 	cmp.w	ip, #9
 8004c68:	d816      	bhi.n	8004c98 <_strtol_l.constprop.0+0xa4>
 8004c6a:	4664      	mov	r4, ip
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	dd24      	ble.n	8004cba <_strtol_l.constprop.0+0xc6>
 8004c70:	f1be 3fff 	cmp.w	lr, #4294967295
 8004c74:	d008      	beq.n	8004c88 <_strtol_l.constprop.0+0x94>
 8004c76:	45b1      	cmp	r9, r6
 8004c78:	d31c      	bcc.n	8004cb4 <_strtol_l.constprop.0+0xc0>
 8004c7a:	d101      	bne.n	8004c80 <_strtol_l.constprop.0+0x8c>
 8004c7c:	45a2      	cmp	sl, r4
 8004c7e:	db19      	blt.n	8004cb4 <_strtol_l.constprop.0+0xc0>
 8004c80:	fb06 4603 	mla	r6, r6, r3, r4
 8004c84:	f04f 0e01 	mov.w	lr, #1
 8004c88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c8c:	e7e8      	b.n	8004c60 <_strtol_l.constprop.0+0x6c>
 8004c8e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c90:	bf04      	itt	eq
 8004c92:	782c      	ldrbeq	r4, [r5, #0]
 8004c94:	1cb5      	addeq	r5, r6, #2
 8004c96:	e7ca      	b.n	8004c2e <_strtol_l.constprop.0+0x3a>
 8004c98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004c9c:	f1bc 0f19 	cmp.w	ip, #25
 8004ca0:	d801      	bhi.n	8004ca6 <_strtol_l.constprop.0+0xb2>
 8004ca2:	3c37      	subs	r4, #55	; 0x37
 8004ca4:	e7e2      	b.n	8004c6c <_strtol_l.constprop.0+0x78>
 8004ca6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004caa:	f1bc 0f19 	cmp.w	ip, #25
 8004cae:	d804      	bhi.n	8004cba <_strtol_l.constprop.0+0xc6>
 8004cb0:	3c57      	subs	r4, #87	; 0x57
 8004cb2:	e7db      	b.n	8004c6c <_strtol_l.constprop.0+0x78>
 8004cb4:	f04f 3eff 	mov.w	lr, #4294967295
 8004cb8:	e7e6      	b.n	8004c88 <_strtol_l.constprop.0+0x94>
 8004cba:	f1be 3fff 	cmp.w	lr, #4294967295
 8004cbe:	d105      	bne.n	8004ccc <_strtol_l.constprop.0+0xd8>
 8004cc0:	2322      	movs	r3, #34	; 0x22
 8004cc2:	6003      	str	r3, [r0, #0]
 8004cc4:	4646      	mov	r6, r8
 8004cc6:	b942      	cbnz	r2, 8004cda <_strtol_l.constprop.0+0xe6>
 8004cc8:	4630      	mov	r0, r6
 8004cca:	e79e      	b.n	8004c0a <_strtol_l.constprop.0+0x16>
 8004ccc:	b107      	cbz	r7, 8004cd0 <_strtol_l.constprop.0+0xdc>
 8004cce:	4276      	negs	r6, r6
 8004cd0:	2a00      	cmp	r2, #0
 8004cd2:	d0f9      	beq.n	8004cc8 <_strtol_l.constprop.0+0xd4>
 8004cd4:	f1be 0f00 	cmp.w	lr, #0
 8004cd8:	d000      	beq.n	8004cdc <_strtol_l.constprop.0+0xe8>
 8004cda:	1e69      	subs	r1, r5, #1
 8004cdc:	6011      	str	r1, [r2, #0]
 8004cde:	e7f3      	b.n	8004cc8 <_strtol_l.constprop.0+0xd4>
 8004ce0:	2430      	movs	r4, #48	; 0x30
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1b1      	bne.n	8004c4a <_strtol_l.constprop.0+0x56>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	e7af      	b.n	8004c4a <_strtol_l.constprop.0+0x56>
 8004cea:	2c30      	cmp	r4, #48	; 0x30
 8004cec:	d0a5      	beq.n	8004c3a <_strtol_l.constprop.0+0x46>
 8004cee:	230a      	movs	r3, #10
 8004cf0:	e7ab      	b.n	8004c4a <_strtol_l.constprop.0+0x56>
 8004cf2:	bf00      	nop
 8004cf4:	08005ca9 	.word	0x08005ca9

08004cf8 <strtol>:
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	4601      	mov	r1, r0
 8004cfe:	4802      	ldr	r0, [pc, #8]	; (8004d08 <strtol+0x10>)
 8004d00:	6800      	ldr	r0, [r0, #0]
 8004d02:	f7ff bf77 	b.w	8004bf4 <_strtol_l.constprop.0>
 8004d06:	bf00      	nop
 8004d08:	20000070 	.word	0x20000070

08004d0c <std>:
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	b510      	push	{r4, lr}
 8004d10:	4604      	mov	r4, r0
 8004d12:	e9c0 3300 	strd	r3, r3, [r0]
 8004d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d1a:	6083      	str	r3, [r0, #8]
 8004d1c:	8181      	strh	r1, [r0, #12]
 8004d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d20:	81c2      	strh	r2, [r0, #14]
 8004d22:	6183      	str	r3, [r0, #24]
 8004d24:	4619      	mov	r1, r3
 8004d26:	2208      	movs	r2, #8
 8004d28:	305c      	adds	r0, #92	; 0x5c
 8004d2a:	f000 f9f7 	bl	800511c <memset>
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <std+0x58>)
 8004d30:	6263      	str	r3, [r4, #36]	; 0x24
 8004d32:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <std+0x5c>)
 8004d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <std+0x60>)
 8004d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <std+0x64>)
 8004d3c:	6323      	str	r3, [r4, #48]	; 0x30
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <std+0x68>)
 8004d40:	6224      	str	r4, [r4, #32]
 8004d42:	429c      	cmp	r4, r3
 8004d44:	d006      	beq.n	8004d54 <std+0x48>
 8004d46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004d4a:	4294      	cmp	r4, r2
 8004d4c:	d002      	beq.n	8004d54 <std+0x48>
 8004d4e:	33d0      	adds	r3, #208	; 0xd0
 8004d50:	429c      	cmp	r4, r3
 8004d52:	d105      	bne.n	8004d60 <std+0x54>
 8004d54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d5c:	f000 ba56 	b.w	800520c <__retarget_lock_init_recursive>
 8004d60:	bd10      	pop	{r4, pc}
 8004d62:	bf00      	nop
 8004d64:	08004f6d 	.word	0x08004f6d
 8004d68:	08004f8f 	.word	0x08004f8f
 8004d6c:	08004fc7 	.word	0x08004fc7
 8004d70:	08004feb 	.word	0x08004feb
 8004d74:	20000304 	.word	0x20000304

08004d78 <stdio_exit_handler>:
 8004d78:	4a02      	ldr	r2, [pc, #8]	; (8004d84 <stdio_exit_handler+0xc>)
 8004d7a:	4903      	ldr	r1, [pc, #12]	; (8004d88 <stdio_exit_handler+0x10>)
 8004d7c:	4803      	ldr	r0, [pc, #12]	; (8004d8c <stdio_exit_handler+0x14>)
 8004d7e:	f000 b869 	b.w	8004e54 <_fwalk_sglue>
 8004d82:	bf00      	nop
 8004d84:	20000018 	.word	0x20000018
 8004d88:	08005ab9 	.word	0x08005ab9
 8004d8c:	20000024 	.word	0x20000024

08004d90 <cleanup_stdio>:
 8004d90:	6841      	ldr	r1, [r0, #4]
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <cleanup_stdio+0x34>)
 8004d94:	4299      	cmp	r1, r3
 8004d96:	b510      	push	{r4, lr}
 8004d98:	4604      	mov	r4, r0
 8004d9a:	d001      	beq.n	8004da0 <cleanup_stdio+0x10>
 8004d9c:	f000 fe8c 	bl	8005ab8 <_fflush_r>
 8004da0:	68a1      	ldr	r1, [r4, #8]
 8004da2:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <cleanup_stdio+0x38>)
 8004da4:	4299      	cmp	r1, r3
 8004da6:	d002      	beq.n	8004dae <cleanup_stdio+0x1e>
 8004da8:	4620      	mov	r0, r4
 8004daa:	f000 fe85 	bl	8005ab8 <_fflush_r>
 8004dae:	68e1      	ldr	r1, [r4, #12]
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <cleanup_stdio+0x3c>)
 8004db2:	4299      	cmp	r1, r3
 8004db4:	d004      	beq.n	8004dc0 <cleanup_stdio+0x30>
 8004db6:	4620      	mov	r0, r4
 8004db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dbc:	f000 be7c 	b.w	8005ab8 <_fflush_r>
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000304 	.word	0x20000304
 8004dc8:	2000036c 	.word	0x2000036c
 8004dcc:	200003d4 	.word	0x200003d4

08004dd0 <global_stdio_init.part.0>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <global_stdio_init.part.0+0x30>)
 8004dd4:	4c0b      	ldr	r4, [pc, #44]	; (8004e04 <global_stdio_init.part.0+0x34>)
 8004dd6:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <global_stdio_init.part.0+0x38>)
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	4620      	mov	r0, r4
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2104      	movs	r1, #4
 8004de0:	f7ff ff94 	bl	8004d0c <std>
 8004de4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004de8:	2201      	movs	r2, #1
 8004dea:	2109      	movs	r1, #9
 8004dec:	f7ff ff8e 	bl	8004d0c <std>
 8004df0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004df4:	2202      	movs	r2, #2
 8004df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dfa:	2112      	movs	r1, #18
 8004dfc:	f7ff bf86 	b.w	8004d0c <std>
 8004e00:	2000043c 	.word	0x2000043c
 8004e04:	20000304 	.word	0x20000304
 8004e08:	08004d79 	.word	0x08004d79

08004e0c <__sfp_lock_acquire>:
 8004e0c:	4801      	ldr	r0, [pc, #4]	; (8004e14 <__sfp_lock_acquire+0x8>)
 8004e0e:	f000 b9fe 	b.w	800520e <__retarget_lock_acquire_recursive>
 8004e12:	bf00      	nop
 8004e14:	20000445 	.word	0x20000445

08004e18 <__sfp_lock_release>:
 8004e18:	4801      	ldr	r0, [pc, #4]	; (8004e20 <__sfp_lock_release+0x8>)
 8004e1a:	f000 b9f9 	b.w	8005210 <__retarget_lock_release_recursive>
 8004e1e:	bf00      	nop
 8004e20:	20000445 	.word	0x20000445

08004e24 <__sinit>:
 8004e24:	b510      	push	{r4, lr}
 8004e26:	4604      	mov	r4, r0
 8004e28:	f7ff fff0 	bl	8004e0c <__sfp_lock_acquire>
 8004e2c:	6a23      	ldr	r3, [r4, #32]
 8004e2e:	b11b      	cbz	r3, 8004e38 <__sinit+0x14>
 8004e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e34:	f7ff bff0 	b.w	8004e18 <__sfp_lock_release>
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <__sinit+0x28>)
 8004e3a:	6223      	str	r3, [r4, #32]
 8004e3c:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <__sinit+0x2c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f5      	bne.n	8004e30 <__sinit+0xc>
 8004e44:	f7ff ffc4 	bl	8004dd0 <global_stdio_init.part.0>
 8004e48:	e7f2      	b.n	8004e30 <__sinit+0xc>
 8004e4a:	bf00      	nop
 8004e4c:	08004d91 	.word	0x08004d91
 8004e50:	2000043c 	.word	0x2000043c

08004e54 <_fwalk_sglue>:
 8004e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e58:	4607      	mov	r7, r0
 8004e5a:	4688      	mov	r8, r1
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e64:	f1b9 0901 	subs.w	r9, r9, #1
 8004e68:	d505      	bpl.n	8004e76 <_fwalk_sglue+0x22>
 8004e6a:	6824      	ldr	r4, [r4, #0]
 8004e6c:	2c00      	cmp	r4, #0
 8004e6e:	d1f7      	bne.n	8004e60 <_fwalk_sglue+0xc>
 8004e70:	4630      	mov	r0, r6
 8004e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e76:	89ab      	ldrh	r3, [r5, #12]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d907      	bls.n	8004e8c <_fwalk_sglue+0x38>
 8004e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e80:	3301      	adds	r3, #1
 8004e82:	d003      	beq.n	8004e8c <_fwalk_sglue+0x38>
 8004e84:	4629      	mov	r1, r5
 8004e86:	4638      	mov	r0, r7
 8004e88:	47c0      	blx	r8
 8004e8a:	4306      	orrs	r6, r0
 8004e8c:	3568      	adds	r5, #104	; 0x68
 8004e8e:	e7e9      	b.n	8004e64 <_fwalk_sglue+0x10>

08004e90 <iprintf>:
 8004e90:	b40f      	push	{r0, r1, r2, r3}
 8004e92:	b507      	push	{r0, r1, r2, lr}
 8004e94:	4906      	ldr	r1, [pc, #24]	; (8004eb0 <iprintf+0x20>)
 8004e96:	ab04      	add	r3, sp, #16
 8004e98:	6808      	ldr	r0, [r1, #0]
 8004e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e9e:	6881      	ldr	r1, [r0, #8]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	f000 fad9 	bl	8005458 <_vfiprintf_r>
 8004ea6:	b003      	add	sp, #12
 8004ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eac:	b004      	add	sp, #16
 8004eae:	4770      	bx	lr
 8004eb0:	20000070 	.word	0x20000070

08004eb4 <_puts_r>:
 8004eb4:	6a03      	ldr	r3, [r0, #32]
 8004eb6:	b570      	push	{r4, r5, r6, lr}
 8004eb8:	6884      	ldr	r4, [r0, #8]
 8004eba:	4605      	mov	r5, r0
 8004ebc:	460e      	mov	r6, r1
 8004ebe:	b90b      	cbnz	r3, 8004ec4 <_puts_r+0x10>
 8004ec0:	f7ff ffb0 	bl	8004e24 <__sinit>
 8004ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ec6:	07db      	lsls	r3, r3, #31
 8004ec8:	d405      	bmi.n	8004ed6 <_puts_r+0x22>
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	0598      	lsls	r0, r3, #22
 8004ece:	d402      	bmi.n	8004ed6 <_puts_r+0x22>
 8004ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ed2:	f000 f99c 	bl	800520e <__retarget_lock_acquire_recursive>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	0719      	lsls	r1, r3, #28
 8004eda:	d513      	bpl.n	8004f04 <_puts_r+0x50>
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	b18b      	cbz	r3, 8004f04 <_puts_r+0x50>
 8004ee0:	3e01      	subs	r6, #1
 8004ee2:	68a3      	ldr	r3, [r4, #8]
 8004ee4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	60a3      	str	r3, [r4, #8]
 8004eec:	b9e9      	cbnz	r1, 8004f2a <_puts_r+0x76>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	da2e      	bge.n	8004f50 <_puts_r+0x9c>
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	210a      	movs	r1, #10
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 f87b 	bl	8004ff2 <__swbuf_r>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d007      	beq.n	8004f10 <_puts_r+0x5c>
 8004f00:	250a      	movs	r5, #10
 8004f02:	e007      	b.n	8004f14 <_puts_r+0x60>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f8b0 	bl	800506c <__swsetup_r>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0e7      	beq.n	8004ee0 <_puts_r+0x2c>
 8004f10:	f04f 35ff 	mov.w	r5, #4294967295
 8004f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f16:	07da      	lsls	r2, r3, #31
 8004f18:	d405      	bmi.n	8004f26 <_puts_r+0x72>
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	059b      	lsls	r3, r3, #22
 8004f1e:	d402      	bmi.n	8004f26 <_puts_r+0x72>
 8004f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f22:	f000 f975 	bl	8005210 <__retarget_lock_release_recursive>
 8004f26:	4628      	mov	r0, r5
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da04      	bge.n	8004f38 <_puts_r+0x84>
 8004f2e:	69a2      	ldr	r2, [r4, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	dc06      	bgt.n	8004f42 <_puts_r+0x8e>
 8004f34:	290a      	cmp	r1, #10
 8004f36:	d004      	beq.n	8004f42 <_puts_r+0x8e>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	6022      	str	r2, [r4, #0]
 8004f3e:	7019      	strb	r1, [r3, #0]
 8004f40:	e7cf      	b.n	8004ee2 <_puts_r+0x2e>
 8004f42:	4622      	mov	r2, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 f854 	bl	8004ff2 <__swbuf_r>
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d1c9      	bne.n	8004ee2 <_puts_r+0x2e>
 8004f4e:	e7df      	b.n	8004f10 <_puts_r+0x5c>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	250a      	movs	r5, #10
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	6022      	str	r2, [r4, #0]
 8004f58:	701d      	strb	r5, [r3, #0]
 8004f5a:	e7db      	b.n	8004f14 <_puts_r+0x60>

08004f5c <puts>:
 8004f5c:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <puts+0xc>)
 8004f5e:	4601      	mov	r1, r0
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	f7ff bfa7 	b.w	8004eb4 <_puts_r>
 8004f66:	bf00      	nop
 8004f68:	20000070 	.word	0x20000070

08004f6c <__sread>:
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	460c      	mov	r4, r1
 8004f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f74:	f000 f8fc 	bl	8005170 <_read_r>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	bfab      	itete	ge
 8004f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f80:	181b      	addge	r3, r3, r0
 8004f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f86:	bfac      	ite	ge
 8004f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f8a:	81a3      	strhlt	r3, [r4, #12]
 8004f8c:	bd10      	pop	{r4, pc}

08004f8e <__swrite>:
 8004f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	461f      	mov	r7, r3
 8004f94:	898b      	ldrh	r3, [r1, #12]
 8004f96:	05db      	lsls	r3, r3, #23
 8004f98:	4605      	mov	r5, r0
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	4616      	mov	r6, r2
 8004f9e:	d505      	bpl.n	8004fac <__swrite+0x1e>
 8004fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f000 f8d0 	bl	800514c <_lseek_r>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	4632      	mov	r2, r6
 8004fba:	463b      	mov	r3, r7
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc2:	f000 b8e7 	b.w	8005194 <_write_r>

08004fc6 <__sseek>:
 8004fc6:	b510      	push	{r4, lr}
 8004fc8:	460c      	mov	r4, r1
 8004fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fce:	f000 f8bd 	bl	800514c <_lseek_r>
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	bf15      	itete	ne
 8004fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fe2:	81a3      	strheq	r3, [r4, #12]
 8004fe4:	bf18      	it	ne
 8004fe6:	81a3      	strhne	r3, [r4, #12]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <__sclose>:
 8004fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fee:	f000 b89d 	b.w	800512c <_close_r>

08004ff2 <__swbuf_r>:
 8004ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff4:	460e      	mov	r6, r1
 8004ff6:	4614      	mov	r4, r2
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	b118      	cbz	r0, 8005004 <__swbuf_r+0x12>
 8004ffc:	6a03      	ldr	r3, [r0, #32]
 8004ffe:	b90b      	cbnz	r3, 8005004 <__swbuf_r+0x12>
 8005000:	f7ff ff10 	bl	8004e24 <__sinit>
 8005004:	69a3      	ldr	r3, [r4, #24]
 8005006:	60a3      	str	r3, [r4, #8]
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	071a      	lsls	r2, r3, #28
 800500c:	d525      	bpl.n	800505a <__swbuf_r+0x68>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	b31b      	cbz	r3, 800505a <__swbuf_r+0x68>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	6922      	ldr	r2, [r4, #16]
 8005016:	1a98      	subs	r0, r3, r2
 8005018:	6963      	ldr	r3, [r4, #20]
 800501a:	b2f6      	uxtb	r6, r6
 800501c:	4283      	cmp	r3, r0
 800501e:	4637      	mov	r7, r6
 8005020:	dc04      	bgt.n	800502c <__swbuf_r+0x3a>
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f000 fd47 	bl	8005ab8 <_fflush_r>
 800502a:	b9e0      	cbnz	r0, 8005066 <__swbuf_r+0x74>
 800502c:	68a3      	ldr	r3, [r4, #8]
 800502e:	3b01      	subs	r3, #1
 8005030:	60a3      	str	r3, [r4, #8]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	701e      	strb	r6, [r3, #0]
 800503a:	6962      	ldr	r2, [r4, #20]
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	429a      	cmp	r2, r3
 8005040:	d004      	beq.n	800504c <__swbuf_r+0x5a>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	07db      	lsls	r3, r3, #31
 8005046:	d506      	bpl.n	8005056 <__swbuf_r+0x64>
 8005048:	2e0a      	cmp	r6, #10
 800504a:	d104      	bne.n	8005056 <__swbuf_r+0x64>
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f000 fd32 	bl	8005ab8 <_fflush_r>
 8005054:	b938      	cbnz	r0, 8005066 <__swbuf_r+0x74>
 8005056:	4638      	mov	r0, r7
 8005058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800505a:	4621      	mov	r1, r4
 800505c:	4628      	mov	r0, r5
 800505e:	f000 f805 	bl	800506c <__swsetup_r>
 8005062:	2800      	cmp	r0, #0
 8005064:	d0d5      	beq.n	8005012 <__swbuf_r+0x20>
 8005066:	f04f 37ff 	mov.w	r7, #4294967295
 800506a:	e7f4      	b.n	8005056 <__swbuf_r+0x64>

0800506c <__swsetup_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <__swsetup_r+0xac>)
 8005070:	4605      	mov	r5, r0
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	460c      	mov	r4, r1
 8005076:	b118      	cbz	r0, 8005080 <__swsetup_r+0x14>
 8005078:	6a03      	ldr	r3, [r0, #32]
 800507a:	b90b      	cbnz	r3, 8005080 <__swsetup_r+0x14>
 800507c:	f7ff fed2 	bl	8004e24 <__sinit>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005086:	0718      	lsls	r0, r3, #28
 8005088:	d422      	bmi.n	80050d0 <__swsetup_r+0x64>
 800508a:	06d9      	lsls	r1, r3, #27
 800508c:	d407      	bmi.n	800509e <__swsetup_r+0x32>
 800508e:	2309      	movs	r3, #9
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005096:	81a3      	strh	r3, [r4, #12]
 8005098:	f04f 30ff 	mov.w	r0, #4294967295
 800509c:	e034      	b.n	8005108 <__swsetup_r+0x9c>
 800509e:	0758      	lsls	r0, r3, #29
 80050a0:	d512      	bpl.n	80050c8 <__swsetup_r+0x5c>
 80050a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050a4:	b141      	cbz	r1, 80050b8 <__swsetup_r+0x4c>
 80050a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050aa:	4299      	cmp	r1, r3
 80050ac:	d002      	beq.n	80050b4 <__swsetup_r+0x48>
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 f8b0 	bl	8005214 <_free_r>
 80050b4:	2300      	movs	r3, #0
 80050b6:	6363      	str	r3, [r4, #52]	; 0x34
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	2300      	movs	r3, #0
 80050c2:	6063      	str	r3, [r4, #4]
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	f043 0308 	orr.w	r3, r3, #8
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	6923      	ldr	r3, [r4, #16]
 80050d2:	b94b      	cbnz	r3, 80050e8 <__swsetup_r+0x7c>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050de:	d003      	beq.n	80050e8 <__swsetup_r+0x7c>
 80050e0:	4621      	mov	r1, r4
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 fd36 	bl	8005b54 <__smakebuf_r>
 80050e8:	89a0      	ldrh	r0, [r4, #12]
 80050ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050ee:	f010 0301 	ands.w	r3, r0, #1
 80050f2:	d00a      	beq.n	800510a <__swsetup_r+0x9e>
 80050f4:	2300      	movs	r3, #0
 80050f6:	60a3      	str	r3, [r4, #8]
 80050f8:	6963      	ldr	r3, [r4, #20]
 80050fa:	425b      	negs	r3, r3
 80050fc:	61a3      	str	r3, [r4, #24]
 80050fe:	6923      	ldr	r3, [r4, #16]
 8005100:	b943      	cbnz	r3, 8005114 <__swsetup_r+0xa8>
 8005102:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005106:	d1c4      	bne.n	8005092 <__swsetup_r+0x26>
 8005108:	bd38      	pop	{r3, r4, r5, pc}
 800510a:	0781      	lsls	r1, r0, #30
 800510c:	bf58      	it	pl
 800510e:	6963      	ldrpl	r3, [r4, #20]
 8005110:	60a3      	str	r3, [r4, #8]
 8005112:	e7f4      	b.n	80050fe <__swsetup_r+0x92>
 8005114:	2000      	movs	r0, #0
 8005116:	e7f7      	b.n	8005108 <__swsetup_r+0x9c>
 8005118:	20000070 	.word	0x20000070

0800511c <memset>:
 800511c:	4402      	add	r2, r0
 800511e:	4603      	mov	r3, r0
 8005120:	4293      	cmp	r3, r2
 8005122:	d100      	bne.n	8005126 <memset+0xa>
 8005124:	4770      	bx	lr
 8005126:	f803 1b01 	strb.w	r1, [r3], #1
 800512a:	e7f9      	b.n	8005120 <memset+0x4>

0800512c <_close_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4d06      	ldr	r5, [pc, #24]	; (8005148 <_close_r+0x1c>)
 8005130:	2300      	movs	r3, #0
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	f7fc fbd5 	bl	80018e6 <_close>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_close_r+0x1a>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_close_r+0x1a>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	20000440 	.word	0x20000440

0800514c <_lseek_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4d07      	ldr	r5, [pc, #28]	; (800516c <_lseek_r+0x20>)
 8005150:	4604      	mov	r4, r0
 8005152:	4608      	mov	r0, r1
 8005154:	4611      	mov	r1, r2
 8005156:	2200      	movs	r2, #0
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f7fc fbea 	bl	8001934 <_lseek>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_lseek_r+0x1e>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_lseek_r+0x1e>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	20000440 	.word	0x20000440

08005170 <_read_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4d07      	ldr	r5, [pc, #28]	; (8005190 <_read_r+0x20>)
 8005174:	4604      	mov	r4, r0
 8005176:	4608      	mov	r0, r1
 8005178:	4611      	mov	r1, r2
 800517a:	2200      	movs	r2, #0
 800517c:	602a      	str	r2, [r5, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	f7fc fb78 	bl	8001874 <_read>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_read_r+0x1e>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_read_r+0x1e>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20000440 	.word	0x20000440

08005194 <_write_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d07      	ldr	r5, [pc, #28]	; (80051b4 <_write_r+0x20>)
 8005198:	4604      	mov	r4, r0
 800519a:	4608      	mov	r0, r1
 800519c:	4611      	mov	r1, r2
 800519e:	2200      	movs	r2, #0
 80051a0:	602a      	str	r2, [r5, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f7fc fb83 	bl	80018ae <_write>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_write_r+0x1e>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_write_r+0x1e>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	20000440 	.word	0x20000440

080051b8 <__errno>:
 80051b8:	4b01      	ldr	r3, [pc, #4]	; (80051c0 <__errno+0x8>)
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000070 	.word	0x20000070

080051c4 <__libc_init_array>:
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	4d0d      	ldr	r5, [pc, #52]	; (80051fc <__libc_init_array+0x38>)
 80051c8:	4c0d      	ldr	r4, [pc, #52]	; (8005200 <__libc_init_array+0x3c>)
 80051ca:	1b64      	subs	r4, r4, r5
 80051cc:	10a4      	asrs	r4, r4, #2
 80051ce:	2600      	movs	r6, #0
 80051d0:	42a6      	cmp	r6, r4
 80051d2:	d109      	bne.n	80051e8 <__libc_init_array+0x24>
 80051d4:	4d0b      	ldr	r5, [pc, #44]	; (8005204 <__libc_init_array+0x40>)
 80051d6:	4c0c      	ldr	r4, [pc, #48]	; (8005208 <__libc_init_array+0x44>)
 80051d8:	f000 fd2a 	bl	8005c30 <_init>
 80051dc:	1b64      	subs	r4, r4, r5
 80051de:	10a4      	asrs	r4, r4, #2
 80051e0:	2600      	movs	r6, #0
 80051e2:	42a6      	cmp	r6, r4
 80051e4:	d105      	bne.n	80051f2 <__libc_init_array+0x2e>
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
 80051e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ec:	4798      	blx	r3
 80051ee:	3601      	adds	r6, #1
 80051f0:	e7ee      	b.n	80051d0 <__libc_init_array+0xc>
 80051f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f6:	4798      	blx	r3
 80051f8:	3601      	adds	r6, #1
 80051fa:	e7f2      	b.n	80051e2 <__libc_init_array+0x1e>
 80051fc:	08005de4 	.word	0x08005de4
 8005200:	08005de4 	.word	0x08005de4
 8005204:	08005de4 	.word	0x08005de4
 8005208:	08005de8 	.word	0x08005de8

0800520c <__retarget_lock_init_recursive>:
 800520c:	4770      	bx	lr

0800520e <__retarget_lock_acquire_recursive>:
 800520e:	4770      	bx	lr

08005210 <__retarget_lock_release_recursive>:
 8005210:	4770      	bx	lr
	...

08005214 <_free_r>:
 8005214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005216:	2900      	cmp	r1, #0
 8005218:	d044      	beq.n	80052a4 <_free_r+0x90>
 800521a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521e:	9001      	str	r0, [sp, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f1a1 0404 	sub.w	r4, r1, #4
 8005226:	bfb8      	it	lt
 8005228:	18e4      	addlt	r4, r4, r3
 800522a:	f000 f8df 	bl	80053ec <__malloc_lock>
 800522e:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <_free_r+0x94>)
 8005230:	9801      	ldr	r0, [sp, #4]
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	b933      	cbnz	r3, 8005244 <_free_r+0x30>
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	6014      	str	r4, [r2, #0]
 800523a:	b003      	add	sp, #12
 800523c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005240:	f000 b8da 	b.w	80053f8 <__malloc_unlock>
 8005244:	42a3      	cmp	r3, r4
 8005246:	d908      	bls.n	800525a <_free_r+0x46>
 8005248:	6825      	ldr	r5, [r4, #0]
 800524a:	1961      	adds	r1, r4, r5
 800524c:	428b      	cmp	r3, r1
 800524e:	bf01      	itttt	eq
 8005250:	6819      	ldreq	r1, [r3, #0]
 8005252:	685b      	ldreq	r3, [r3, #4]
 8005254:	1949      	addeq	r1, r1, r5
 8005256:	6021      	streq	r1, [r4, #0]
 8005258:	e7ed      	b.n	8005236 <_free_r+0x22>
 800525a:	461a      	mov	r2, r3
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	b10b      	cbz	r3, 8005264 <_free_r+0x50>
 8005260:	42a3      	cmp	r3, r4
 8005262:	d9fa      	bls.n	800525a <_free_r+0x46>
 8005264:	6811      	ldr	r1, [r2, #0]
 8005266:	1855      	adds	r5, r2, r1
 8005268:	42a5      	cmp	r5, r4
 800526a:	d10b      	bne.n	8005284 <_free_r+0x70>
 800526c:	6824      	ldr	r4, [r4, #0]
 800526e:	4421      	add	r1, r4
 8005270:	1854      	adds	r4, r2, r1
 8005272:	42a3      	cmp	r3, r4
 8005274:	6011      	str	r1, [r2, #0]
 8005276:	d1e0      	bne.n	800523a <_free_r+0x26>
 8005278:	681c      	ldr	r4, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	6053      	str	r3, [r2, #4]
 800527e:	440c      	add	r4, r1
 8005280:	6014      	str	r4, [r2, #0]
 8005282:	e7da      	b.n	800523a <_free_r+0x26>
 8005284:	d902      	bls.n	800528c <_free_r+0x78>
 8005286:	230c      	movs	r3, #12
 8005288:	6003      	str	r3, [r0, #0]
 800528a:	e7d6      	b.n	800523a <_free_r+0x26>
 800528c:	6825      	ldr	r5, [r4, #0]
 800528e:	1961      	adds	r1, r4, r5
 8005290:	428b      	cmp	r3, r1
 8005292:	bf04      	itt	eq
 8005294:	6819      	ldreq	r1, [r3, #0]
 8005296:	685b      	ldreq	r3, [r3, #4]
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	bf04      	itt	eq
 800529c:	1949      	addeq	r1, r1, r5
 800529e:	6021      	streq	r1, [r4, #0]
 80052a0:	6054      	str	r4, [r2, #4]
 80052a2:	e7ca      	b.n	800523a <_free_r+0x26>
 80052a4:	b003      	add	sp, #12
 80052a6:	bd30      	pop	{r4, r5, pc}
 80052a8:	20000448 	.word	0x20000448

080052ac <sbrk_aligned>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4e0e      	ldr	r6, [pc, #56]	; (80052e8 <sbrk_aligned+0x3c>)
 80052b0:	460c      	mov	r4, r1
 80052b2:	6831      	ldr	r1, [r6, #0]
 80052b4:	4605      	mov	r5, r0
 80052b6:	b911      	cbnz	r1, 80052be <sbrk_aligned+0x12>
 80052b8:	f000 fcaa 	bl	8005c10 <_sbrk_r>
 80052bc:	6030      	str	r0, [r6, #0]
 80052be:	4621      	mov	r1, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 fca5 	bl	8005c10 <_sbrk_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d00a      	beq.n	80052e0 <sbrk_aligned+0x34>
 80052ca:	1cc4      	adds	r4, r0, #3
 80052cc:	f024 0403 	bic.w	r4, r4, #3
 80052d0:	42a0      	cmp	r0, r4
 80052d2:	d007      	beq.n	80052e4 <sbrk_aligned+0x38>
 80052d4:	1a21      	subs	r1, r4, r0
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 fc9a 	bl	8005c10 <_sbrk_r>
 80052dc:	3001      	adds	r0, #1
 80052de:	d101      	bne.n	80052e4 <sbrk_aligned+0x38>
 80052e0:	f04f 34ff 	mov.w	r4, #4294967295
 80052e4:	4620      	mov	r0, r4
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	2000044c 	.word	0x2000044c

080052ec <_malloc_r>:
 80052ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f0:	1ccd      	adds	r5, r1, #3
 80052f2:	f025 0503 	bic.w	r5, r5, #3
 80052f6:	3508      	adds	r5, #8
 80052f8:	2d0c      	cmp	r5, #12
 80052fa:	bf38      	it	cc
 80052fc:	250c      	movcc	r5, #12
 80052fe:	2d00      	cmp	r5, #0
 8005300:	4607      	mov	r7, r0
 8005302:	db01      	blt.n	8005308 <_malloc_r+0x1c>
 8005304:	42a9      	cmp	r1, r5
 8005306:	d905      	bls.n	8005314 <_malloc_r+0x28>
 8005308:	230c      	movs	r3, #12
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	2600      	movs	r6, #0
 800530e:	4630      	mov	r0, r6
 8005310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005314:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053e8 <_malloc_r+0xfc>
 8005318:	f000 f868 	bl	80053ec <__malloc_lock>
 800531c:	f8d8 3000 	ldr.w	r3, [r8]
 8005320:	461c      	mov	r4, r3
 8005322:	bb5c      	cbnz	r4, 800537c <_malloc_r+0x90>
 8005324:	4629      	mov	r1, r5
 8005326:	4638      	mov	r0, r7
 8005328:	f7ff ffc0 	bl	80052ac <sbrk_aligned>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	4604      	mov	r4, r0
 8005330:	d155      	bne.n	80053de <_malloc_r+0xf2>
 8005332:	f8d8 4000 	ldr.w	r4, [r8]
 8005336:	4626      	mov	r6, r4
 8005338:	2e00      	cmp	r6, #0
 800533a:	d145      	bne.n	80053c8 <_malloc_r+0xdc>
 800533c:	2c00      	cmp	r4, #0
 800533e:	d048      	beq.n	80053d2 <_malloc_r+0xe6>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	4631      	mov	r1, r6
 8005344:	4638      	mov	r0, r7
 8005346:	eb04 0903 	add.w	r9, r4, r3
 800534a:	f000 fc61 	bl	8005c10 <_sbrk_r>
 800534e:	4581      	cmp	r9, r0
 8005350:	d13f      	bne.n	80053d2 <_malloc_r+0xe6>
 8005352:	6821      	ldr	r1, [r4, #0]
 8005354:	1a6d      	subs	r5, r5, r1
 8005356:	4629      	mov	r1, r5
 8005358:	4638      	mov	r0, r7
 800535a:	f7ff ffa7 	bl	80052ac <sbrk_aligned>
 800535e:	3001      	adds	r0, #1
 8005360:	d037      	beq.n	80053d2 <_malloc_r+0xe6>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	442b      	add	r3, r5
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	f8d8 3000 	ldr.w	r3, [r8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d038      	beq.n	80053e2 <_malloc_r+0xf6>
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	42a2      	cmp	r2, r4
 8005374:	d12b      	bne.n	80053ce <_malloc_r+0xe2>
 8005376:	2200      	movs	r2, #0
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	e00f      	b.n	800539c <_malloc_r+0xb0>
 800537c:	6822      	ldr	r2, [r4, #0]
 800537e:	1b52      	subs	r2, r2, r5
 8005380:	d41f      	bmi.n	80053c2 <_malloc_r+0xd6>
 8005382:	2a0b      	cmp	r2, #11
 8005384:	d917      	bls.n	80053b6 <_malloc_r+0xca>
 8005386:	1961      	adds	r1, r4, r5
 8005388:	42a3      	cmp	r3, r4
 800538a:	6025      	str	r5, [r4, #0]
 800538c:	bf18      	it	ne
 800538e:	6059      	strne	r1, [r3, #4]
 8005390:	6863      	ldr	r3, [r4, #4]
 8005392:	bf08      	it	eq
 8005394:	f8c8 1000 	streq.w	r1, [r8]
 8005398:	5162      	str	r2, [r4, r5]
 800539a:	604b      	str	r3, [r1, #4]
 800539c:	4638      	mov	r0, r7
 800539e:	f104 060b 	add.w	r6, r4, #11
 80053a2:	f000 f829 	bl	80053f8 <__malloc_unlock>
 80053a6:	f026 0607 	bic.w	r6, r6, #7
 80053aa:	1d23      	adds	r3, r4, #4
 80053ac:	1af2      	subs	r2, r6, r3
 80053ae:	d0ae      	beq.n	800530e <_malloc_r+0x22>
 80053b0:	1b9b      	subs	r3, r3, r6
 80053b2:	50a3      	str	r3, [r4, r2]
 80053b4:	e7ab      	b.n	800530e <_malloc_r+0x22>
 80053b6:	42a3      	cmp	r3, r4
 80053b8:	6862      	ldr	r2, [r4, #4]
 80053ba:	d1dd      	bne.n	8005378 <_malloc_r+0x8c>
 80053bc:	f8c8 2000 	str.w	r2, [r8]
 80053c0:	e7ec      	b.n	800539c <_malloc_r+0xb0>
 80053c2:	4623      	mov	r3, r4
 80053c4:	6864      	ldr	r4, [r4, #4]
 80053c6:	e7ac      	b.n	8005322 <_malloc_r+0x36>
 80053c8:	4634      	mov	r4, r6
 80053ca:	6876      	ldr	r6, [r6, #4]
 80053cc:	e7b4      	b.n	8005338 <_malloc_r+0x4c>
 80053ce:	4613      	mov	r3, r2
 80053d0:	e7cc      	b.n	800536c <_malloc_r+0x80>
 80053d2:	230c      	movs	r3, #12
 80053d4:	603b      	str	r3, [r7, #0]
 80053d6:	4638      	mov	r0, r7
 80053d8:	f000 f80e 	bl	80053f8 <__malloc_unlock>
 80053dc:	e797      	b.n	800530e <_malloc_r+0x22>
 80053de:	6025      	str	r5, [r4, #0]
 80053e0:	e7dc      	b.n	800539c <_malloc_r+0xb0>
 80053e2:	605b      	str	r3, [r3, #4]
 80053e4:	deff      	udf	#255	; 0xff
 80053e6:	bf00      	nop
 80053e8:	20000448 	.word	0x20000448

080053ec <__malloc_lock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__malloc_lock+0x8>)
 80053ee:	f7ff bf0e 	b.w	800520e <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	20000444 	.word	0x20000444

080053f8 <__malloc_unlock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_unlock+0x8>)
 80053fa:	f7ff bf09 	b.w	8005210 <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	20000444 	.word	0x20000444

08005404 <__sfputc_r>:
 8005404:	6893      	ldr	r3, [r2, #8]
 8005406:	3b01      	subs	r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	b410      	push	{r4}
 800540c:	6093      	str	r3, [r2, #8]
 800540e:	da08      	bge.n	8005422 <__sfputc_r+0x1e>
 8005410:	6994      	ldr	r4, [r2, #24]
 8005412:	42a3      	cmp	r3, r4
 8005414:	db01      	blt.n	800541a <__sfputc_r+0x16>
 8005416:	290a      	cmp	r1, #10
 8005418:	d103      	bne.n	8005422 <__sfputc_r+0x1e>
 800541a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800541e:	f7ff bde8 	b.w	8004ff2 <__swbuf_r>
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	1c58      	adds	r0, r3, #1
 8005426:	6010      	str	r0, [r2, #0]
 8005428:	7019      	strb	r1, [r3, #0]
 800542a:	4608      	mov	r0, r1
 800542c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005430:	4770      	bx	lr

08005432 <__sfputs_r>:
 8005432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005434:	4606      	mov	r6, r0
 8005436:	460f      	mov	r7, r1
 8005438:	4614      	mov	r4, r2
 800543a:	18d5      	adds	r5, r2, r3
 800543c:	42ac      	cmp	r4, r5
 800543e:	d101      	bne.n	8005444 <__sfputs_r+0x12>
 8005440:	2000      	movs	r0, #0
 8005442:	e007      	b.n	8005454 <__sfputs_r+0x22>
 8005444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005448:	463a      	mov	r2, r7
 800544a:	4630      	mov	r0, r6
 800544c:	f7ff ffda 	bl	8005404 <__sfputc_r>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d1f3      	bne.n	800543c <__sfputs_r+0xa>
 8005454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005458 <_vfiprintf_r>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	460d      	mov	r5, r1
 800545e:	b09d      	sub	sp, #116	; 0x74
 8005460:	4614      	mov	r4, r2
 8005462:	4698      	mov	r8, r3
 8005464:	4606      	mov	r6, r0
 8005466:	b118      	cbz	r0, 8005470 <_vfiprintf_r+0x18>
 8005468:	6a03      	ldr	r3, [r0, #32]
 800546a:	b90b      	cbnz	r3, 8005470 <_vfiprintf_r+0x18>
 800546c:	f7ff fcda 	bl	8004e24 <__sinit>
 8005470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	d405      	bmi.n	8005482 <_vfiprintf_r+0x2a>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	059a      	lsls	r2, r3, #22
 800547a:	d402      	bmi.n	8005482 <_vfiprintf_r+0x2a>
 800547c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547e:	f7ff fec6 	bl	800520e <__retarget_lock_acquire_recursive>
 8005482:	89ab      	ldrh	r3, [r5, #12]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	d501      	bpl.n	800548c <_vfiprintf_r+0x34>
 8005488:	692b      	ldr	r3, [r5, #16]
 800548a:	b99b      	cbnz	r3, 80054b4 <_vfiprintf_r+0x5c>
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f7ff fdec 	bl	800506c <__swsetup_r>
 8005494:	b170      	cbz	r0, 80054b4 <_vfiprintf_r+0x5c>
 8005496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005498:	07dc      	lsls	r4, r3, #31
 800549a:	d504      	bpl.n	80054a6 <_vfiprintf_r+0x4e>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	b01d      	add	sp, #116	; 0x74
 80054a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a6:	89ab      	ldrh	r3, [r5, #12]
 80054a8:	0598      	lsls	r0, r3, #22
 80054aa:	d4f7      	bmi.n	800549c <_vfiprintf_r+0x44>
 80054ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ae:	f7ff feaf 	bl	8005210 <__retarget_lock_release_recursive>
 80054b2:	e7f3      	b.n	800549c <_vfiprintf_r+0x44>
 80054b4:	2300      	movs	r3, #0
 80054b6:	9309      	str	r3, [sp, #36]	; 0x24
 80054b8:	2320      	movs	r3, #32
 80054ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054be:	f8cd 800c 	str.w	r8, [sp, #12]
 80054c2:	2330      	movs	r3, #48	; 0x30
 80054c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005678 <_vfiprintf_r+0x220>
 80054c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054cc:	f04f 0901 	mov.w	r9, #1
 80054d0:	4623      	mov	r3, r4
 80054d2:	469a      	mov	sl, r3
 80054d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054d8:	b10a      	cbz	r2, 80054de <_vfiprintf_r+0x86>
 80054da:	2a25      	cmp	r2, #37	; 0x25
 80054dc:	d1f9      	bne.n	80054d2 <_vfiprintf_r+0x7a>
 80054de:	ebba 0b04 	subs.w	fp, sl, r4
 80054e2:	d00b      	beq.n	80054fc <_vfiprintf_r+0xa4>
 80054e4:	465b      	mov	r3, fp
 80054e6:	4622      	mov	r2, r4
 80054e8:	4629      	mov	r1, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7ff ffa1 	bl	8005432 <__sfputs_r>
 80054f0:	3001      	adds	r0, #1
 80054f2:	f000 80a9 	beq.w	8005648 <_vfiprintf_r+0x1f0>
 80054f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f8:	445a      	add	r2, fp
 80054fa:	9209      	str	r2, [sp, #36]	; 0x24
 80054fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80a1 	beq.w	8005648 <_vfiprintf_r+0x1f0>
 8005506:	2300      	movs	r3, #0
 8005508:	f04f 32ff 	mov.w	r2, #4294967295
 800550c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005510:	f10a 0a01 	add.w	sl, sl, #1
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	9307      	str	r3, [sp, #28]
 8005518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800551c:	931a      	str	r3, [sp, #104]	; 0x68
 800551e:	4654      	mov	r4, sl
 8005520:	2205      	movs	r2, #5
 8005522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005526:	4854      	ldr	r0, [pc, #336]	; (8005678 <_vfiprintf_r+0x220>)
 8005528:	f7fa fe5a 	bl	80001e0 <memchr>
 800552c:	9a04      	ldr	r2, [sp, #16]
 800552e:	b9d8      	cbnz	r0, 8005568 <_vfiprintf_r+0x110>
 8005530:	06d1      	lsls	r1, r2, #27
 8005532:	bf44      	itt	mi
 8005534:	2320      	movmi	r3, #32
 8005536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800553a:	0713      	lsls	r3, r2, #28
 800553c:	bf44      	itt	mi
 800553e:	232b      	movmi	r3, #43	; 0x2b
 8005540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005544:	f89a 3000 	ldrb.w	r3, [sl]
 8005548:	2b2a      	cmp	r3, #42	; 0x2a
 800554a:	d015      	beq.n	8005578 <_vfiprintf_r+0x120>
 800554c:	9a07      	ldr	r2, [sp, #28]
 800554e:	4654      	mov	r4, sl
 8005550:	2000      	movs	r0, #0
 8005552:	f04f 0c0a 	mov.w	ip, #10
 8005556:	4621      	mov	r1, r4
 8005558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800555c:	3b30      	subs	r3, #48	; 0x30
 800555e:	2b09      	cmp	r3, #9
 8005560:	d94d      	bls.n	80055fe <_vfiprintf_r+0x1a6>
 8005562:	b1b0      	cbz	r0, 8005592 <_vfiprintf_r+0x13a>
 8005564:	9207      	str	r2, [sp, #28]
 8005566:	e014      	b.n	8005592 <_vfiprintf_r+0x13a>
 8005568:	eba0 0308 	sub.w	r3, r0, r8
 800556c:	fa09 f303 	lsl.w	r3, r9, r3
 8005570:	4313      	orrs	r3, r2
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	46a2      	mov	sl, r4
 8005576:	e7d2      	b.n	800551e <_vfiprintf_r+0xc6>
 8005578:	9b03      	ldr	r3, [sp, #12]
 800557a:	1d19      	adds	r1, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	9103      	str	r1, [sp, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	bfbb      	ittet	lt
 8005584:	425b      	neglt	r3, r3
 8005586:	f042 0202 	orrlt.w	r2, r2, #2
 800558a:	9307      	strge	r3, [sp, #28]
 800558c:	9307      	strlt	r3, [sp, #28]
 800558e:	bfb8      	it	lt
 8005590:	9204      	strlt	r2, [sp, #16]
 8005592:	7823      	ldrb	r3, [r4, #0]
 8005594:	2b2e      	cmp	r3, #46	; 0x2e
 8005596:	d10c      	bne.n	80055b2 <_vfiprintf_r+0x15a>
 8005598:	7863      	ldrb	r3, [r4, #1]
 800559a:	2b2a      	cmp	r3, #42	; 0x2a
 800559c:	d134      	bne.n	8005608 <_vfiprintf_r+0x1b0>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	9203      	str	r2, [sp, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bfb8      	it	lt
 80055aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80055ae:	3402      	adds	r4, #2
 80055b0:	9305      	str	r3, [sp, #20]
 80055b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005688 <_vfiprintf_r+0x230>
 80055b6:	7821      	ldrb	r1, [r4, #0]
 80055b8:	2203      	movs	r2, #3
 80055ba:	4650      	mov	r0, sl
 80055bc:	f7fa fe10 	bl	80001e0 <memchr>
 80055c0:	b138      	cbz	r0, 80055d2 <_vfiprintf_r+0x17a>
 80055c2:	9b04      	ldr	r3, [sp, #16]
 80055c4:	eba0 000a 	sub.w	r0, r0, sl
 80055c8:	2240      	movs	r2, #64	; 0x40
 80055ca:	4082      	lsls	r2, r0
 80055cc:	4313      	orrs	r3, r2
 80055ce:	3401      	adds	r4, #1
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d6:	4829      	ldr	r0, [pc, #164]	; (800567c <_vfiprintf_r+0x224>)
 80055d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055dc:	2206      	movs	r2, #6
 80055de:	f7fa fdff 	bl	80001e0 <memchr>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d03f      	beq.n	8005666 <_vfiprintf_r+0x20e>
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <_vfiprintf_r+0x228>)
 80055e8:	bb1b      	cbnz	r3, 8005632 <_vfiprintf_r+0x1da>
 80055ea:	9b03      	ldr	r3, [sp, #12]
 80055ec:	3307      	adds	r3, #7
 80055ee:	f023 0307 	bic.w	r3, r3, #7
 80055f2:	3308      	adds	r3, #8
 80055f4:	9303      	str	r3, [sp, #12]
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	443b      	add	r3, r7
 80055fa:	9309      	str	r3, [sp, #36]	; 0x24
 80055fc:	e768      	b.n	80054d0 <_vfiprintf_r+0x78>
 80055fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005602:	460c      	mov	r4, r1
 8005604:	2001      	movs	r0, #1
 8005606:	e7a6      	b.n	8005556 <_vfiprintf_r+0xfe>
 8005608:	2300      	movs	r3, #0
 800560a:	3401      	adds	r4, #1
 800560c:	9305      	str	r3, [sp, #20]
 800560e:	4619      	mov	r1, r3
 8005610:	f04f 0c0a 	mov.w	ip, #10
 8005614:	4620      	mov	r0, r4
 8005616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800561a:	3a30      	subs	r2, #48	; 0x30
 800561c:	2a09      	cmp	r2, #9
 800561e:	d903      	bls.n	8005628 <_vfiprintf_r+0x1d0>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0c6      	beq.n	80055b2 <_vfiprintf_r+0x15a>
 8005624:	9105      	str	r1, [sp, #20]
 8005626:	e7c4      	b.n	80055b2 <_vfiprintf_r+0x15a>
 8005628:	fb0c 2101 	mla	r1, ip, r1, r2
 800562c:	4604      	mov	r4, r0
 800562e:	2301      	movs	r3, #1
 8005630:	e7f0      	b.n	8005614 <_vfiprintf_r+0x1bc>
 8005632:	ab03      	add	r3, sp, #12
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	462a      	mov	r2, r5
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <_vfiprintf_r+0x22c>)
 800563a:	a904      	add	r1, sp, #16
 800563c:	4630      	mov	r0, r6
 800563e:	f3af 8000 	nop.w
 8005642:	4607      	mov	r7, r0
 8005644:	1c78      	adds	r0, r7, #1
 8005646:	d1d6      	bne.n	80055f6 <_vfiprintf_r+0x19e>
 8005648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800564a:	07d9      	lsls	r1, r3, #31
 800564c:	d405      	bmi.n	800565a <_vfiprintf_r+0x202>
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	059a      	lsls	r2, r3, #22
 8005652:	d402      	bmi.n	800565a <_vfiprintf_r+0x202>
 8005654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005656:	f7ff fddb 	bl	8005210 <__retarget_lock_release_recursive>
 800565a:	89ab      	ldrh	r3, [r5, #12]
 800565c:	065b      	lsls	r3, r3, #25
 800565e:	f53f af1d 	bmi.w	800549c <_vfiprintf_r+0x44>
 8005662:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005664:	e71c      	b.n	80054a0 <_vfiprintf_r+0x48>
 8005666:	ab03      	add	r3, sp, #12
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	462a      	mov	r2, r5
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <_vfiprintf_r+0x22c>)
 800566e:	a904      	add	r1, sp, #16
 8005670:	4630      	mov	r0, r6
 8005672:	f000 f879 	bl	8005768 <_printf_i>
 8005676:	e7e4      	b.n	8005642 <_vfiprintf_r+0x1ea>
 8005678:	08005da9 	.word	0x08005da9
 800567c:	08005db3 	.word	0x08005db3
 8005680:	00000000 	.word	0x00000000
 8005684:	08005433 	.word	0x08005433
 8005688:	08005daf 	.word	0x08005daf

0800568c <_printf_common>:
 800568c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005690:	4616      	mov	r6, r2
 8005692:	4699      	mov	r9, r3
 8005694:	688a      	ldr	r2, [r1, #8]
 8005696:	690b      	ldr	r3, [r1, #16]
 8005698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800569c:	4293      	cmp	r3, r2
 800569e:	bfb8      	it	lt
 80056a0:	4613      	movlt	r3, r2
 80056a2:	6033      	str	r3, [r6, #0]
 80056a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056a8:	4607      	mov	r7, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	b10a      	cbz	r2, 80056b2 <_printf_common+0x26>
 80056ae:	3301      	adds	r3, #1
 80056b0:	6033      	str	r3, [r6, #0]
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	0699      	lsls	r1, r3, #26
 80056b6:	bf42      	ittt	mi
 80056b8:	6833      	ldrmi	r3, [r6, #0]
 80056ba:	3302      	addmi	r3, #2
 80056bc:	6033      	strmi	r3, [r6, #0]
 80056be:	6825      	ldr	r5, [r4, #0]
 80056c0:	f015 0506 	ands.w	r5, r5, #6
 80056c4:	d106      	bne.n	80056d4 <_printf_common+0x48>
 80056c6:	f104 0a19 	add.w	sl, r4, #25
 80056ca:	68e3      	ldr	r3, [r4, #12]
 80056cc:	6832      	ldr	r2, [r6, #0]
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	42ab      	cmp	r3, r5
 80056d2:	dc26      	bgt.n	8005722 <_printf_common+0x96>
 80056d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056d8:	1e13      	subs	r3, r2, #0
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	bf18      	it	ne
 80056de:	2301      	movne	r3, #1
 80056e0:	0692      	lsls	r2, r2, #26
 80056e2:	d42b      	bmi.n	800573c <_printf_common+0xb0>
 80056e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056e8:	4649      	mov	r1, r9
 80056ea:	4638      	mov	r0, r7
 80056ec:	47c0      	blx	r8
 80056ee:	3001      	adds	r0, #1
 80056f0:	d01e      	beq.n	8005730 <_printf_common+0xa4>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	6922      	ldr	r2, [r4, #16]
 80056f6:	f003 0306 	and.w	r3, r3, #6
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	bf02      	ittt	eq
 80056fe:	68e5      	ldreq	r5, [r4, #12]
 8005700:	6833      	ldreq	r3, [r6, #0]
 8005702:	1aed      	subeq	r5, r5, r3
 8005704:	68a3      	ldr	r3, [r4, #8]
 8005706:	bf0c      	ite	eq
 8005708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800570c:	2500      	movne	r5, #0
 800570e:	4293      	cmp	r3, r2
 8005710:	bfc4      	itt	gt
 8005712:	1a9b      	subgt	r3, r3, r2
 8005714:	18ed      	addgt	r5, r5, r3
 8005716:	2600      	movs	r6, #0
 8005718:	341a      	adds	r4, #26
 800571a:	42b5      	cmp	r5, r6
 800571c:	d11a      	bne.n	8005754 <_printf_common+0xc8>
 800571e:	2000      	movs	r0, #0
 8005720:	e008      	b.n	8005734 <_printf_common+0xa8>
 8005722:	2301      	movs	r3, #1
 8005724:	4652      	mov	r2, sl
 8005726:	4649      	mov	r1, r9
 8005728:	4638      	mov	r0, r7
 800572a:	47c0      	blx	r8
 800572c:	3001      	adds	r0, #1
 800572e:	d103      	bne.n	8005738 <_printf_common+0xac>
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005738:	3501      	adds	r5, #1
 800573a:	e7c6      	b.n	80056ca <_printf_common+0x3e>
 800573c:	18e1      	adds	r1, r4, r3
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	2030      	movs	r0, #48	; 0x30
 8005742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005746:	4422      	add	r2, r4
 8005748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800574c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005750:	3302      	adds	r3, #2
 8005752:	e7c7      	b.n	80056e4 <_printf_common+0x58>
 8005754:	2301      	movs	r3, #1
 8005756:	4622      	mov	r2, r4
 8005758:	4649      	mov	r1, r9
 800575a:	4638      	mov	r0, r7
 800575c:	47c0      	blx	r8
 800575e:	3001      	adds	r0, #1
 8005760:	d0e6      	beq.n	8005730 <_printf_common+0xa4>
 8005762:	3601      	adds	r6, #1
 8005764:	e7d9      	b.n	800571a <_printf_common+0x8e>
	...

08005768 <_printf_i>:
 8005768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800576c:	7e0f      	ldrb	r7, [r1, #24]
 800576e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005770:	2f78      	cmp	r7, #120	; 0x78
 8005772:	4691      	mov	r9, r2
 8005774:	4680      	mov	r8, r0
 8005776:	460c      	mov	r4, r1
 8005778:	469a      	mov	sl, r3
 800577a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800577e:	d807      	bhi.n	8005790 <_printf_i+0x28>
 8005780:	2f62      	cmp	r7, #98	; 0x62
 8005782:	d80a      	bhi.n	800579a <_printf_i+0x32>
 8005784:	2f00      	cmp	r7, #0
 8005786:	f000 80d4 	beq.w	8005932 <_printf_i+0x1ca>
 800578a:	2f58      	cmp	r7, #88	; 0x58
 800578c:	f000 80c0 	beq.w	8005910 <_printf_i+0x1a8>
 8005790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005798:	e03a      	b.n	8005810 <_printf_i+0xa8>
 800579a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800579e:	2b15      	cmp	r3, #21
 80057a0:	d8f6      	bhi.n	8005790 <_printf_i+0x28>
 80057a2:	a101      	add	r1, pc, #4	; (adr r1, 80057a8 <_printf_i+0x40>)
 80057a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057a8:	08005801 	.word	0x08005801
 80057ac:	08005815 	.word	0x08005815
 80057b0:	08005791 	.word	0x08005791
 80057b4:	08005791 	.word	0x08005791
 80057b8:	08005791 	.word	0x08005791
 80057bc:	08005791 	.word	0x08005791
 80057c0:	08005815 	.word	0x08005815
 80057c4:	08005791 	.word	0x08005791
 80057c8:	08005791 	.word	0x08005791
 80057cc:	08005791 	.word	0x08005791
 80057d0:	08005791 	.word	0x08005791
 80057d4:	08005919 	.word	0x08005919
 80057d8:	08005841 	.word	0x08005841
 80057dc:	080058d3 	.word	0x080058d3
 80057e0:	08005791 	.word	0x08005791
 80057e4:	08005791 	.word	0x08005791
 80057e8:	0800593b 	.word	0x0800593b
 80057ec:	08005791 	.word	0x08005791
 80057f0:	08005841 	.word	0x08005841
 80057f4:	08005791 	.word	0x08005791
 80057f8:	08005791 	.word	0x08005791
 80057fc:	080058db 	.word	0x080058db
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	1d1a      	adds	r2, r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800580c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005810:	2301      	movs	r3, #1
 8005812:	e09f      	b.n	8005954 <_printf_i+0x1ec>
 8005814:	6820      	ldr	r0, [r4, #0]
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	0607      	lsls	r7, r0, #24
 800581a:	f103 0104 	add.w	r1, r3, #4
 800581e:	6029      	str	r1, [r5, #0]
 8005820:	d501      	bpl.n	8005826 <_printf_i+0xbe>
 8005822:	681e      	ldr	r6, [r3, #0]
 8005824:	e003      	b.n	800582e <_printf_i+0xc6>
 8005826:	0646      	lsls	r6, r0, #25
 8005828:	d5fb      	bpl.n	8005822 <_printf_i+0xba>
 800582a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800582e:	2e00      	cmp	r6, #0
 8005830:	da03      	bge.n	800583a <_printf_i+0xd2>
 8005832:	232d      	movs	r3, #45	; 0x2d
 8005834:	4276      	negs	r6, r6
 8005836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583a:	485a      	ldr	r0, [pc, #360]	; (80059a4 <_printf_i+0x23c>)
 800583c:	230a      	movs	r3, #10
 800583e:	e012      	b.n	8005866 <_printf_i+0xfe>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	1d19      	adds	r1, r3, #4
 8005846:	6029      	str	r1, [r5, #0]
 8005848:	0605      	lsls	r5, r0, #24
 800584a:	d501      	bpl.n	8005850 <_printf_i+0xe8>
 800584c:	681e      	ldr	r6, [r3, #0]
 800584e:	e002      	b.n	8005856 <_printf_i+0xee>
 8005850:	0641      	lsls	r1, r0, #25
 8005852:	d5fb      	bpl.n	800584c <_printf_i+0xe4>
 8005854:	881e      	ldrh	r6, [r3, #0]
 8005856:	4853      	ldr	r0, [pc, #332]	; (80059a4 <_printf_i+0x23c>)
 8005858:	2f6f      	cmp	r7, #111	; 0x6f
 800585a:	bf0c      	ite	eq
 800585c:	2308      	moveq	r3, #8
 800585e:	230a      	movne	r3, #10
 8005860:	2100      	movs	r1, #0
 8005862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005866:	6865      	ldr	r5, [r4, #4]
 8005868:	60a5      	str	r5, [r4, #8]
 800586a:	2d00      	cmp	r5, #0
 800586c:	bfa2      	ittt	ge
 800586e:	6821      	ldrge	r1, [r4, #0]
 8005870:	f021 0104 	bicge.w	r1, r1, #4
 8005874:	6021      	strge	r1, [r4, #0]
 8005876:	b90e      	cbnz	r6, 800587c <_printf_i+0x114>
 8005878:	2d00      	cmp	r5, #0
 800587a:	d04b      	beq.n	8005914 <_printf_i+0x1ac>
 800587c:	4615      	mov	r5, r2
 800587e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005882:	fb03 6711 	mls	r7, r3, r1, r6
 8005886:	5dc7      	ldrb	r7, [r0, r7]
 8005888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800588c:	4637      	mov	r7, r6
 800588e:	42bb      	cmp	r3, r7
 8005890:	460e      	mov	r6, r1
 8005892:	d9f4      	bls.n	800587e <_printf_i+0x116>
 8005894:	2b08      	cmp	r3, #8
 8005896:	d10b      	bne.n	80058b0 <_printf_i+0x148>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	07de      	lsls	r6, r3, #31
 800589c:	d508      	bpl.n	80058b0 <_printf_i+0x148>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	6861      	ldr	r1, [r4, #4]
 80058a2:	4299      	cmp	r1, r3
 80058a4:	bfde      	ittt	le
 80058a6:	2330      	movle	r3, #48	; 0x30
 80058a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058b0:	1b52      	subs	r2, r2, r5
 80058b2:	6122      	str	r2, [r4, #16]
 80058b4:	f8cd a000 	str.w	sl, [sp]
 80058b8:	464b      	mov	r3, r9
 80058ba:	aa03      	add	r2, sp, #12
 80058bc:	4621      	mov	r1, r4
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff fee4 	bl	800568c <_printf_common>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d14a      	bne.n	800595e <_printf_i+0x1f6>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b004      	add	sp, #16
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	f043 0320 	orr.w	r3, r3, #32
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	4833      	ldr	r0, [pc, #204]	; (80059a8 <_printf_i+0x240>)
 80058dc:	2778      	movs	r7, #120	; 0x78
 80058de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	6829      	ldr	r1, [r5, #0]
 80058e6:	061f      	lsls	r7, r3, #24
 80058e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80058ec:	d402      	bmi.n	80058f4 <_printf_i+0x18c>
 80058ee:	065f      	lsls	r7, r3, #25
 80058f0:	bf48      	it	mi
 80058f2:	b2b6      	uxthmi	r6, r6
 80058f4:	07df      	lsls	r7, r3, #31
 80058f6:	bf48      	it	mi
 80058f8:	f043 0320 	orrmi.w	r3, r3, #32
 80058fc:	6029      	str	r1, [r5, #0]
 80058fe:	bf48      	it	mi
 8005900:	6023      	strmi	r3, [r4, #0]
 8005902:	b91e      	cbnz	r6, 800590c <_printf_i+0x1a4>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	f023 0320 	bic.w	r3, r3, #32
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	2310      	movs	r3, #16
 800590e:	e7a7      	b.n	8005860 <_printf_i+0xf8>
 8005910:	4824      	ldr	r0, [pc, #144]	; (80059a4 <_printf_i+0x23c>)
 8005912:	e7e4      	b.n	80058de <_printf_i+0x176>
 8005914:	4615      	mov	r5, r2
 8005916:	e7bd      	b.n	8005894 <_printf_i+0x12c>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	6826      	ldr	r6, [r4, #0]
 800591c:	6961      	ldr	r1, [r4, #20]
 800591e:	1d18      	adds	r0, r3, #4
 8005920:	6028      	str	r0, [r5, #0]
 8005922:	0635      	lsls	r5, r6, #24
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	d501      	bpl.n	800592c <_printf_i+0x1c4>
 8005928:	6019      	str	r1, [r3, #0]
 800592a:	e002      	b.n	8005932 <_printf_i+0x1ca>
 800592c:	0670      	lsls	r0, r6, #25
 800592e:	d5fb      	bpl.n	8005928 <_printf_i+0x1c0>
 8005930:	8019      	strh	r1, [r3, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	4615      	mov	r5, r2
 8005938:	e7bc      	b.n	80058b4 <_printf_i+0x14c>
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	1d1a      	adds	r2, r3, #4
 800593e:	602a      	str	r2, [r5, #0]
 8005940:	681d      	ldr	r5, [r3, #0]
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	2100      	movs	r1, #0
 8005946:	4628      	mov	r0, r5
 8005948:	f7fa fc4a 	bl	80001e0 <memchr>
 800594c:	b108      	cbz	r0, 8005952 <_printf_i+0x1ea>
 800594e:	1b40      	subs	r0, r0, r5
 8005950:	6060      	str	r0, [r4, #4]
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	2300      	movs	r3, #0
 8005958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800595c:	e7aa      	b.n	80058b4 <_printf_i+0x14c>
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	462a      	mov	r2, r5
 8005962:	4649      	mov	r1, r9
 8005964:	4640      	mov	r0, r8
 8005966:	47d0      	blx	sl
 8005968:	3001      	adds	r0, #1
 800596a:	d0ad      	beq.n	80058c8 <_printf_i+0x160>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	079b      	lsls	r3, r3, #30
 8005970:	d413      	bmi.n	800599a <_printf_i+0x232>
 8005972:	68e0      	ldr	r0, [r4, #12]
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	4298      	cmp	r0, r3
 8005978:	bfb8      	it	lt
 800597a:	4618      	movlt	r0, r3
 800597c:	e7a6      	b.n	80058cc <_printf_i+0x164>
 800597e:	2301      	movs	r3, #1
 8005980:	4632      	mov	r2, r6
 8005982:	4649      	mov	r1, r9
 8005984:	4640      	mov	r0, r8
 8005986:	47d0      	blx	sl
 8005988:	3001      	adds	r0, #1
 800598a:	d09d      	beq.n	80058c8 <_printf_i+0x160>
 800598c:	3501      	adds	r5, #1
 800598e:	68e3      	ldr	r3, [r4, #12]
 8005990:	9903      	ldr	r1, [sp, #12]
 8005992:	1a5b      	subs	r3, r3, r1
 8005994:	42ab      	cmp	r3, r5
 8005996:	dcf2      	bgt.n	800597e <_printf_i+0x216>
 8005998:	e7eb      	b.n	8005972 <_printf_i+0x20a>
 800599a:	2500      	movs	r5, #0
 800599c:	f104 0619 	add.w	r6, r4, #25
 80059a0:	e7f5      	b.n	800598e <_printf_i+0x226>
 80059a2:	bf00      	nop
 80059a4:	08005dba 	.word	0x08005dba
 80059a8:	08005dcb 	.word	0x08005dcb

080059ac <__sflush_r>:
 80059ac:	898a      	ldrh	r2, [r1, #12]
 80059ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	4605      	mov	r5, r0
 80059b4:	0710      	lsls	r0, r2, #28
 80059b6:	460c      	mov	r4, r1
 80059b8:	d458      	bmi.n	8005a6c <__sflush_r+0xc0>
 80059ba:	684b      	ldr	r3, [r1, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dc05      	bgt.n	80059cc <__sflush_r+0x20>
 80059c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	dc02      	bgt.n	80059cc <__sflush_r+0x20>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	d0f9      	beq.n	80059c6 <__sflush_r+0x1a>
 80059d2:	2300      	movs	r3, #0
 80059d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059d8:	682f      	ldr	r7, [r5, #0]
 80059da:	6a21      	ldr	r1, [r4, #32]
 80059dc:	602b      	str	r3, [r5, #0]
 80059de:	d032      	beq.n	8005a46 <__sflush_r+0x9a>
 80059e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	075a      	lsls	r2, r3, #29
 80059e6:	d505      	bpl.n	80059f4 <__sflush_r+0x48>
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	1ac0      	subs	r0, r0, r3
 80059ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059ee:	b10b      	cbz	r3, 80059f4 <__sflush_r+0x48>
 80059f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059f2:	1ac0      	subs	r0, r0, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	4602      	mov	r2, r0
 80059f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059fa:	6a21      	ldr	r1, [r4, #32]
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b0      	blx	r6
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	d106      	bne.n	8005a14 <__sflush_r+0x68>
 8005a06:	6829      	ldr	r1, [r5, #0]
 8005a08:	291d      	cmp	r1, #29
 8005a0a:	d82b      	bhi.n	8005a64 <__sflush_r+0xb8>
 8005a0c:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <__sflush_r+0x108>)
 8005a0e:	410a      	asrs	r2, r1
 8005a10:	07d6      	lsls	r6, r2, #31
 8005a12:	d427      	bmi.n	8005a64 <__sflush_r+0xb8>
 8005a14:	2200      	movs	r2, #0
 8005a16:	6062      	str	r2, [r4, #4]
 8005a18:	04d9      	lsls	r1, r3, #19
 8005a1a:	6922      	ldr	r2, [r4, #16]
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	d504      	bpl.n	8005a2a <__sflush_r+0x7e>
 8005a20:	1c42      	adds	r2, r0, #1
 8005a22:	d101      	bne.n	8005a28 <__sflush_r+0x7c>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b903      	cbnz	r3, 8005a2a <__sflush_r+0x7e>
 8005a28:	6560      	str	r0, [r4, #84]	; 0x54
 8005a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a2c:	602f      	str	r7, [r5, #0]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d0c9      	beq.n	80059c6 <__sflush_r+0x1a>
 8005a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a36:	4299      	cmp	r1, r3
 8005a38:	d002      	beq.n	8005a40 <__sflush_r+0x94>
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f7ff fbea 	bl	8005214 <_free_r>
 8005a40:	2000      	movs	r0, #0
 8005a42:	6360      	str	r0, [r4, #52]	; 0x34
 8005a44:	e7c0      	b.n	80059c8 <__sflush_r+0x1c>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b0      	blx	r6
 8005a4c:	1c41      	adds	r1, r0, #1
 8005a4e:	d1c8      	bne.n	80059e2 <__sflush_r+0x36>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c5      	beq.n	80059e2 <__sflush_r+0x36>
 8005a56:	2b1d      	cmp	r3, #29
 8005a58:	d001      	beq.n	8005a5e <__sflush_r+0xb2>
 8005a5a:	2b16      	cmp	r3, #22
 8005a5c:	d101      	bne.n	8005a62 <__sflush_r+0xb6>
 8005a5e:	602f      	str	r7, [r5, #0]
 8005a60:	e7b1      	b.n	80059c6 <__sflush_r+0x1a>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a68:	81a3      	strh	r3, [r4, #12]
 8005a6a:	e7ad      	b.n	80059c8 <__sflush_r+0x1c>
 8005a6c:	690f      	ldr	r7, [r1, #16]
 8005a6e:	2f00      	cmp	r7, #0
 8005a70:	d0a9      	beq.n	80059c6 <__sflush_r+0x1a>
 8005a72:	0793      	lsls	r3, r2, #30
 8005a74:	680e      	ldr	r6, [r1, #0]
 8005a76:	bf08      	it	eq
 8005a78:	694b      	ldreq	r3, [r1, #20]
 8005a7a:	600f      	str	r7, [r1, #0]
 8005a7c:	bf18      	it	ne
 8005a7e:	2300      	movne	r3, #0
 8005a80:	eba6 0807 	sub.w	r8, r6, r7
 8005a84:	608b      	str	r3, [r1, #8]
 8005a86:	f1b8 0f00 	cmp.w	r8, #0
 8005a8a:	dd9c      	ble.n	80059c6 <__sflush_r+0x1a>
 8005a8c:	6a21      	ldr	r1, [r4, #32]
 8005a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a90:	4643      	mov	r3, r8
 8005a92:	463a      	mov	r2, r7
 8005a94:	4628      	mov	r0, r5
 8005a96:	47b0      	blx	r6
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	dc06      	bgt.n	8005aaa <__sflush_r+0xfe>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	e78e      	b.n	80059c8 <__sflush_r+0x1c>
 8005aaa:	4407      	add	r7, r0
 8005aac:	eba8 0800 	sub.w	r8, r8, r0
 8005ab0:	e7e9      	b.n	8005a86 <__sflush_r+0xda>
 8005ab2:	bf00      	nop
 8005ab4:	dfbffffe 	.word	0xdfbffffe

08005ab8 <_fflush_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	4605      	mov	r5, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	b913      	cbnz	r3, 8005ac8 <_fflush_r+0x10>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	b118      	cbz	r0, 8005ad2 <_fflush_r+0x1a>
 8005aca:	6a03      	ldr	r3, [r0, #32]
 8005acc:	b90b      	cbnz	r3, 8005ad2 <_fflush_r+0x1a>
 8005ace:	f7ff f9a9 	bl	8004e24 <__sinit>
 8005ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f3      	beq.n	8005ac2 <_fflush_r+0xa>
 8005ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005adc:	07d0      	lsls	r0, r2, #31
 8005ade:	d404      	bmi.n	8005aea <_fflush_r+0x32>
 8005ae0:	0599      	lsls	r1, r3, #22
 8005ae2:	d402      	bmi.n	8005aea <_fflush_r+0x32>
 8005ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ae6:	f7ff fb92 	bl	800520e <__retarget_lock_acquire_recursive>
 8005aea:	4628      	mov	r0, r5
 8005aec:	4621      	mov	r1, r4
 8005aee:	f7ff ff5d 	bl	80059ac <__sflush_r>
 8005af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005af4:	07da      	lsls	r2, r3, #31
 8005af6:	4605      	mov	r5, r0
 8005af8:	d4e4      	bmi.n	8005ac4 <_fflush_r+0xc>
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	059b      	lsls	r3, r3, #22
 8005afe:	d4e1      	bmi.n	8005ac4 <_fflush_r+0xc>
 8005b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b02:	f7ff fb85 	bl	8005210 <__retarget_lock_release_recursive>
 8005b06:	e7dd      	b.n	8005ac4 <_fflush_r+0xc>

08005b08 <__swhatbuf_r>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b10:	2900      	cmp	r1, #0
 8005b12:	b096      	sub	sp, #88	; 0x58
 8005b14:	4615      	mov	r5, r2
 8005b16:	461e      	mov	r6, r3
 8005b18:	da0d      	bge.n	8005b36 <__swhatbuf_r+0x2e>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b20:	f04f 0100 	mov.w	r1, #0
 8005b24:	bf0c      	ite	eq
 8005b26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b2a:	2340      	movne	r3, #64	; 0x40
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	6031      	str	r1, [r6, #0]
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	b016      	add	sp, #88	; 0x58
 8005b34:	bd70      	pop	{r4, r5, r6, pc}
 8005b36:	466a      	mov	r2, sp
 8005b38:	f000 f848 	bl	8005bcc <_fstat_r>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	dbec      	blt.n	8005b1a <__swhatbuf_r+0x12>
 8005b40:	9901      	ldr	r1, [sp, #4]
 8005b42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b4a:	4259      	negs	r1, r3
 8005b4c:	4159      	adcs	r1, r3
 8005b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b52:	e7eb      	b.n	8005b2c <__swhatbuf_r+0x24>

08005b54 <__smakebuf_r>:
 8005b54:	898b      	ldrh	r3, [r1, #12]
 8005b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b58:	079d      	lsls	r5, r3, #30
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	d507      	bpl.n	8005b70 <__smakebuf_r+0x1c>
 8005b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	6123      	str	r3, [r4, #16]
 8005b68:	2301      	movs	r3, #1
 8005b6a:	6163      	str	r3, [r4, #20]
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	ab01      	add	r3, sp, #4
 8005b72:	466a      	mov	r2, sp
 8005b74:	f7ff ffc8 	bl	8005b08 <__swhatbuf_r>
 8005b78:	9900      	ldr	r1, [sp, #0]
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f7ff fbb5 	bl	80052ec <_malloc_r>
 8005b82:	b948      	cbnz	r0, 8005b98 <__smakebuf_r+0x44>
 8005b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b88:	059a      	lsls	r2, r3, #22
 8005b8a:	d4ef      	bmi.n	8005b6c <__smakebuf_r+0x18>
 8005b8c:	f023 0303 	bic.w	r3, r3, #3
 8005b90:	f043 0302 	orr.w	r3, r3, #2
 8005b94:	81a3      	strh	r3, [r4, #12]
 8005b96:	e7e3      	b.n	8005b60 <__smakebuf_r+0xc>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	6020      	str	r0, [r4, #0]
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	6163      	str	r3, [r4, #20]
 8005ba6:	9b01      	ldr	r3, [sp, #4]
 8005ba8:	6120      	str	r0, [r4, #16]
 8005baa:	b15b      	cbz	r3, 8005bc4 <__smakebuf_r+0x70>
 8005bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f000 f81d 	bl	8005bf0 <_isatty_r>
 8005bb6:	b128      	cbz	r0, 8005bc4 <__smakebuf_r+0x70>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	431d      	orrs	r5, r3
 8005bc8:	81a5      	strh	r5, [r4, #12]
 8005bca:	e7cf      	b.n	8005b6c <__smakebuf_r+0x18>

08005bcc <_fstat_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4d07      	ldr	r5, [pc, #28]	; (8005bec <_fstat_r+0x20>)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	f7fb fe90 	bl	80018fe <_fstat>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d102      	bne.n	8005be8 <_fstat_r+0x1c>
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	b103      	cbz	r3, 8005be8 <_fstat_r+0x1c>
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	bd38      	pop	{r3, r4, r5, pc}
 8005bea:	bf00      	nop
 8005bec:	20000440 	.word	0x20000440

08005bf0 <_isatty_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d06      	ldr	r5, [pc, #24]	; (8005c0c <_isatty_r+0x1c>)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f7fb fe8f 	bl	800191e <_isatty>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_isatty_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_isatty_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	20000440 	.word	0x20000440

08005c10 <_sbrk_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d06      	ldr	r5, [pc, #24]	; (8005c2c <_sbrk_r+0x1c>)
 8005c14:	2300      	movs	r3, #0
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fb fe98 	bl	8001950 <_sbrk>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_sbrk_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_sbrk_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000440 	.word	0x20000440

08005c30 <_init>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	bf00      	nop
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr

08005c3c <_fini>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr
