
stepper_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005434  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005758  08005758  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005760  08005760  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000070  080057d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  080057d8  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7c8  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efd  00000000  00000000  0002d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a73  00000000  00000000  00030508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001711f  00000000  00000000  00030f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed34  00000000  00000000  0004809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f5eb  00000000  00000000  00056dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004028  00000000  00000000  000e63bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000ea3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055bc 	.word	0x080055bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080055bc 	.word	0x080055bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_PeriodElapsedCallback>:
int PAN_UP = 310;
int PAN_DOWN = 295;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d116      	bne.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x40>
     	// HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 0);
        HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, stepState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	bf14      	ite	ne
 8000596:	2301      	movne	r3, #1
 8000598:	2300      	moveq	r3, #0
 800059a:	b2db      	uxtb	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80005a2:	f001 fafb 	bl	8001b9c <HAL_GPIO_WritePin>
        stepState = !stepState;
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	bf0c      	ite	eq
 80005ae:	2301      	moveq	r3, #1
 80005b0:	2300      	movne	r3, #0
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]

    	TIM2->CCR1 = PINCH_BACKWARD_CCR;
    	HAL_TIM_Base_Stop_IT(&htim10);

    }
}
 80005ba:	e00c      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x5a>
    else if (htim->Instance == TIM10)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d107      	bne.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x5a>
    	TIM2->CCR1 = PINCH_BACKWARD_CCR;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ce:	635a      	str	r2, [r3, #52]	; 0x34
    	HAL_TIM_Base_Stop_IT(&htim10);
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80005d2:	f002 f847 	bl	8002664 <HAL_TIM_Base_Stop_IT>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40014800 	.word	0x40014800
 80005e4:	20000240 	.word	0x20000240
 80005e8:	40020000 	.word	0x40020000
 80005ec:	40014400 	.word	0x40014400
 80005f0:	20000004 	.word	0x20000004
 80005f4:	2000011c 	.word	0x2000011c

080005f8 <set_forward_dir>:

void set_forward_dir()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <set_forward_dir+0x34>)
 8000604:	f001 faca 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	2110      	movs	r1, #16
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <set_forward_dir+0x34>)
 800060e:	f001 fac5 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <set_forward_dir+0x34>)
 8000618:	f001 fac0 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 800061c:	2200      	movs	r2, #0
 800061e:	2108      	movs	r1, #8
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <set_forward_dir+0x34>)
 8000622:	f001 fabb 	bl	8001b9c <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020400 	.word	0x40020400

08000630 <set_backward_dir>:
void set_backward_dir()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063a:	480a      	ldr	r0, [pc, #40]	; (8000664 <set_backward_dir+0x34>)
 800063c:	f001 faae 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <set_backward_dir+0x34>)
 8000646:	f001 faa9 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 800064a:	2201      	movs	r2, #1
 800064c:	2120      	movs	r1, #32
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <set_backward_dir+0x34>)
 8000650:	f001 faa4 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 8000654:	2201      	movs	r2, #1
 8000656:	2108      	movs	r1, #8
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <set_backward_dir+0x34>)
 800065a:	f001 fa9f 	bl	8001b9c <HAL_GPIO_WritePin>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020400 	.word	0x40020400

08000668 <set_ccw_dir>:
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
}
void set_ccw_dir()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000672:	480a      	ldr	r0, [pc, #40]	; (800069c <set_ccw_dir+0x34>)
 8000674:	f001 fa92 	bl	8001b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2110      	movs	r1, #16
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <set_ccw_dir+0x34>)
 800067e:	f001 fa8d 	bl	8001b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 8000682:	2200      	movs	r2, #0
 8000684:	2120      	movs	r1, #32
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <set_ccw_dir+0x34>)
 8000688:	f001 fa88 	bl	8001b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <set_ccw_dir+0x34>)
 8000692:	f001 fa83 	bl	8001b9c <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020400 	.word	0x40020400

080006a0 <set_cw_dir>:
void set_cw_dir()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <set_cw_dir+0x34>)
 80006ac:	f001 fa76 	bl	8001b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2110      	movs	r1, #16
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <set_cw_dir+0x34>)
 80006b6:	f001 fa71 	bl	8001b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2120      	movs	r1, #32
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <set_cw_dir+0x34>)
 80006c0:	f001 fa6c 	bl	8001b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2108      	movs	r1, #8
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <set_cw_dir+0x34>)
 80006ca:	f001 fa67 	bl	8001b9c <HAL_GPIO_WritePin>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020400 	.word	0x40020400

080006d8 <enable>:
void enable()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <enable+0x14>)
 80006e4:	f001 fa5a 	bl	8001b9c <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40020000 	.word	0x40020000

080006f0 <disable>:
void disable()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fa:	4802      	ldr	r0, [pc, #8]	; (8000704 <disable+0x14>)
 80006fc:	f001 fa4e 	bl	8001b9c <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40020000 	.word	0x40020000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fe88 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f850 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 fa44 	bl	8000ba0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000718:	f000 f9ee 	bl	8000af8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800071c:	f000 fa16 	bl	8000b4c <MX_USART6_UART_Init>
  MX_TIM11_Init();
 8000720:	f000 f9c6 	bl	8000ab0 <MX_TIM11_Init>
  MX_TIM2_Init();
 8000724:	f000 f8b2 	bl	800088c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000728:	f000 f926 	bl	8000978 <MX_TIM3_Init>
  MX_TIM10_Init();
 800072c:	f000 f99c 	bl	8000a68 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  // HAL_TIM_Base_Start_IT(&htim10);
  HAL_UART_Receive_IT(&huart6, &answer, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	4918      	ldr	r1, [pc, #96]	; (8000794 <main+0x8c>)
 8000734:	4818      	ldr	r0, [pc, #96]	; (8000798 <main+0x90>)
 8000736:	f002 ffa4 	bl	8003682 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &number, 1);
 800073a:	2201      	movs	r2, #1
 800073c:	4917      	ldr	r1, [pc, #92]	; (800079c <main+0x94>)
 800073e:	4818      	ldr	r0, [pc, #96]	; (80007a0 <main+0x98>)
 8000740:	f002 ff9f 	bl	8003682 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000744:	2100      	movs	r1, #0
 8000746:	4817      	ldr	r0, [pc, #92]	; (80007a4 <main+0x9c>)
 8000748:	f002 f814 	bl	8002774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800074c:	2100      	movs	r1, #0
 800074e:	4816      	ldr	r0, [pc, #88]	; (80007a8 <main+0xa0>)
 8000750:	f002 f810 	bl	8002774 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
  HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <main+0xa4>)
 800075c:	f001 fa1e 	bl	8001b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2110      	movs	r1, #16
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <main+0xa4>)
 8000766:	f001 fa19 	bl	8001b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <main+0xa4>)
 8000770:	f001 fa14 	bl	8001b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2108      	movs	r1, #8
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <main+0xa4>)
 800077a:	f001 fa0f 	bl	8001b9c <HAL_GPIO_WritePin>

  disable();
 800077e:	f7ff ffb7 	bl	80006f0 <disable>
  while (1)
  {
	  printf("hello world\n");
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <main+0xa8>)
 8000784:	f004 f8b0 	bl	80048e8 <puts>
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 1);
	  // HAL_Delay(100);
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 0);
	  // HAL_Delay(100);
	  HAL_Delay(1000);
 8000788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078c:	f000 feba 	bl	8001504 <HAL_Delay>
	  printf("hello world\n");
 8000790:	e7f7      	b.n	8000782 <main+0x7a>
 8000792:	bf00      	nop
 8000794:	2000023c 	.word	0x2000023c
 8000798:	200001f4 	.word	0x200001f4
 800079c:	20000244 	.word	0x20000244
 80007a0:	200001ac 	.word	0x200001ac
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	200000d4 	.word	0x200000d4
 80007ac:	40020400 	.word	0x40020400
 80007b0:	080055d4 	.word	0x080055d4

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 f970 	bl	8004aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <SystemClock_Config+0xd0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a28      	ldr	r2, [pc, #160]	; (8000884 <SystemClock_Config+0xd0>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <SystemClock_Config+0xd0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <SystemClock_Config+0xd4>)
 8000802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <SystemClock_Config+0xd4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000828:	2310      	movs	r3, #16
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800082c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000832:	2304      	movs	r3, #4
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000836:	2307      	movs	r3, #7
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f9c6 	bl	8001bd0 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084a:	f000 fb0f 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fc28 	bl	80020c0 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000876:	f000 faf9 	bl	8000e6c <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	; 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_TIM2_Init+0xe8>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 419;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_TIM2_Init+0xe8>)
 80008c6:	f240 12a3 	movw	r2, #419	; 0x1a3
 80008ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_TIM2_Init+0xe8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_TIM2_Init+0xe8>)
 80008d4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80008d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_TIM2_Init+0xe8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_TIM2_Init+0xe8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e6:	4823      	ldr	r0, [pc, #140]	; (8000974 <MX_TIM2_Init+0xe8>)
 80008e8:	f001 fe0a 	bl	8002500 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008f2:	f000 fabb 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000900:	4619      	mov	r1, r3
 8000902:	481c      	ldr	r0, [pc, #112]	; (8000974 <MX_TIM2_Init+0xe8>)
 8000904:	f002 f998 	bl	8002c38 <HAL_TIM_ConfigClockSource>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800090e:	f000 faad 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000912:	4818      	ldr	r0, [pc, #96]	; (8000974 <MX_TIM2_Init+0xe8>)
 8000914:	f001 fed5 	bl	80026c2 <HAL_TIM_PWM_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800091e:	f000 faa5 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	4619      	mov	r1, r3
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <MX_TIM2_Init+0xe8>)
 8000932:	f002 fd49 	bl	80033c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800093c:	f000 fa96 	bl	8000e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000940:	2360      	movs	r3, #96	; 0x60
 8000942:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	4619      	mov	r1, r3
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM2_Init+0xe8>)
 8000958:	f002 f8ac 	bl	8002ab4 <HAL_TIM_PWM_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000962:	f000 fa83 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM2_Init+0xe8>)
 8000968:	f000 fb1e 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 800096c:	bf00      	nop
 800096e:	3738      	adds	r7, #56	; 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000008c 	.word	0x2000008c

08000978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
 80009a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009aa:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <MX_TIM3_Init+0xec>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 419;
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009b0:	f240 12a3 	movw	r2, #419	; 0x1a3
 80009b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009be:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80009c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d0:	4823      	ldr	r0, [pc, #140]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009d2:	f001 fd95 	bl	8002500 <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009dc:	f000 fa46 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ea:	4619      	mov	r1, r3
 80009ec:	481c      	ldr	r0, [pc, #112]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009ee:	f002 f923 	bl	8002c38 <HAL_TIM_ConfigClockSource>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009f8:	f000 fa38 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009fc:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009fe:	f001 fe60 	bl	80026c2 <HAL_TIM_PWM_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a08:	f000 fa30 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a14:	f107 0320 	add.w	r3, r7, #32
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_TIM3_Init+0xe8>)
 8000a1c:	f002 fcd4 	bl	80033c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a26:	f000 fa21 	bl	8000e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2a:	2360      	movs	r3, #96	; 0x60
 8000a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <MX_TIM3_Init+0xe8>)
 8000a42:	f002 f837 	bl	8002ab4 <HAL_TIM_PWM_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a4c:	f000 fa0e 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <MX_TIM3_Init+0xe8>)
 8000a52:	f000 faa9 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000a56:	bf00      	nop
 8000a58:	3738      	adds	r7, #56	; 0x38
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000d4 	.word	0x200000d4
 8000a64:	40000400 	.word	0x40000400

08000a68 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_TIM10_Init+0x40>)
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <MX_TIM10_Init+0x44>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4500;
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_TIM10_Init+0x40>)
 8000a74:	f241 1294 	movw	r2, #4500	; 0x1194
 8000a78:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_TIM10_Init+0x40>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9000;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_TIM10_Init+0x40>)
 8000a82:	f242 3228 	movw	r2, #9000	; 0x2328
 8000a86:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_TIM10_Init+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_TIM10_Init+0x40>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_TIM10_Init+0x40>)
 8000a96:	f001 fd33 	bl	8002500 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000aa0:	f000 f9e4 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000011c 	.word	0x2000011c
 8000aac:	40014400 	.word	0x40014400

08000ab0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_TIM11_Init+0x40>)
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_TIM11_Init+0x44>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 39;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_TIM11_Init+0x40>)
 8000abc:	2227      	movs	r2, #39	; 0x27
 8000abe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_TIM11_Init+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2999;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_TIM11_Init+0x40>)
 8000ac8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000acc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_TIM11_Init+0x40>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_TIM11_Init+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_TIM11_Init+0x40>)
 8000adc:	f001 fd10 	bl	8002500 <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000ae6:	f000 f9c1 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000164 	.word	0x20000164
 8000af4:	40014800 	.word	0x40014800

08000af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART2_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b30:	f002 fccc 	bl	80034cc <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f997 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001ac 	.word	0x200001ac
 8000b48:	40004400 	.word	0x40004400

08000b4c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART6_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b84:	f002 fca2 	bl	80034cc <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f96d 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001f4 	.word	0x200001f4
 8000b9c:	40011400 	.word	0x40011400

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a38      	ldr	r2, [pc, #224]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a23      	ldr	r2, [pc, #140]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <MX_GPIO_Init+0x100>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000c2c:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <MX_GPIO_Init+0x104>)
 8000c2e:	f000 ffb5 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c38:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000c3a:	f000 ffaf 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4815      	ldr	r0, [pc, #84]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c56:	f000 fe1d 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 8000c5a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_GPIO_Init+0x104>)
 8000c74:	f000 fe0e 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c78:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000c92:	f000 fdff 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40020800 	.word	0x40020800

08000cb0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb8:	1d39      	adds	r1, r7, #4
 8000cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <__io_putchar+0x20>)
 8000cc2:	f002 fc53 	bl	800356c <HAL_UART_Transmit>
  return ch;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200001ac 	.word	0x200001ac

08000cd4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* hadc) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	if (hadc == &huart2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a55      	ldr	r2, [pc, #340]	; (8000e34 <HAL_UART_RxCpltCallback+0x160>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d12a      	bne.n	8000d3a <HAL_UART_RxCpltCallback+0x66>
	{
		static char numbers[4] = {0};
		static int offset = 0;


		if (number != '\n')
 8000ce4:	4b54      	ldr	r3, [pc, #336]	; (8000e38 <HAL_UART_RxCpltCallback+0x164>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b0a      	cmp	r3, #10
 8000cea:	d020      	beq.n	8000d2e <HAL_UART_RxCpltCallback+0x5a>
		{
			printf("received: %c\n", number);
 8000cec:	4b52      	ldr	r3, [pc, #328]	; (8000e38 <HAL_UART_RxCpltCallback+0x164>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4852      	ldr	r0, [pc, #328]	; (8000e3c <HAL_UART_RxCpltCallback+0x168>)
 8000cf4:	f003 fd92 	bl	800481c <iprintf>
			numbers[offset++] = number;
 8000cf8:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <HAL_UART_RxCpltCallback+0x16c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	4950      	ldr	r1, [pc, #320]	; (8000e40 <HAL_UART_RxCpltCallback+0x16c>)
 8000d00:	600a      	str	r2, [r1, #0]
 8000d02:	4a4d      	ldr	r2, [pc, #308]	; (8000e38 <HAL_UART_RxCpltCallback+0x164>)
 8000d04:	7811      	ldrb	r1, [r2, #0]
 8000d06:	4a4f      	ldr	r2, [pc, #316]	; (8000e44 <HAL_UART_RxCpltCallback+0x170>)
 8000d08:	54d1      	strb	r1, [r2, r3]

			if (offset == 3)
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <HAL_UART_RxCpltCallback+0x16c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d10d      	bne.n	8000d2e <HAL_UART_RxCpltCallback+0x5a>
			{
				int intNum = atoi(numbers);
 8000d12:	484c      	ldr	r0, [pc, #304]	; (8000e44 <HAL_UART_RxCpltCallback+0x170>)
 8000d14:	f003 fc30 	bl	8004578 <atoi>
 8000d18:	60f8      	str	r0, [r7, #12]
				printf("set: %d\n", intNum);
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	484a      	ldr	r0, [pc, #296]	; (8000e48 <HAL_UART_RxCpltCallback+0x174>)
 8000d1e:	f003 fd7d 	bl	800481c <iprintf>
				// TIM2->CCR1 = intNum;
				TIM3->CCR1 = intNum;
 8000d22:	4a4a      	ldr	r2, [pc, #296]	; (8000e4c <HAL_UART_RxCpltCallback+0x178>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6353      	str	r3, [r2, #52]	; 0x34
				offset = 0;
 8000d28:	4b45      	ldr	r3, [pc, #276]	; (8000e40 <HAL_UART_RxCpltCallback+0x16c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart2, &number, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4941      	ldr	r1, [pc, #260]	; (8000e38 <HAL_UART_RxCpltCallback+0x164>)
 8000d32:	4840      	ldr	r0, [pc, #256]	; (8000e34 <HAL_UART_RxCpltCallback+0x160>)
 8000d34:	f002 fca5 	bl	8003682 <HAL_UART_Receive_IT>
			HAL_TIM_Base_Start_IT(&htim11);
		}
		disabled = answer == 0;
		 HAL_UART_Receive_IT(&huart6, &answer, 1);
	}
 }
 8000d38:	e077      	b.n	8000e2a <HAL_UART_RxCpltCallback+0x156>
		printf("received: %d\n", (int)answer);
 8000d3a:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <HAL_UART_RxCpltCallback+0x17c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4844      	ldr	r0, [pc, #272]	; (8000e54 <HAL_UART_RxCpltCallback+0x180>)
 8000d42:	f003 fd6b 	bl	800481c <iprintf>
		switch(answer)
 8000d46:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <HAL_UART_RxCpltCallback+0x17c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d838      	bhi.n	8000dc2 <HAL_UART_RxCpltCallback+0xee>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <HAL_UART_RxCpltCallback+0x84>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d99 	.word	0x08000d99
 8000d5c:	08000d9f 	.word	0x08000d9f
 8000d60:	08000dc3 	.word	0x08000dc3
 8000d64:	08000da5 	.word	0x08000da5
 8000d68:	08000dc3 	.word	0x08000dc3
 8000d6c:	08000dc3 	.word	0x08000dc3
 8000d70:	08000dc3 	.word	0x08000dc3
 8000d74:	08000dab 	.word	0x08000dab
 8000d78:	08000dc3 	.word	0x08000dc3
 8000d7c:	08000dc3 	.word	0x08000dc3
 8000d80:	08000dc3 	.word	0x08000dc3
 8000d84:	08000dc3 	.word	0x08000dc3
 8000d88:	08000dc3 	.word	0x08000dc3
 8000d8c:	08000dc3 	.word	0x08000dc3
 8000d90:	08000dc3 	.word	0x08000dc3
 8000d94:	08000db1 	.word	0x08000db1
			set_ccw_dir();
 8000d98:	f7ff fc66 	bl	8000668 <set_ccw_dir>
			break;
 8000d9c:	e011      	b.n	8000dc2 <HAL_UART_RxCpltCallback+0xee>
			set_cw_dir();
 8000d9e:	f7ff fc7f 	bl	80006a0 <set_cw_dir>
			break;
 8000da2:	e00e      	b.n	8000dc2 <HAL_UART_RxCpltCallback+0xee>
			set_forward_dir();
 8000da4:	f7ff fc28 	bl	80005f8 <set_forward_dir>
			break;
 8000da8:	e00b      	b.n	8000dc2 <HAL_UART_RxCpltCallback+0xee>
			set_backward_dir();
 8000daa:	f7ff fc41 	bl	8000630 <set_backward_dir>
			break;
 8000dae:	e008      	b.n	8000dc2 <HAL_UART_RxCpltCallback+0xee>
			HAL_TIM_Base_Start_IT(&htim10);
 8000db0:	4829      	ldr	r0, [pc, #164]	; (8000e58 <HAL_UART_RxCpltCallback+0x184>)
 8000db2:	f001 fbf5 	bl	80025a0 <HAL_TIM_Base_Start_IT>
			TIM2->CCR1 = PINCH_FORWARD_CCR;
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_UART_RxCpltCallback+0x188>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000dc0:	bf00      	nop
		if ((answer & 0b1111) == 0 && !disabled)
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_UART_RxCpltCallback+0x17c>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_UART_RxCpltCallback+0x114>
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <HAL_UART_RxCpltCallback+0x18c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d108      	bne.n	8000de8 <HAL_UART_RxCpltCallback+0x114>
			disabled = 1;
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <HAL_UART_RxCpltCallback+0x18c>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
			disable();
 8000ddc:	f7ff fc88 	bl	80006f0 <disable>
			HAL_TIM_Base_Stop_IT(&htim11);
 8000de0:	4820      	ldr	r0, [pc, #128]	; (8000e64 <HAL_UART_RxCpltCallback+0x190>)
 8000de2:	f001 fc3f 	bl	8002664 <HAL_TIM_Base_Stop_IT>
 8000de6:	e011      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x138>
		else if ((answer & 0b1111) != 0 && disabled)
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_UART_RxCpltCallback+0x17c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00b      	beq.n	8000e0c <HAL_UART_RxCpltCallback+0x138>
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_UART_RxCpltCallback+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <HAL_UART_RxCpltCallback+0x138>
			disabled = 0;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_UART_RxCpltCallback+0x18c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
			enable();
 8000e02:	f7ff fc69 	bl	80006d8 <enable>
			HAL_TIM_Base_Start_IT(&htim11);
 8000e06:	4817      	ldr	r0, [pc, #92]	; (8000e64 <HAL_UART_RxCpltCallback+0x190>)
 8000e08:	f001 fbca 	bl	80025a0 <HAL_TIM_Base_Start_IT>
		disabled = answer == 0;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_UART_RxCpltCallback+0x17c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_UART_RxCpltCallback+0x18c>)
 8000e1e:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart6, &answer, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	490b      	ldr	r1, [pc, #44]	; (8000e50 <HAL_UART_RxCpltCallback+0x17c>)
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <HAL_UART_RxCpltCallback+0x194>)
 8000e26:	f002 fc2c 	bl	8003682 <HAL_UART_Receive_IT>
 }
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001ac 	.word	0x200001ac
 8000e38:	20000244 	.word	0x20000244
 8000e3c:	080055e0 	.word	0x080055e0
 8000e40:	20000248 	.word	0x20000248
 8000e44:	2000024c 	.word	0x2000024c
 8000e48:	080055f0 	.word	0x080055f0
 8000e4c:	40000400 	.word	0x40000400
 8000e50:	2000023c 	.word	0x2000023c
 8000e54:	080055fc 	.word	0x080055fc
 8000e58:	2000011c 	.word	0x2000011c
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000250 	.word	0x20000250
 8000e64:	20000164 	.word	0x20000164
 8000e68:	200001f4 	.word	0x200001f4

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eb6:	2007      	movs	r0, #7
 8000eb8:	f000 fc18 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000ef6:	e04a      	b.n	8000f8e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_TIM_Base_MspInit+0xd4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10e      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
}
 8000f1e:	e036      	b.n	8000f8e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM10)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <HAL_TIM_Base_MspInit+0xd8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d116      	bne.n	8000f58 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2019      	movs	r0, #25
 8000f4c:	f000 fbd9 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f50:	2019      	movs	r0, #25
 8000f52:	f000 fbf2 	bl	800173a <HAL_NVIC_EnableIRQ>
}
 8000f56:	e01a      	b.n	8000f8e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM11)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_TIM_Base_MspInit+0xdc>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d115      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_TIM_Base_MspInit+0xd0>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201a      	movs	r0, #26
 8000f84:	f000 fbbd 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f88:	201a      	movs	r0, #26
 8000f8a:	f000 fbd6 	bl	800173a <HAL_NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40000400 	.word	0x40000400
 8000fa0:	40014400 	.word	0x40014400
 8000fa4:	40014800 	.word	0x40014800

08000fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc8:	d11e      	bne.n	8001008 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a21      	ldr	r2, [pc, #132]	; (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4816      	ldr	r0, [pc, #88]	; (800105c <HAL_TIM_MspPostInit+0xb4>)
 8001002:	f000 fc47 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001006:	e022      	b.n	800104e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_TIM_MspPostInit+0xb8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d11d      	bne.n	800104e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <HAL_TIM_MspPostInit+0xb0>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800102e:	2340      	movs	r3, #64	; 0x40
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800103e:	2302      	movs	r3, #2
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <HAL_TIM_MspPostInit+0xb4>)
 800104a:	f000 fc23 	bl	8001894 <HAL_GPIO_Init>
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000
 8001060:	40000400 	.word	0x40000400

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <HAL_UART_MspInit+0x144>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d134      	bne.n	80010f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	4b48      	ldr	r3, [pc, #288]	; (80011ac <HAL_UART_MspInit+0x148>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a47      	ldr	r2, [pc, #284]	; (80011ac <HAL_UART_MspInit+0x148>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b45      	ldr	r3, [pc, #276]	; (80011ac <HAL_UART_MspInit+0x148>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <HAL_UART_MspInit+0x148>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a40      	ldr	r2, [pc, #256]	; (80011ac <HAL_UART_MspInit+0x148>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <HAL_UART_MspInit+0x148>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010be:	230c      	movs	r3, #12
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ce:	2307      	movs	r3, #7
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4835      	ldr	r0, [pc, #212]	; (80011b0 <HAL_UART_MspInit+0x14c>)
 80010da:	f000 fbdb 	bl	8001894 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2026      	movs	r0, #38	; 0x26
 80010e4:	f000 fb0d 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e8:	2026      	movs	r0, #38	; 0x26
 80010ea:	f000 fb26 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80010ee:	e057      	b.n	80011a0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a2f      	ldr	r2, [pc, #188]	; (80011b4 <HAL_UART_MspInit+0x150>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d152      	bne.n	80011a0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_UART_MspInit+0x148>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <HAL_UART_MspInit+0x148>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_UART_MspInit+0x148>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_UART_MspInit+0x148>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_UART_MspInit+0x148>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_UART_MspInit+0x148>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_UART_MspInit+0x148>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <HAL_UART_MspInit+0x148>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_UART_MspInit+0x148>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800114e:	2340      	movs	r3, #64	; 0x40
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800115e:	2308      	movs	r3, #8
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <HAL_UART_MspInit+0x154>)
 800116a:	f000 fb93 	bl	8001894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001180:	2308      	movs	r3, #8
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <HAL_UART_MspInit+0x14c>)
 800118c:	f000 fb82 	bl	8001894 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2047      	movs	r0, #71	; 0x47
 8001196:	f000 fab4 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800119a:	2047      	movs	r0, #71	; 0x47
 800119c:	f000 facd 	bl	800173a <HAL_NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	3730      	adds	r7, #48	; 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40004400 	.word	0x40004400
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40011400 	.word	0x40011400
 80011b8:	40020800 	.word	0x40020800

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001208:	f000 f95c 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001216:	f001 fb5d 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000011c 	.word	0x2000011c

08001224 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800122a:	f001 fb53 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000164 	.word	0x20000164

08001238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART2_IRQHandler+0x10>)
 800123e:	f002 fa45 	bl	80036cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200001ac 	.word	0x200001ac

0800124c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <USART6_IRQHandler+0x10>)
 8001252:	f002 fa3b 	bl	80036cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001f4 	.word	0x200001f4

08001260 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e00a      	b.n	8001288 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001272:	f3af 8000 	nop.w
 8001276:	4601      	mov	r1, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf0      	blt.n	8001272 <_read+0x12>
  }

  return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e009      	b.n	80012c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fcfb 	bl	8000cb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbf1      	blt.n	80012ac <_write+0x12>
  }
  return len;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_close>:

int _close(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fa:	605a      	str	r2, [r3, #4]
  return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_isatty>:

int _isatty(int file)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f003 fbea 	bl	8004b44 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20018000 	.word	0x20018000
 800139c:	00000400 	.word	0x00000400
 80013a0:	20000254 	.word	0x20000254
 80013a4:	200003a8 	.word	0x200003a8

080013a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
                                                                                               ldr   sp, =_estack    		 /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f003 fba9 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff f983 	bl	8000708 <main>
  bx  lr    
 8001402:	4770      	bx	lr
                                                                                               ldr   sp, =_estack    		 /* set stack pointer */
 8001404:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001410:	08005768 	.word	0x08005768
  ldr r2, =_sbss
 8001414:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001418:	200003a8 	.word	0x200003a8

0800141c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_Init+0x40>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_Init+0x40>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x40>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f94f 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fd10 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f967 	bl	8001756 <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 f92f 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000010 	.word	0x20000010
 80014c0:	2000000c 	.word	0x2000000c

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000010 	.word	0x20000010
 80014e8:	20000258 	.word	0x20000258

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000258 	.word	0x20000258

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000010 	.word	0x20000010

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff29 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff3e 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff31 	bl	80015b0 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff feb6 	bl	80014ec <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d008      	beq.n	80017a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e052      	b.n	8001846 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0216 	bic.w	r2, r2, #22
 80017ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <HAL_DMA_Abort+0x62>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0208 	bic.w	r2, r2, #8
 80017de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f0:	e013      	b.n	800181a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f2:	f7ff fe7b 	bl	80014ec <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d90c      	bls.n	800181a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2220      	movs	r2, #32
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2203      	movs	r2, #3
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e015      	b.n	8001846 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e4      	bne.n	80017f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	223f      	movs	r2, #63	; 0x3f
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d004      	beq.n	800186c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e00c      	b.n	8001886 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2205      	movs	r2, #5
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e159      	b.n	8001b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8148 	bne.w	8001b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a2 	beq.w	8001b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a56      	ldr	r2, [pc, #344]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a36:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x202>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_GPIO_Init+0x2f4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x1fe>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a47      	ldr	r2, [pc, #284]	; (8001b8c <HAL_GPIO_Init+0x2f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <HAL_GPIO_Init+0x2fc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x1f6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <HAL_GPIO_Init+0x300>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x1f2>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a86:	2307      	movs	r3, #7
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f aea2 	bls.w	80018b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e267      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d075      	beq.n	8001cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bee:	4b88      	ldr	r3, [pc, #544]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d00c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b85      	ldr	r3, [pc, #532]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b82      	ldr	r3, [pc, #520]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d05b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x108>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d157      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e242      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x74>
 8001c36:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4b70      	ldr	r3, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6f      	ldr	r2, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6c      	ldr	r2, [pc, #432]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c68:	4b69      	ldr	r3, [pc, #420]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a68      	ldr	r2, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a65      	ldr	r2, [pc, #404]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fc30 	bl	80014ec <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fc2c 	bl	80014ec <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e207      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xc0>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc1c 	bl	80014ec <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fc18 	bl	80014ec <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1f3      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xe8>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1c7      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4937      	ldr	r1, [pc, #220]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e03a      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_RCC_OscConfig+0x244>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff fbd1 	bl	80014ec <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fbcd 	bl	80014ec <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1a8      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4925      	ldr	r1, [pc, #148]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x244>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fbb0 	bl	80014ec <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff fbac 	bl	80014ec <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e187      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d036      	beq.n	8001e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_RCC_OscConfig+0x248>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fb90 	bl	80014ec <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fb8c 	bl	80014ec <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e167      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x200>
 8001dee:	e01b      	b.n	8001e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_OscConfig+0x248>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fb79 	bl	80014ec <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	e00e      	b.n	8001e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fb75 	bl	80014ec <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d907      	bls.n	8001e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e150      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	42470000 	.word	0x42470000
 8001e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ea      	bne.n	8001dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8097 	beq.w	8001f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b81      	ldr	r3, [pc, #516]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b7d      	ldr	r3, [pc, #500]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a7c      	ldr	r2, [pc, #496]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b77      	ldr	r3, [pc, #476]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b74      	ldr	r3, [pc, #464]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a73      	ldr	r2, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fb35 	bl	80014ec <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7ff fb31 	bl	80014ec <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e10c      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x2ea>
 8001eac:	4b64      	ldr	r3, [pc, #400]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x324>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x30c>
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a5e      	ldr	r2, [pc, #376]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x324>
 8001edc:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee8:	4b55      	ldr	r3, [pc, #340]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	4a54      	ldr	r2, [pc, #336]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d015      	beq.n	8001f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7ff faf6 	bl	80014ec <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7ff faf2 	bl	80014ec <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0cb      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ee      	beq.n	8001f04 <HAL_RCC_OscConfig+0x334>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7ff fae0 	bl	80014ec <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff fadc 	bl	80014ec <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0b5      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f46:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ee      	bne.n	8001f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4a38      	ldr	r2, [pc, #224]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a1 	beq.w	80020b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d05c      	beq.n	8002034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d141      	bne.n	8002006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fab0 	bl	80014ec <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff faac 	bl	80014ec <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e087      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	491b      	ldr	r1, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff fa85 	bl	80014ec <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff fa81 	bl	80014ec <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e05c      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x416>
 8002004:	e054      	b.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fa6e 	bl	80014ec <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7ff fa6a 	bl	80014ec <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e045      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x444>
 8002032:	e03d      	b.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e038      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000
 8002048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x4ec>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d028      	beq.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d121      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d11a      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cc      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d90c      	bls.n	80020fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e067      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4934      	ldr	r1, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7ff f99c 	bl	80014ec <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff f998 	bl	80014ec <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d20c      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f8fc 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00
 800227c:	40023800 	.word	0x40023800
 8002280:	0800560c 	.word	0x0800560c
 8002284:	20000008 	.word	0x20000008
 8002288:	2000000c 	.word	0x2000000c

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002290:	b094      	sub	sp, #80	; 0x50
 8002292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
 8002298:	2300      	movs	r3, #0
 800229a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800229c:	2300      	movs	r3, #0
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a4:	4b79      	ldr	r3, [pc, #484]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d00d      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x40>
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	f200 80e1 	bhi.w	8002478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022be:	e0db      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_RCC_GetSysClockFreq+0x204>)
 80022c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022c4:	e0db      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c6:	4b73      	ldr	r3, [pc, #460]	; (8002494 <HAL_RCC_GetSysClockFreq+0x208>)
 80022c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ca:	e0d8      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d6:	4b6d      	ldr	r3, [pc, #436]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d063      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e2:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	2200      	movs	r2, #0
 80022ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
 80022fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022fe:	4622      	mov	r2, r4
 8002300:	462b      	mov	r3, r5
 8002302:	f04f 0000 	mov.w	r0, #0
 8002306:	f04f 0100 	mov.w	r1, #0
 800230a:	0159      	lsls	r1, r3, #5
 800230c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002310:	0150      	lsls	r0, r2, #5
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4621      	mov	r1, r4
 8002318:	1a51      	subs	r1, r2, r1
 800231a:	6139      	str	r1, [r7, #16]
 800231c:	4629      	mov	r1, r5
 800231e:	eb63 0301 	sbc.w	r3, r3, r1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002330:	4659      	mov	r1, fp
 8002332:	018b      	lsls	r3, r1, #6
 8002334:	4651      	mov	r1, sl
 8002336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800233a:	4651      	mov	r1, sl
 800233c:	018a      	lsls	r2, r1, #6
 800233e:	4651      	mov	r1, sl
 8002340:	ebb2 0801 	subs.w	r8, r2, r1
 8002344:	4659      	mov	r1, fp
 8002346:	eb63 0901 	sbc.w	r9, r3, r1
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800235a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800235e:	4690      	mov	r8, r2
 8002360:	4699      	mov	r9, r3
 8002362:	4623      	mov	r3, r4
 8002364:	eb18 0303 	adds.w	r3, r8, r3
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	462b      	mov	r3, r5
 800236c:	eb49 0303 	adc.w	r3, r9, r3
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800237e:	4629      	mov	r1, r5
 8002380:	024b      	lsls	r3, r1, #9
 8002382:	4621      	mov	r1, r4
 8002384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002388:	4621      	mov	r1, r4
 800238a:	024a      	lsls	r2, r1, #9
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	2200      	movs	r2, #0
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
 8002396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800239c:	f7fd ff70 	bl	8000280 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a8:	e058      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	2200      	movs	r2, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	4611      	mov	r1, r2
 80023b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ba:	623b      	str	r3, [r7, #32]
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023c4:	4642      	mov	r2, r8
 80023c6:	464b      	mov	r3, r9
 80023c8:	f04f 0000 	mov.w	r0, #0
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	0159      	lsls	r1, r3, #5
 80023d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d6:	0150      	lsls	r0, r2, #5
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4641      	mov	r1, r8
 80023de:	ebb2 0a01 	subs.w	sl, r2, r1
 80023e2:	4649      	mov	r1, r9
 80023e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002400:	eb63 050b 	sbc.w	r5, r3, fp
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	00eb      	lsls	r3, r5, #3
 800240e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002412:	00e2      	lsls	r2, r4, #3
 8002414:	4614      	mov	r4, r2
 8002416:	461d      	mov	r5, r3
 8002418:	4643      	mov	r3, r8
 800241a:	18e3      	adds	r3, r4, r3
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	464b      	mov	r3, r9
 8002420:	eb45 0303 	adc.w	r3, r5, r3
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002432:	4629      	mov	r1, r5
 8002434:	028b      	lsls	r3, r1, #10
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800243c:	4621      	mov	r1, r4
 800243e:	028a      	lsls	r2, r1, #10
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002446:	2200      	movs	r2, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	61fa      	str	r2, [r7, #28]
 800244c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002450:	f7fd ff16 	bl	8000280 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800246c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800246e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002476:	e002      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetSysClockFreq+0x204>)
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800247c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002480:	4618      	mov	r0, r3
 8002482:	3750      	adds	r7, #80	; 0x50
 8002484:	46bd      	mov	sp, r7
 8002486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	00f42400 	.word	0x00f42400
 8002494:	007a1200 	.word	0x007a1200

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCC_GetHCLKFreq+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000008 	.word	0x20000008

080024b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b4:	f7ff fff0 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4903      	ldr	r1, [pc, #12]	; (80024d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	0800561c 	.word	0x0800561c

080024d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024dc:	f7ff ffdc 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0b5b      	lsrs	r3, r3, #13
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4903      	ldr	r1, [pc, #12]	; (80024fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	0800561c 	.word	0x0800561c

08002500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e041      	b.n	8002596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fcce 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f000 fc6a 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d001      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e044      	b.n	8002642 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <HAL_TIM_Base_Start_IT+0xb0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d018      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x6c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d013      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x6c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_TIM_Base_Start_IT+0xb4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00e      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x6c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_TIM_Base_Start_IT+0xb8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x6c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_TIM_Base_Start_IT+0xbc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x6c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a16      	ldr	r2, [pc, #88]	; (8002660 <HAL_TIM_Base_Start_IT+0xc0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d111      	bne.n	8002630 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b06      	cmp	r3, #6
 800261c:	d010      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262e:	e007      	b.n	8002640 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40010000 	.word	0x40010000
 8002654:	40000400 	.word	0x40000400
 8002658:	40000800 	.word	0x40000800
 800265c:	40000c00 	.word	0x40000c00
 8002660:	40014000 	.word	0x40014000

08002664 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a1a      	ldr	r2, [r3, #32]
 8002682:	f241 1311 	movw	r3, #4369	; 0x1111
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <HAL_TIM_Base_Stop_IT+0x48>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a1a      	ldr	r2, [r3, #32]
 8002692:	f240 4344 	movw	r3, #1092	; 0x444
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d107      	bne.n	80026ac <HAL_TIM_Base_Stop_IT+0x48>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e041      	b.n	8002758 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f839 	bl	8002760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f000 fb89 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_TIM_PWM_Start+0x24>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e022      	b.n	80027de <HAL_TIM_PWM_Start+0x6a>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b04      	cmp	r3, #4
 800279c:	d109      	bne.n	80027b2 <HAL_TIM_PWM_Start+0x3e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e015      	b.n	80027de <HAL_TIM_PWM_Start+0x6a>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d109      	bne.n	80027cc <HAL_TIM_PWM_Start+0x58>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e008      	b.n	80027de <HAL_TIM_PWM_Start+0x6a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e068      	b.n	80028b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_PWM_Start+0x82>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	e013      	b.n	800281e <HAL_TIM_PWM_Start+0xaa>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_PWM_Start+0x92>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	e00b      	b.n	800281e <HAL_TIM_PWM_Start+0xaa>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d104      	bne.n	8002816 <HAL_TIM_PWM_Start+0xa2>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002814:	e003      	b.n	800281e <HAL_TIM_PWM_Start+0xaa>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2201      	movs	r2, #1
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fda8 	bl	800337c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_PWM_Start+0x14c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d107      	bne.n	8002846 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_TIM_PWM_Start+0x14c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_TIM_PWM_Start+0x10e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d013      	beq.n	8002882 <HAL_TIM_PWM_Start+0x10e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_TIM_PWM_Start+0x150>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_TIM_PWM_Start+0x10e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_TIM_PWM_Start+0x154>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_TIM_PWM_Start+0x10e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_TIM_PWM_Start+0x158>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_TIM_PWM_Start+0x10e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_TIM_PWM_Start+0x15c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d111      	bne.n	80028a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b06      	cmp	r3, #6
 8002892:	d010      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	e007      	b.n	80028b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40014000 	.word	0x40014000

080028d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d020      	beq.n	8002938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0202 	mvn.w	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa5b 	bl	8002dda <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fa4d 	bl	8002dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa5e 	bl	8002dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d020      	beq.n	8002984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0204 	mvn.w	r2, #4
 8002954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fa35 	bl	8002dda <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa27 	bl	8002dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fa38 	bl	8002dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d020      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0208 	mvn.w	r2, #8
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2204      	movs	r2, #4
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fa0f 	bl	8002dda <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa01 	bl	8002dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fa12 	bl	8002dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d020      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0210 	mvn.w	r2, #16
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2208      	movs	r2, #8
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9e9 	bl	8002dda <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f9db 	bl	8002dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f9ec 	bl	8002dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd fd9e 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fd2a 	bl	80034b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f9bd 	bl	8002e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00c      	beq.n	8002aac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0220 	mvn.w	r2, #32
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fcfc 	bl	80034a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0ae      	b.n	8002c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	f200 809f 	bhi.w	8002c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b1d 	.word	0x08002b1d
 8002aec:	08002c21 	.word	0x08002c21
 8002af0:	08002c21 	.word	0x08002c21
 8002af4:	08002c21 	.word	0x08002c21
 8002af8:	08002b5d 	.word	0x08002b5d
 8002afc:	08002c21 	.word	0x08002c21
 8002b00:	08002c21 	.word	0x08002c21
 8002b04:	08002c21 	.word	0x08002c21
 8002b08:	08002b9f 	.word	0x08002b9f
 8002b0c:	08002c21 	.word	0x08002c21
 8002b10:	08002c21 	.word	0x08002c21
 8002b14:	08002c21 	.word	0x08002c21
 8002b18:	08002bdf 	.word	0x08002bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fa04 	bl	8002f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0208 	orr.w	r2, r2, #8
 8002b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0204 	bic.w	r2, r2, #4
 8002b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6999      	ldr	r1, [r3, #24]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	619a      	str	r2, [r3, #24]
      break;
 8002b5a:	e064      	b.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fa4a 	bl	8002ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6999      	ldr	r1, [r3, #24]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	021a      	lsls	r2, r3, #8
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	619a      	str	r2, [r3, #24]
      break;
 8002b9c:	e043      	b.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fa95 	bl	80030d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0208 	orr.w	r2, r2, #8
 8002bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0204 	bic.w	r2, r2, #4
 8002bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69d9      	ldr	r1, [r3, #28]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	61da      	str	r2, [r3, #28]
      break;
 8002bdc:	e023      	b.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fadf 	bl	80031a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69d9      	ldr	r1, [r3, #28]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	021a      	lsls	r2, r3, #8
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	61da      	str	r2, [r3, #28]
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	75fb      	strb	r3, [r7, #23]
      break;
 8002c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_TIM_ConfigClockSource+0x1c>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0b4      	b.n	8002dbe <HAL_TIM_ConfigClockSource+0x186>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8c:	d03e      	beq.n	8002d0c <HAL_TIM_ConfigClockSource+0xd4>
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c92:	f200 8087 	bhi.w	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9a:	f000 8086 	beq.w	8002daa <HAL_TIM_ConfigClockSource+0x172>
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca2:	d87f      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b70      	cmp	r3, #112	; 0x70
 8002ca6:	d01a      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0xa6>
 8002ca8:	2b70      	cmp	r3, #112	; 0x70
 8002caa:	d87b      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b60      	cmp	r3, #96	; 0x60
 8002cae:	d050      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x11a>
 8002cb0:	2b60      	cmp	r3, #96	; 0x60
 8002cb2:	d877      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b50      	cmp	r3, #80	; 0x50
 8002cb6:	d03c      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0xfa>
 8002cb8:	2b50      	cmp	r3, #80	; 0x50
 8002cba:	d873      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d058      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x13a>
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d86f      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b30      	cmp	r3, #48	; 0x30
 8002cc6:	d064      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc8:	2b30      	cmp	r3, #48	; 0x30
 8002cca:	d86b      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d060      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d867      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d05a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cdc:	e062      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cee:	f000 fb25 	bl	800333c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	609a      	str	r2, [r3, #8]
      break;
 8002d0a:	e04f      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d1c:	f000 fb0e 	bl	800333c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2e:	609a      	str	r2, [r3, #8]
      break;
 8002d30:	e03c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f000 fa82 	bl	8003248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2150      	movs	r1, #80	; 0x50
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fadb 	bl	8003306 <TIM_ITRx_SetConfig>
      break;
 8002d50:	e02c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f000 faa1 	bl	80032a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2160      	movs	r1, #96	; 0x60
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 facb 	bl	8003306 <TIM_ITRx_SetConfig>
      break;
 8002d70:	e01c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 fa62 	bl	8003248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2140      	movs	r1, #64	; 0x40
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fabb 	bl	8003306 <TIM_ITRx_SetConfig>
      break;
 8002d90:	e00c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f000 fab2 	bl	8003306 <TIM_ITRx_SetConfig>
      break;
 8002da2:	e003      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	e000      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <TIM_Base_SetConfig+0xfc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00f      	beq.n	8002e50 <TIM_Base_SetConfig+0x38>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d00b      	beq.n	8002e50 <TIM_Base_SetConfig+0x38>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <TIM_Base_SetConfig+0x100>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d007      	beq.n	8002e50 <TIM_Base_SetConfig+0x38>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a36      	ldr	r2, [pc, #216]	; (8002f1c <TIM_Base_SetConfig+0x104>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d003      	beq.n	8002e50 <TIM_Base_SetConfig+0x38>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <TIM_Base_SetConfig+0x108>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d108      	bne.n	8002e62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a2b      	ldr	r2, [pc, #172]	; (8002f14 <TIM_Base_SetConfig+0xfc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01b      	beq.n	8002ea2 <TIM_Base_SetConfig+0x8a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e70:	d017      	beq.n	8002ea2 <TIM_Base_SetConfig+0x8a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <TIM_Base_SetConfig+0x100>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <TIM_Base_SetConfig+0x8a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <TIM_Base_SetConfig+0x104>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00f      	beq.n	8002ea2 <TIM_Base_SetConfig+0x8a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <TIM_Base_SetConfig+0x108>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <TIM_Base_SetConfig+0x8a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <TIM_Base_SetConfig+0x10c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <TIM_Base_SetConfig+0x8a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <TIM_Base_SetConfig+0x110>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_Base_SetConfig+0x8a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <TIM_Base_SetConfig+0x114>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <TIM_Base_SetConfig+0xfc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f023 0201 	bic.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]
  }
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40014400 	.word	0x40014400
 8002f2c:	40014800 	.word	0x40014800

08002f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f023 0201 	bic.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f023 0302 	bic.w	r3, r3, #2
 8002f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <TIM_OC1_SetConfig+0xc8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10c      	bne.n	8002fa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0308 	bic.w	r3, r3, #8
 8002f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <TIM_OC1_SetConfig+0xc8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d111      	bne.n	8002fd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40010000 	.word	0x40010000

08002ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f023 0210 	bic.w	r2, r3, #16
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0320 	bic.w	r3, r3, #32
 8003046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a1e      	ldr	r2, [pc, #120]	; (80030d0 <TIM_OC2_SetConfig+0xd4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10d      	bne.n	8003078 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <TIM_OC2_SetConfig+0xd4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d113      	bne.n	80030a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800308e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000

080030d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800311c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <TIM_OC3_SetConfig+0xd0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10d      	bne.n	800314e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800314c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <TIM_OC3_SetConfig+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d113      	bne.n	800317e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800315c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	621a      	str	r2, [r3, #32]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40010000 	.word	0x40010000

080031a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	031b      	lsls	r3, r3, #12
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a10      	ldr	r2, [pc, #64]	; (8003244 <TIM_OC4_SetConfig+0x9c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d109      	bne.n	800321c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800320e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000

08003248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0201 	bic.w	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 030a 	bic.w	r3, r3, #10
 8003284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	621a      	str	r2, [r3, #32]
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b087      	sub	sp, #28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f023 0210 	bic.w	r2, r3, #16
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	031b      	lsls	r3, r3, #12
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	621a      	str	r2, [r3, #32]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	f043 0307 	orr.w	r3, r3, #7
 8003328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	021a      	lsls	r2, r3, #8
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	431a      	orrs	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4313      	orrs	r3, r2
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	609a      	str	r2, [r3, #8]
}
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2201      	movs	r2, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	43db      	mvns	r3, r3
 800339e:	401a      	ands	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033dc:	2302      	movs	r3, #2
 80033de:	e050      	b.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d013      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10c      	bne.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	4313      	orrs	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40014000 	.word	0x40014000

080034a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e042      	b.n	8003564 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fdb6 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	; 0x24
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fdbd 	bl	8004090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b20      	cmp	r3, #32
 800358a:	d175      	bne.n	8003678 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_UART_Transmit+0x2c>
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e06e      	b.n	800367a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2221      	movs	r2, #33	; 0x21
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035aa:	f7fd ff9f 	bl	80014ec <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d108      	bne.n	80035d8 <HAL_UART_Transmit+0x6c>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e003      	b.n	80035e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035e0:	e02e      	b.n	8003640 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fb1f 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e03a      	b.n	800367a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3302      	adds	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	e007      	b.n	8003632 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3301      	adds	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1cb      	bne.n	80035e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	2140      	movs	r1, #64	; 0x40
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 faeb 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e006      	b.n	800367a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	4613      	mov	r3, r2
 800368e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	d112      	bne.n	80036c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_UART_Receive_IT+0x26>
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e00b      	b.n	80036c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	461a      	mov	r2, r3
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fb12 	bl	8003ce2 <UART_Start_Receive_IT>
 80036be:	4603      	mov	r3, r0
 80036c0:	e000      	b.n	80036c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
  }
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b0ba      	sub	sp, #232	; 0xe8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800370a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10f      	bne.n	8003732 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_UART_IRQHandler+0x66>
 800371e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fbf2 	bl	8003f14 <UART_Receive_IT>
      return;
 8003730:	e25b      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80de 	beq.w	80038f8 <HAL_UART_IRQHandler+0x22c>
 800373c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80d1 	beq.w	80038f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0xae>
 8003762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_UART_IRQHandler+0xd2>
 8003786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0202 	orr.w	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_UART_IRQHandler+0xf6>
 80037aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f043 0204 	orr.w	r2, r3, #4
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d011      	beq.n	80037f2 <HAL_UART_IRQHandler+0x126>
 80037ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d105      	bne.n	80037e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f043 0208 	orr.w	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 81f2 	beq.w	8003be0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_UART_IRQHandler+0x14e>
 8003808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fb7d 	bl	8003f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <HAL_UART_IRQHandler+0x17a>
 800383e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d04f      	beq.n	80038e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa85 	bl	8003d56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d141      	bne.n	80038de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3314      	adds	r3, #20
 8003860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800388a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800389e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1d9      	bne.n	800385a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d013      	beq.n	80038d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	4a7e      	ldr	r2, [pc, #504]	; (8003aac <HAL_UART_IRQHandler+0x3e0>)
 80038b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd ffc7 	bl	800184e <HAL_DMA_Abort_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038d0:	4610      	mov	r0, r2
 80038d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	e00e      	b.n	80038f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f994 	bl	8003c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e00a      	b.n	80038f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f990 	bl	8003c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e006      	b.n	80038f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f98c 	bl	8003c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80038f2:	e175      	b.n	8003be0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	bf00      	nop
    return;
 80038f6:	e173      	b.n	8003be0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	f040 814f 	bne.w	8003ba0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8148 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8141 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	f040 80b6 	bne.w	8003ab0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8145 	beq.w	8003be4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800395e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003962:	429a      	cmp	r2, r3
 8003964:	f080 813e 	bcs.w	8003be4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800396e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397a:	f000 8088 	beq.w	8003a8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800399c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1d9      	bne.n	800397e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3314      	adds	r3, #20
 80039ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e1      	bne.n	80039ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e3      	bne.n	8003a06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5e:	f023 0310 	bic.w	r3, r3, #16
 8003a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a70:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e3      	bne.n	8003a4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fe70 	bl	800176e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8b7 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aaa:	e09b      	b.n	8003be4 <HAL_UART_IRQHandler+0x518>
 8003aac:	08003e1d 	.word	0x08003e1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 808e 	beq.w	8003be8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8089 	beq.w	8003be8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003afa:	647a      	str	r2, [r7, #68]	; 0x44
 8003afc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e3      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b32:	633a      	str	r2, [r7, #48]	; 0x30
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e3      	bne.n	8003b0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0310 	bic.w	r3, r3, #16
 8003b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b78:	61fa      	str	r2, [r7, #28]
 8003b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	617b      	str	r3, [r7, #20]
   return(result);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e3      	bne.n	8003b54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f83d 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b9e:	e023      	b.n	8003be8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x4f4>
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f943 	bl	8003e44 <UART_Transmit_IT>
    return;
 8003bbe:	e014      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <HAL_UART_IRQHandler+0x51e>
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f983 	bl	8003ee4 <UART_EndTransmit_IT>
    return;
 8003bde:	e004      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
    return;
 8003be0:	bf00      	nop
 8003be2:	e002      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
      return;
 8003be4:	bf00      	nop
 8003be6:	e000      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
      return;
 8003be8:	bf00      	nop
  }
}
 8003bea:	37e8      	adds	r7, #232	; 0xe8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	e03b      	b.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d037      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fd fc4f 	bl	80014ec <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e03a      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d023      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d020      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d01d      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d116      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f857 	bl	8003d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2208      	movs	r2, #8
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00f      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d0b4      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	4613      	mov	r3, r2
 8003cee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	88fa      	ldrh	r2, [r7, #6]
 8003cfa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2222      	movs	r2, #34	; 0x22
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0220 	orr.w	r2, r2, #32
 8003d46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b095      	sub	sp, #84	; 0x54
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d7e:	643a      	str	r2, [r7, #64]	; 0x40
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e5      	bne.n	8003d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d119      	bne.n	8003e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0310 	bic.w	r3, r3, #16
 8003de4:	647b      	str	r3, [r7, #68]	; 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dee:	61ba      	str	r2, [r7, #24]
 8003df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6979      	ldr	r1, [r7, #20]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e10:	bf00      	nop
 8003e12:	3754      	adds	r7, #84	; 0x54
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff fee4 	bl	8003c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b21      	cmp	r3, #33	; 0x21
 8003e56:	d13e      	bne.n	8003ed6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e60:	d114      	bne.n	8003e8c <UART_Transmit_IT+0x48>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d110      	bne.n	8003e8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	1c9a      	adds	r2, r3, #2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]
 8003e8a:	e008      	b.n	8003e9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	1c59      	adds	r1, r3, #1
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6211      	str	r1, [r2, #32]
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fe73 	bl	8003bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08c      	sub	sp, #48	; 0x30
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b22      	cmp	r3, #34	; 0x22
 8003f26:	f040 80ae 	bne.w	8004086 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f32:	d117      	bne.n	8003f64 <UART_Receive_IT+0x50>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d113      	bne.n	8003f64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	1c9a      	adds	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28
 8003f62:	e026      	b.n	8003fb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f76:	d007      	beq.n	8003f88 <UART_Receive_IT+0x74>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <UART_Receive_IT+0x82>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e008      	b.n	8003fa8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d15d      	bne.n	8004082 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0220 	bic.w	r2, r2, #32
 8003fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	2b01      	cmp	r3, #1
 800400a:	d135      	bne.n	8004078 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	613b      	str	r3, [r7, #16]
   return(result);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f023 0310 	bic.w	r3, r3, #16
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004032:	623a      	str	r2, [r7, #32]
 8004034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	69f9      	ldr	r1, [r7, #28]
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b10      	cmp	r3, #16
 8004052:	d10a      	bne.n	800406a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fdd1 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
 8004076:	e002      	b.n	800407e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fc fe2b 	bl	8000cd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e002      	b.n	8004088 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3730      	adds	r7, #48	; 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b0c0      	sub	sp, #256	; 0x100
 8004096:	af00      	add	r7, sp, #0
 8004098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	ea40 0301 	orr.w	r3, r0, r1
 80040b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040e8:	f021 010c 	bic.w	r1, r1, #12
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040f6:	430b      	orrs	r3, r1
 80040f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	6999      	ldr	r1, [r3, #24]
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	ea40 0301 	orr.w	r3, r0, r1
 8004116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b8f      	ldr	r3, [pc, #572]	; (800435c <UART_SetConfig+0x2cc>)
 8004120:	429a      	cmp	r2, r3
 8004122:	d005      	beq.n	8004130 <UART_SetConfig+0xa0>
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8d      	ldr	r3, [pc, #564]	; (8004360 <UART_SetConfig+0x2d0>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d104      	bne.n	800413a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7fe f9d2 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8004134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004138:	e003      	b.n	8004142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800413a:	f7fe f9b9 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 800413e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	f040 810c 	bne.w	8004368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800415a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800415e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004162:	4622      	mov	r2, r4
 8004164:	462b      	mov	r3, r5
 8004166:	1891      	adds	r1, r2, r2
 8004168:	65b9      	str	r1, [r7, #88]	; 0x58
 800416a:	415b      	adcs	r3, r3
 800416c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800416e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004172:	4621      	mov	r1, r4
 8004174:	eb12 0801 	adds.w	r8, r2, r1
 8004178:	4629      	mov	r1, r5
 800417a:	eb43 0901 	adc.w	r9, r3, r1
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004192:	4690      	mov	r8, r2
 8004194:	4699      	mov	r9, r3
 8004196:	4623      	mov	r3, r4
 8004198:	eb18 0303 	adds.w	r3, r8, r3
 800419c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041a0:	462b      	mov	r3, r5
 80041a2:	eb49 0303 	adc.w	r3, r9, r3
 80041a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041be:	460b      	mov	r3, r1
 80041c0:	18db      	adds	r3, r3, r3
 80041c2:	653b      	str	r3, [r7, #80]	; 0x50
 80041c4:	4613      	mov	r3, r2
 80041c6:	eb42 0303 	adc.w	r3, r2, r3
 80041ca:	657b      	str	r3, [r7, #84]	; 0x54
 80041cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041d4:	f7fc f854 	bl	8000280 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <UART_SetConfig+0x2d4>)
 80041de:	fba3 2302 	umull	r2, r3, r3, r2
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	011c      	lsls	r4, r3, #4
 80041e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004200:	415b      	adcs	r3, r3
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004208:	4641      	mov	r1, r8
 800420a:	eb12 0a01 	adds.w	sl, r2, r1
 800420e:	4649      	mov	r1, r9
 8004210:	eb43 0b01 	adc.w	fp, r3, r1
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004228:	4692      	mov	sl, r2
 800422a:	469b      	mov	fp, r3
 800422c:	4643      	mov	r3, r8
 800422e:	eb1a 0303 	adds.w	r3, sl, r3
 8004232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004236:	464b      	mov	r3, r9
 8004238:	eb4b 0303 	adc.w	r3, fp, r3
 800423c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800424c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004254:	460b      	mov	r3, r1
 8004256:	18db      	adds	r3, r3, r3
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
 800425a:	4613      	mov	r3, r2
 800425c:	eb42 0303 	adc.w	r3, r2, r3
 8004260:	647b      	str	r3, [r7, #68]	; 0x44
 8004262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800426a:	f7fc f809 	bl	8000280 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4611      	mov	r1, r2
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <UART_SetConfig+0x2d4>)
 8004276:	fba3 2301 	umull	r2, r3, r3, r1
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2264      	movs	r2, #100	; 0x64
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	1acb      	subs	r3, r1, r3
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <UART_SetConfig+0x2d4>)
 800428c:	fba3 2302 	umull	r2, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004298:	441c      	add	r4, r3
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042b4:	415b      	adcs	r3, r3
 80042b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042bc:	4641      	mov	r1, r8
 80042be:	1851      	adds	r1, r2, r1
 80042c0:	6339      	str	r1, [r7, #48]	; 0x30
 80042c2:	4649      	mov	r1, r9
 80042c4:	414b      	adcs	r3, r1
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042d4:	4659      	mov	r1, fp
 80042d6:	00cb      	lsls	r3, r1, #3
 80042d8:	4651      	mov	r1, sl
 80042da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042de:	4651      	mov	r1, sl
 80042e0:	00ca      	lsls	r2, r1, #3
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	4603      	mov	r3, r0
 80042e8:	4642      	mov	r2, r8
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f0:	464b      	mov	r3, r9
 80042f2:	460a      	mov	r2, r1
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800430c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004310:	460b      	mov	r3, r1
 8004312:	18db      	adds	r3, r3, r3
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
 8004316:	4613      	mov	r3, r2
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004326:	f7fb ffab 	bl	8000280 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <UART_SetConfig+0x2d4>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a08      	ldr	r2, [pc, #32]	; (8004364 <UART_SetConfig+0x2d4>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4422      	add	r2, r4
 8004356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004358:	e106      	b.n	8004568 <UART_SetConfig+0x4d8>
 800435a:	bf00      	nop
 800435c:	40011000 	.word	0x40011000
 8004360:	40011400 	.word	0x40011400
 8004364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800436c:	2200      	movs	r2, #0
 800436e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800437a:	4642      	mov	r2, r8
 800437c:	464b      	mov	r3, r9
 800437e:	1891      	adds	r1, r2, r2
 8004380:	6239      	str	r1, [r7, #32]
 8004382:	415b      	adcs	r3, r3
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800438a:	4641      	mov	r1, r8
 800438c:	1854      	adds	r4, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb43 0501 	adc.w	r5, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	00eb      	lsls	r3, r5, #3
 800439e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a2:	00e2      	lsls	r2, r4, #3
 80043a4:	4614      	mov	r4, r2
 80043a6:	461d      	mov	r5, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	18e3      	adds	r3, r4, r3
 80043ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043b0:	464b      	mov	r3, r9
 80043b2:	eb45 0303 	adc.w	r3, r5, r3
 80043b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043d6:	4629      	mov	r1, r5
 80043d8:	008b      	lsls	r3, r1, #2
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e0:	4621      	mov	r1, r4
 80043e2:	008a      	lsls	r2, r1, #2
 80043e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043e8:	f7fb ff4a 	bl	8000280 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4b60      	ldr	r3, [pc, #384]	; (8004574 <UART_SetConfig+0x4e4>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	011c      	lsls	r4, r3, #4
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	61b9      	str	r1, [r7, #24]
 8004414:	415b      	adcs	r3, r3
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800441c:	4641      	mov	r1, r8
 800441e:	1851      	adds	r1, r2, r1
 8004420:	6139      	str	r1, [r7, #16]
 8004422:	4649      	mov	r1, r9
 8004424:	414b      	adcs	r3, r1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004434:	4659      	mov	r1, fp
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4651      	mov	r1, sl
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4642      	mov	r2, r8
 800444a:	189b      	adds	r3, r3, r2
 800444c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004450:	464b      	mov	r3, r9
 8004452:	460a      	mov	r2, r1
 8004454:	eb42 0303 	adc.w	r3, r2, r3
 8004458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	67bb      	str	r3, [r7, #120]	; 0x78
 8004466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004474:	4649      	mov	r1, r9
 8004476:	008b      	lsls	r3, r1, #2
 8004478:	4641      	mov	r1, r8
 800447a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800447e:	4641      	mov	r1, r8
 8004480:	008a      	lsls	r2, r1, #2
 8004482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004486:	f7fb fefb 	bl	8000280 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4611      	mov	r1, r2
 8004490:	4b38      	ldr	r3, [pc, #224]	; (8004574 <UART_SetConfig+0x4e4>)
 8004492:	fba3 2301 	umull	r2, r3, r3, r1
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2264      	movs	r2, #100	; 0x64
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	1acb      	subs	r3, r1, r3
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	3332      	adds	r3, #50	; 0x32
 80044a4:	4a33      	ldr	r2, [pc, #204]	; (8004574 <UART_SetConfig+0x4e4>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b0:	441c      	add	r4, r3
 80044b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b6:	2200      	movs	r2, #0
 80044b8:	673b      	str	r3, [r7, #112]	; 0x70
 80044ba:	677a      	str	r2, [r7, #116]	; 0x74
 80044bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	66bb      	str	r3, [r7, #104]	; 0x68
 8004502:	464b      	mov	r3, r9
 8004504:	460a      	mov	r2, r1
 8004506:	eb42 0303 	adc.w	r3, r2, r3
 800450a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	663b      	str	r3, [r7, #96]	; 0x60
 8004516:	667a      	str	r2, [r7, #100]	; 0x64
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004524:	4649      	mov	r1, r9
 8004526:	008b      	lsls	r3, r1, #2
 8004528:	4641      	mov	r1, r8
 800452a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452e:	4641      	mov	r1, r8
 8004530:	008a      	lsls	r2, r1, #2
 8004532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004536:	f7fb fea3 	bl	8000280 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <UART_SetConfig+0x4e4>)
 8004540:	fba3 1302 	umull	r1, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	2164      	movs	r1, #100	; 0x64
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	3332      	adds	r3, #50	; 0x32
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <UART_SetConfig+0x4e4>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	f003 020f 	and.w	r2, r3, #15
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4422      	add	r2, r4
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004574:	51eb851f 	.word	0x51eb851f

08004578 <atoi>:
 8004578:	220a      	movs	r2, #10
 800457a:	2100      	movs	r1, #0
 800457c:	f000 b882 	b.w	8004684 <strtol>

08004580 <_strtol_l.constprop.0>:
 8004580:	2b01      	cmp	r3, #1
 8004582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004586:	d001      	beq.n	800458c <_strtol_l.constprop.0+0xc>
 8004588:	2b24      	cmp	r3, #36	; 0x24
 800458a:	d906      	bls.n	800459a <_strtol_l.constprop.0+0x1a>
 800458c:	f000 fada 	bl	8004b44 <__errno>
 8004590:	2316      	movs	r3, #22
 8004592:	6003      	str	r3, [r0, #0]
 8004594:	2000      	movs	r0, #0
 8004596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004680 <_strtol_l.constprop.0+0x100>
 800459e:	460d      	mov	r5, r1
 80045a0:	462e      	mov	r6, r5
 80045a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045a6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80045aa:	f017 0708 	ands.w	r7, r7, #8
 80045ae:	d1f7      	bne.n	80045a0 <_strtol_l.constprop.0+0x20>
 80045b0:	2c2d      	cmp	r4, #45	; 0x2d
 80045b2:	d132      	bne.n	800461a <_strtol_l.constprop.0+0x9a>
 80045b4:	782c      	ldrb	r4, [r5, #0]
 80045b6:	2701      	movs	r7, #1
 80045b8:	1cb5      	adds	r5, r6, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d05b      	beq.n	8004676 <_strtol_l.constprop.0+0xf6>
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d109      	bne.n	80045d6 <_strtol_l.constprop.0+0x56>
 80045c2:	2c30      	cmp	r4, #48	; 0x30
 80045c4:	d107      	bne.n	80045d6 <_strtol_l.constprop.0+0x56>
 80045c6:	782c      	ldrb	r4, [r5, #0]
 80045c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80045cc:	2c58      	cmp	r4, #88	; 0x58
 80045ce:	d14d      	bne.n	800466c <_strtol_l.constprop.0+0xec>
 80045d0:	786c      	ldrb	r4, [r5, #1]
 80045d2:	2310      	movs	r3, #16
 80045d4:	3502      	adds	r5, #2
 80045d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80045da:	f108 38ff 	add.w	r8, r8, #4294967295
 80045de:	f04f 0e00 	mov.w	lr, #0
 80045e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80045e6:	4676      	mov	r6, lr
 80045e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80045ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80045f0:	f1bc 0f09 	cmp.w	ip, #9
 80045f4:	d816      	bhi.n	8004624 <_strtol_l.constprop.0+0xa4>
 80045f6:	4664      	mov	r4, ip
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	dd24      	ble.n	8004646 <_strtol_l.constprop.0+0xc6>
 80045fc:	f1be 3fff 	cmp.w	lr, #4294967295
 8004600:	d008      	beq.n	8004614 <_strtol_l.constprop.0+0x94>
 8004602:	45b1      	cmp	r9, r6
 8004604:	d31c      	bcc.n	8004640 <_strtol_l.constprop.0+0xc0>
 8004606:	d101      	bne.n	800460c <_strtol_l.constprop.0+0x8c>
 8004608:	45a2      	cmp	sl, r4
 800460a:	db19      	blt.n	8004640 <_strtol_l.constprop.0+0xc0>
 800460c:	fb06 4603 	mla	r6, r6, r3, r4
 8004610:	f04f 0e01 	mov.w	lr, #1
 8004614:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004618:	e7e8      	b.n	80045ec <_strtol_l.constprop.0+0x6c>
 800461a:	2c2b      	cmp	r4, #43	; 0x2b
 800461c:	bf04      	itt	eq
 800461e:	782c      	ldrbeq	r4, [r5, #0]
 8004620:	1cb5      	addeq	r5, r6, #2
 8004622:	e7ca      	b.n	80045ba <_strtol_l.constprop.0+0x3a>
 8004624:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004628:	f1bc 0f19 	cmp.w	ip, #25
 800462c:	d801      	bhi.n	8004632 <_strtol_l.constprop.0+0xb2>
 800462e:	3c37      	subs	r4, #55	; 0x37
 8004630:	e7e2      	b.n	80045f8 <_strtol_l.constprop.0+0x78>
 8004632:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004636:	f1bc 0f19 	cmp.w	ip, #25
 800463a:	d804      	bhi.n	8004646 <_strtol_l.constprop.0+0xc6>
 800463c:	3c57      	subs	r4, #87	; 0x57
 800463e:	e7db      	b.n	80045f8 <_strtol_l.constprop.0+0x78>
 8004640:	f04f 3eff 	mov.w	lr, #4294967295
 8004644:	e7e6      	b.n	8004614 <_strtol_l.constprop.0+0x94>
 8004646:	f1be 3fff 	cmp.w	lr, #4294967295
 800464a:	d105      	bne.n	8004658 <_strtol_l.constprop.0+0xd8>
 800464c:	2322      	movs	r3, #34	; 0x22
 800464e:	6003      	str	r3, [r0, #0]
 8004650:	4646      	mov	r6, r8
 8004652:	b942      	cbnz	r2, 8004666 <_strtol_l.constprop.0+0xe6>
 8004654:	4630      	mov	r0, r6
 8004656:	e79e      	b.n	8004596 <_strtol_l.constprop.0+0x16>
 8004658:	b107      	cbz	r7, 800465c <_strtol_l.constprop.0+0xdc>
 800465a:	4276      	negs	r6, r6
 800465c:	2a00      	cmp	r2, #0
 800465e:	d0f9      	beq.n	8004654 <_strtol_l.constprop.0+0xd4>
 8004660:	f1be 0f00 	cmp.w	lr, #0
 8004664:	d000      	beq.n	8004668 <_strtol_l.constprop.0+0xe8>
 8004666:	1e69      	subs	r1, r5, #1
 8004668:	6011      	str	r1, [r2, #0]
 800466a:	e7f3      	b.n	8004654 <_strtol_l.constprop.0+0xd4>
 800466c:	2430      	movs	r4, #48	; 0x30
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1b1      	bne.n	80045d6 <_strtol_l.constprop.0+0x56>
 8004672:	2308      	movs	r3, #8
 8004674:	e7af      	b.n	80045d6 <_strtol_l.constprop.0+0x56>
 8004676:	2c30      	cmp	r4, #48	; 0x30
 8004678:	d0a5      	beq.n	80045c6 <_strtol_l.constprop.0+0x46>
 800467a:	230a      	movs	r3, #10
 800467c:	e7ab      	b.n	80045d6 <_strtol_l.constprop.0+0x56>
 800467e:	bf00      	nop
 8004680:	08005625 	.word	0x08005625

08004684 <strtol>:
 8004684:	4613      	mov	r3, r2
 8004686:	460a      	mov	r2, r1
 8004688:	4601      	mov	r1, r0
 800468a:	4802      	ldr	r0, [pc, #8]	; (8004694 <strtol+0x10>)
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f7ff bf77 	b.w	8004580 <_strtol_l.constprop.0>
 8004692:	bf00      	nop
 8004694:	2000006c 	.word	0x2000006c

08004698 <std>:
 8004698:	2300      	movs	r3, #0
 800469a:	b510      	push	{r4, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	e9c0 3300 	strd	r3, r3, [r0]
 80046a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046a6:	6083      	str	r3, [r0, #8]
 80046a8:	8181      	strh	r1, [r0, #12]
 80046aa:	6643      	str	r3, [r0, #100]	; 0x64
 80046ac:	81c2      	strh	r2, [r0, #14]
 80046ae:	6183      	str	r3, [r0, #24]
 80046b0:	4619      	mov	r1, r3
 80046b2:	2208      	movs	r2, #8
 80046b4:	305c      	adds	r0, #92	; 0x5c
 80046b6:	f000 f9f7 	bl	8004aa8 <memset>
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <std+0x58>)
 80046bc:	6263      	str	r3, [r4, #36]	; 0x24
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <std+0x5c>)
 80046c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <std+0x60>)
 80046c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <std+0x64>)
 80046c8:	6323      	str	r3, [r4, #48]	; 0x30
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <std+0x68>)
 80046cc:	6224      	str	r4, [r4, #32]
 80046ce:	429c      	cmp	r4, r3
 80046d0:	d006      	beq.n	80046e0 <std+0x48>
 80046d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80046d6:	4294      	cmp	r4, r2
 80046d8:	d002      	beq.n	80046e0 <std+0x48>
 80046da:	33d0      	adds	r3, #208	; 0xd0
 80046dc:	429c      	cmp	r4, r3
 80046de:	d105      	bne.n	80046ec <std+0x54>
 80046e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e8:	f000 ba56 	b.w	8004b98 <__retarget_lock_init_recursive>
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	bf00      	nop
 80046f0:	080048f9 	.word	0x080048f9
 80046f4:	0800491b 	.word	0x0800491b
 80046f8:	08004953 	.word	0x08004953
 80046fc:	08004977 	.word	0x08004977
 8004700:	2000025c 	.word	0x2000025c

08004704 <stdio_exit_handler>:
 8004704:	4a02      	ldr	r2, [pc, #8]	; (8004710 <stdio_exit_handler+0xc>)
 8004706:	4903      	ldr	r1, [pc, #12]	; (8004714 <stdio_exit_handler+0x10>)
 8004708:	4803      	ldr	r0, [pc, #12]	; (8004718 <stdio_exit_handler+0x14>)
 800470a:	f000 b869 	b.w	80047e0 <_fwalk_sglue>
 800470e:	bf00      	nop
 8004710:	20000014 	.word	0x20000014
 8004714:	08005445 	.word	0x08005445
 8004718:	20000020 	.word	0x20000020

0800471c <cleanup_stdio>:
 800471c:	6841      	ldr	r1, [r0, #4]
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <cleanup_stdio+0x34>)
 8004720:	4299      	cmp	r1, r3
 8004722:	b510      	push	{r4, lr}
 8004724:	4604      	mov	r4, r0
 8004726:	d001      	beq.n	800472c <cleanup_stdio+0x10>
 8004728:	f000 fe8c 	bl	8005444 <_fflush_r>
 800472c:	68a1      	ldr	r1, [r4, #8]
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <cleanup_stdio+0x38>)
 8004730:	4299      	cmp	r1, r3
 8004732:	d002      	beq.n	800473a <cleanup_stdio+0x1e>
 8004734:	4620      	mov	r0, r4
 8004736:	f000 fe85 	bl	8005444 <_fflush_r>
 800473a:	68e1      	ldr	r1, [r4, #12]
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <cleanup_stdio+0x3c>)
 800473e:	4299      	cmp	r1, r3
 8004740:	d004      	beq.n	800474c <cleanup_stdio+0x30>
 8004742:	4620      	mov	r0, r4
 8004744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004748:	f000 be7c 	b.w	8005444 <_fflush_r>
 800474c:	bd10      	pop	{r4, pc}
 800474e:	bf00      	nop
 8004750:	2000025c 	.word	0x2000025c
 8004754:	200002c4 	.word	0x200002c4
 8004758:	2000032c 	.word	0x2000032c

0800475c <global_stdio_init.part.0>:
 800475c:	b510      	push	{r4, lr}
 800475e:	4b0b      	ldr	r3, [pc, #44]	; (800478c <global_stdio_init.part.0+0x30>)
 8004760:	4c0b      	ldr	r4, [pc, #44]	; (8004790 <global_stdio_init.part.0+0x34>)
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <global_stdio_init.part.0+0x38>)
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	4620      	mov	r0, r4
 8004768:	2200      	movs	r2, #0
 800476a:	2104      	movs	r1, #4
 800476c:	f7ff ff94 	bl	8004698 <std>
 8004770:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004774:	2201      	movs	r2, #1
 8004776:	2109      	movs	r1, #9
 8004778:	f7ff ff8e 	bl	8004698 <std>
 800477c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004780:	2202      	movs	r2, #2
 8004782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004786:	2112      	movs	r1, #18
 8004788:	f7ff bf86 	b.w	8004698 <std>
 800478c:	20000394 	.word	0x20000394
 8004790:	2000025c 	.word	0x2000025c
 8004794:	08004705 	.word	0x08004705

08004798 <__sfp_lock_acquire>:
 8004798:	4801      	ldr	r0, [pc, #4]	; (80047a0 <__sfp_lock_acquire+0x8>)
 800479a:	f000 b9fe 	b.w	8004b9a <__retarget_lock_acquire_recursive>
 800479e:	bf00      	nop
 80047a0:	2000039d 	.word	0x2000039d

080047a4 <__sfp_lock_release>:
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <__sfp_lock_release+0x8>)
 80047a6:	f000 b9f9 	b.w	8004b9c <__retarget_lock_release_recursive>
 80047aa:	bf00      	nop
 80047ac:	2000039d 	.word	0x2000039d

080047b0 <__sinit>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	4604      	mov	r4, r0
 80047b4:	f7ff fff0 	bl	8004798 <__sfp_lock_acquire>
 80047b8:	6a23      	ldr	r3, [r4, #32]
 80047ba:	b11b      	cbz	r3, 80047c4 <__sinit+0x14>
 80047bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c0:	f7ff bff0 	b.w	80047a4 <__sfp_lock_release>
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <__sinit+0x28>)
 80047c6:	6223      	str	r3, [r4, #32]
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <__sinit+0x2c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f5      	bne.n	80047bc <__sinit+0xc>
 80047d0:	f7ff ffc4 	bl	800475c <global_stdio_init.part.0>
 80047d4:	e7f2      	b.n	80047bc <__sinit+0xc>
 80047d6:	bf00      	nop
 80047d8:	0800471d 	.word	0x0800471d
 80047dc:	20000394 	.word	0x20000394

080047e0 <_fwalk_sglue>:
 80047e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e4:	4607      	mov	r7, r0
 80047e6:	4688      	mov	r8, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	2600      	movs	r6, #0
 80047ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047f0:	f1b9 0901 	subs.w	r9, r9, #1
 80047f4:	d505      	bpl.n	8004802 <_fwalk_sglue+0x22>
 80047f6:	6824      	ldr	r4, [r4, #0]
 80047f8:	2c00      	cmp	r4, #0
 80047fa:	d1f7      	bne.n	80047ec <_fwalk_sglue+0xc>
 80047fc:	4630      	mov	r0, r6
 80047fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d907      	bls.n	8004818 <_fwalk_sglue+0x38>
 8004808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800480c:	3301      	adds	r3, #1
 800480e:	d003      	beq.n	8004818 <_fwalk_sglue+0x38>
 8004810:	4629      	mov	r1, r5
 8004812:	4638      	mov	r0, r7
 8004814:	47c0      	blx	r8
 8004816:	4306      	orrs	r6, r0
 8004818:	3568      	adds	r5, #104	; 0x68
 800481a:	e7e9      	b.n	80047f0 <_fwalk_sglue+0x10>

0800481c <iprintf>:
 800481c:	b40f      	push	{r0, r1, r2, r3}
 800481e:	b507      	push	{r0, r1, r2, lr}
 8004820:	4906      	ldr	r1, [pc, #24]	; (800483c <iprintf+0x20>)
 8004822:	ab04      	add	r3, sp, #16
 8004824:	6808      	ldr	r0, [r1, #0]
 8004826:	f853 2b04 	ldr.w	r2, [r3], #4
 800482a:	6881      	ldr	r1, [r0, #8]
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	f000 fad9 	bl	8004de4 <_vfiprintf_r>
 8004832:	b003      	add	sp, #12
 8004834:	f85d eb04 	ldr.w	lr, [sp], #4
 8004838:	b004      	add	sp, #16
 800483a:	4770      	bx	lr
 800483c:	2000006c 	.word	0x2000006c

08004840 <_puts_r>:
 8004840:	6a03      	ldr	r3, [r0, #32]
 8004842:	b570      	push	{r4, r5, r6, lr}
 8004844:	6884      	ldr	r4, [r0, #8]
 8004846:	4605      	mov	r5, r0
 8004848:	460e      	mov	r6, r1
 800484a:	b90b      	cbnz	r3, 8004850 <_puts_r+0x10>
 800484c:	f7ff ffb0 	bl	80047b0 <__sinit>
 8004850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004852:	07db      	lsls	r3, r3, #31
 8004854:	d405      	bmi.n	8004862 <_puts_r+0x22>
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	0598      	lsls	r0, r3, #22
 800485a:	d402      	bmi.n	8004862 <_puts_r+0x22>
 800485c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800485e:	f000 f99c 	bl	8004b9a <__retarget_lock_acquire_recursive>
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	0719      	lsls	r1, r3, #28
 8004866:	d513      	bpl.n	8004890 <_puts_r+0x50>
 8004868:	6923      	ldr	r3, [r4, #16]
 800486a:	b18b      	cbz	r3, 8004890 <_puts_r+0x50>
 800486c:	3e01      	subs	r6, #1
 800486e:	68a3      	ldr	r3, [r4, #8]
 8004870:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004874:	3b01      	subs	r3, #1
 8004876:	60a3      	str	r3, [r4, #8]
 8004878:	b9e9      	cbnz	r1, 80048b6 <_puts_r+0x76>
 800487a:	2b00      	cmp	r3, #0
 800487c:	da2e      	bge.n	80048dc <_puts_r+0x9c>
 800487e:	4622      	mov	r2, r4
 8004880:	210a      	movs	r1, #10
 8004882:	4628      	mov	r0, r5
 8004884:	f000 f87b 	bl	800497e <__swbuf_r>
 8004888:	3001      	adds	r0, #1
 800488a:	d007      	beq.n	800489c <_puts_r+0x5c>
 800488c:	250a      	movs	r5, #10
 800488e:	e007      	b.n	80048a0 <_puts_r+0x60>
 8004890:	4621      	mov	r1, r4
 8004892:	4628      	mov	r0, r5
 8004894:	f000 f8b0 	bl	80049f8 <__swsetup_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	d0e7      	beq.n	800486c <_puts_r+0x2c>
 800489c:	f04f 35ff 	mov.w	r5, #4294967295
 80048a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048a2:	07da      	lsls	r2, r3, #31
 80048a4:	d405      	bmi.n	80048b2 <_puts_r+0x72>
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	059b      	lsls	r3, r3, #22
 80048aa:	d402      	bmi.n	80048b2 <_puts_r+0x72>
 80048ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ae:	f000 f975 	bl	8004b9c <__retarget_lock_release_recursive>
 80048b2:	4628      	mov	r0, r5
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da04      	bge.n	80048c4 <_puts_r+0x84>
 80048ba:	69a2      	ldr	r2, [r4, #24]
 80048bc:	429a      	cmp	r2, r3
 80048be:	dc06      	bgt.n	80048ce <_puts_r+0x8e>
 80048c0:	290a      	cmp	r1, #10
 80048c2:	d004      	beq.n	80048ce <_puts_r+0x8e>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	6022      	str	r2, [r4, #0]
 80048ca:	7019      	strb	r1, [r3, #0]
 80048cc:	e7cf      	b.n	800486e <_puts_r+0x2e>
 80048ce:	4622      	mov	r2, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 f854 	bl	800497e <__swbuf_r>
 80048d6:	3001      	adds	r0, #1
 80048d8:	d1c9      	bne.n	800486e <_puts_r+0x2e>
 80048da:	e7df      	b.n	800489c <_puts_r+0x5c>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	250a      	movs	r5, #10
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	6022      	str	r2, [r4, #0]
 80048e4:	701d      	strb	r5, [r3, #0]
 80048e6:	e7db      	b.n	80048a0 <_puts_r+0x60>

080048e8 <puts>:
 80048e8:	4b02      	ldr	r3, [pc, #8]	; (80048f4 <puts+0xc>)
 80048ea:	4601      	mov	r1, r0
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	f7ff bfa7 	b.w	8004840 <_puts_r>
 80048f2:	bf00      	nop
 80048f4:	2000006c 	.word	0x2000006c

080048f8 <__sread>:
 80048f8:	b510      	push	{r4, lr}
 80048fa:	460c      	mov	r4, r1
 80048fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004900:	f000 f8fc 	bl	8004afc <_read_r>
 8004904:	2800      	cmp	r0, #0
 8004906:	bfab      	itete	ge
 8004908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800490a:	89a3      	ldrhlt	r3, [r4, #12]
 800490c:	181b      	addge	r3, r3, r0
 800490e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004912:	bfac      	ite	ge
 8004914:	6563      	strge	r3, [r4, #84]	; 0x54
 8004916:	81a3      	strhlt	r3, [r4, #12]
 8004918:	bd10      	pop	{r4, pc}

0800491a <__swrite>:
 800491a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800491e:	461f      	mov	r7, r3
 8004920:	898b      	ldrh	r3, [r1, #12]
 8004922:	05db      	lsls	r3, r3, #23
 8004924:	4605      	mov	r5, r0
 8004926:	460c      	mov	r4, r1
 8004928:	4616      	mov	r6, r2
 800492a:	d505      	bpl.n	8004938 <__swrite+0x1e>
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	2302      	movs	r3, #2
 8004932:	2200      	movs	r2, #0
 8004934:	f000 f8d0 	bl	8004ad8 <_lseek_r>
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800493e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	4632      	mov	r2, r6
 8004946:	463b      	mov	r3, r7
 8004948:	4628      	mov	r0, r5
 800494a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800494e:	f000 b8e7 	b.w	8004b20 <_write_r>

08004952 <__sseek>:
 8004952:	b510      	push	{r4, lr}
 8004954:	460c      	mov	r4, r1
 8004956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495a:	f000 f8bd 	bl	8004ad8 <_lseek_r>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	bf15      	itete	ne
 8004964:	6560      	strne	r0, [r4, #84]	; 0x54
 8004966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800496a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800496e:	81a3      	strheq	r3, [r4, #12]
 8004970:	bf18      	it	ne
 8004972:	81a3      	strhne	r3, [r4, #12]
 8004974:	bd10      	pop	{r4, pc}

08004976 <__sclose>:
 8004976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800497a:	f000 b89d 	b.w	8004ab8 <_close_r>

0800497e <__swbuf_r>:
 800497e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004980:	460e      	mov	r6, r1
 8004982:	4614      	mov	r4, r2
 8004984:	4605      	mov	r5, r0
 8004986:	b118      	cbz	r0, 8004990 <__swbuf_r+0x12>
 8004988:	6a03      	ldr	r3, [r0, #32]
 800498a:	b90b      	cbnz	r3, 8004990 <__swbuf_r+0x12>
 800498c:	f7ff ff10 	bl	80047b0 <__sinit>
 8004990:	69a3      	ldr	r3, [r4, #24]
 8004992:	60a3      	str	r3, [r4, #8]
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	071a      	lsls	r2, r3, #28
 8004998:	d525      	bpl.n	80049e6 <__swbuf_r+0x68>
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	b31b      	cbz	r3, 80049e6 <__swbuf_r+0x68>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	6922      	ldr	r2, [r4, #16]
 80049a2:	1a98      	subs	r0, r3, r2
 80049a4:	6963      	ldr	r3, [r4, #20]
 80049a6:	b2f6      	uxtb	r6, r6
 80049a8:	4283      	cmp	r3, r0
 80049aa:	4637      	mov	r7, r6
 80049ac:	dc04      	bgt.n	80049b8 <__swbuf_r+0x3a>
 80049ae:	4621      	mov	r1, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 fd47 	bl	8005444 <_fflush_r>
 80049b6:	b9e0      	cbnz	r0, 80049f2 <__swbuf_r+0x74>
 80049b8:	68a3      	ldr	r3, [r4, #8]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	60a3      	str	r3, [r4, #8]
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	6022      	str	r2, [r4, #0]
 80049c4:	701e      	strb	r6, [r3, #0]
 80049c6:	6962      	ldr	r2, [r4, #20]
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d004      	beq.n	80049d8 <__swbuf_r+0x5a>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	07db      	lsls	r3, r3, #31
 80049d2:	d506      	bpl.n	80049e2 <__swbuf_r+0x64>
 80049d4:	2e0a      	cmp	r6, #10
 80049d6:	d104      	bne.n	80049e2 <__swbuf_r+0x64>
 80049d8:	4621      	mov	r1, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 fd32 	bl	8005444 <_fflush_r>
 80049e0:	b938      	cbnz	r0, 80049f2 <__swbuf_r+0x74>
 80049e2:	4638      	mov	r0, r7
 80049e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e6:	4621      	mov	r1, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 f805 	bl	80049f8 <__swsetup_r>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0d5      	beq.n	800499e <__swbuf_r+0x20>
 80049f2:	f04f 37ff 	mov.w	r7, #4294967295
 80049f6:	e7f4      	b.n	80049e2 <__swbuf_r+0x64>

080049f8 <__swsetup_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <__swsetup_r+0xac>)
 80049fc:	4605      	mov	r5, r0
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	460c      	mov	r4, r1
 8004a02:	b118      	cbz	r0, 8004a0c <__swsetup_r+0x14>
 8004a04:	6a03      	ldr	r3, [r0, #32]
 8004a06:	b90b      	cbnz	r3, 8004a0c <__swsetup_r+0x14>
 8004a08:	f7ff fed2 	bl	80047b0 <__sinit>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a12:	0718      	lsls	r0, r3, #28
 8004a14:	d422      	bmi.n	8004a5c <__swsetup_r+0x64>
 8004a16:	06d9      	lsls	r1, r3, #27
 8004a18:	d407      	bmi.n	8004a2a <__swsetup_r+0x32>
 8004a1a:	2309      	movs	r3, #9
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	e034      	b.n	8004a94 <__swsetup_r+0x9c>
 8004a2a:	0758      	lsls	r0, r3, #29
 8004a2c:	d512      	bpl.n	8004a54 <__swsetup_r+0x5c>
 8004a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a30:	b141      	cbz	r1, 8004a44 <__swsetup_r+0x4c>
 8004a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a36:	4299      	cmp	r1, r3
 8004a38:	d002      	beq.n	8004a40 <__swsetup_r+0x48>
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f000 f8b0 	bl	8004ba0 <_free_r>
 8004a40:	2300      	movs	r3, #0
 8004a42:	6363      	str	r3, [r4, #52]	; 0x34
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6063      	str	r3, [r4, #4]
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	f043 0308 	orr.w	r3, r3, #8
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	b94b      	cbnz	r3, 8004a74 <__swsetup_r+0x7c>
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6a:	d003      	beq.n	8004a74 <__swsetup_r+0x7c>
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 fd36 	bl	80054e0 <__smakebuf_r>
 8004a74:	89a0      	ldrh	r0, [r4, #12]
 8004a76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a7a:	f010 0301 	ands.w	r3, r0, #1
 8004a7e:	d00a      	beq.n	8004a96 <__swsetup_r+0x9e>
 8004a80:	2300      	movs	r3, #0
 8004a82:	60a3      	str	r3, [r4, #8]
 8004a84:	6963      	ldr	r3, [r4, #20]
 8004a86:	425b      	negs	r3, r3
 8004a88:	61a3      	str	r3, [r4, #24]
 8004a8a:	6923      	ldr	r3, [r4, #16]
 8004a8c:	b943      	cbnz	r3, 8004aa0 <__swsetup_r+0xa8>
 8004a8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a92:	d1c4      	bne.n	8004a1e <__swsetup_r+0x26>
 8004a94:	bd38      	pop	{r3, r4, r5, pc}
 8004a96:	0781      	lsls	r1, r0, #30
 8004a98:	bf58      	it	pl
 8004a9a:	6963      	ldrpl	r3, [r4, #20]
 8004a9c:	60a3      	str	r3, [r4, #8]
 8004a9e:	e7f4      	b.n	8004a8a <__swsetup_r+0x92>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e7f7      	b.n	8004a94 <__swsetup_r+0x9c>
 8004aa4:	2000006c 	.word	0x2000006c

08004aa8 <memset>:
 8004aa8:	4402      	add	r2, r0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d100      	bne.n	8004ab2 <memset+0xa>
 8004ab0:	4770      	bx	lr
 8004ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab6:	e7f9      	b.n	8004aac <memset+0x4>

08004ab8 <_close_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d06      	ldr	r5, [pc, #24]	; (8004ad4 <_close_r+0x1c>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	4604      	mov	r4, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	f7fc fc05 	bl	80012d2 <_close>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_close_r+0x1a>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_close_r+0x1a>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	20000398 	.word	0x20000398

08004ad8 <_lseek_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d07      	ldr	r5, [pc, #28]	; (8004af8 <_lseek_r+0x20>)
 8004adc:	4604      	mov	r4, r0
 8004ade:	4608      	mov	r0, r1
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	602a      	str	r2, [r5, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f7fc fc1a 	bl	8001320 <_lseek>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_lseek_r+0x1e>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_lseek_r+0x1e>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20000398 	.word	0x20000398

08004afc <_read_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4d07      	ldr	r5, [pc, #28]	; (8004b1c <_read_r+0x20>)
 8004b00:	4604      	mov	r4, r0
 8004b02:	4608      	mov	r0, r1
 8004b04:	4611      	mov	r1, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	602a      	str	r2, [r5, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f7fc fba8 	bl	8001260 <_read>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d102      	bne.n	8004b1a <_read_r+0x1e>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	b103      	cbz	r3, 8004b1a <_read_r+0x1e>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	20000398 	.word	0x20000398

08004b20 <_write_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d07      	ldr	r5, [pc, #28]	; (8004b40 <_write_r+0x20>)
 8004b24:	4604      	mov	r4, r0
 8004b26:	4608      	mov	r0, r1
 8004b28:	4611      	mov	r1, r2
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f7fc fbb3 	bl	800129a <_write>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_write_r+0x1e>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_write_r+0x1e>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	20000398 	.word	0x20000398

08004b44 <__errno>:
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <__errno+0x8>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	2000006c 	.word	0x2000006c

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4d0d      	ldr	r5, [pc, #52]	; (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4d0b      	ldr	r5, [pc, #44]	; (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <__libc_init_array+0x44>)
 8004b64:	f000 fd2a 	bl	80055bc <_init>
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	08005760 	.word	0x08005760
 8004b8c:	08005760 	.word	0x08005760
 8004b90:	08005760 	.word	0x08005760
 8004b94:	08005764 	.word	0x08005764

08004b98 <__retarget_lock_init_recursive>:
 8004b98:	4770      	bx	lr

08004b9a <__retarget_lock_acquire_recursive>:
 8004b9a:	4770      	bx	lr

08004b9c <__retarget_lock_release_recursive>:
 8004b9c:	4770      	bx	lr
	...

08004ba0 <_free_r>:
 8004ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	d044      	beq.n	8004c30 <_free_r+0x90>
 8004ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004baa:	9001      	str	r0, [sp, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f1a1 0404 	sub.w	r4, r1, #4
 8004bb2:	bfb8      	it	lt
 8004bb4:	18e4      	addlt	r4, r4, r3
 8004bb6:	f000 f8df 	bl	8004d78 <__malloc_lock>
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <_free_r+0x94>)
 8004bbc:	9801      	ldr	r0, [sp, #4]
 8004bbe:	6813      	ldr	r3, [r2, #0]
 8004bc0:	b933      	cbnz	r3, 8004bd0 <_free_r+0x30>
 8004bc2:	6063      	str	r3, [r4, #4]
 8004bc4:	6014      	str	r4, [r2, #0]
 8004bc6:	b003      	add	sp, #12
 8004bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bcc:	f000 b8da 	b.w	8004d84 <__malloc_unlock>
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d908      	bls.n	8004be6 <_free_r+0x46>
 8004bd4:	6825      	ldr	r5, [r4, #0]
 8004bd6:	1961      	adds	r1, r4, r5
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	bf01      	itttt	eq
 8004bdc:	6819      	ldreq	r1, [r3, #0]
 8004bde:	685b      	ldreq	r3, [r3, #4]
 8004be0:	1949      	addeq	r1, r1, r5
 8004be2:	6021      	streq	r1, [r4, #0]
 8004be4:	e7ed      	b.n	8004bc2 <_free_r+0x22>
 8004be6:	461a      	mov	r2, r3
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	b10b      	cbz	r3, 8004bf0 <_free_r+0x50>
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d9fa      	bls.n	8004be6 <_free_r+0x46>
 8004bf0:	6811      	ldr	r1, [r2, #0]
 8004bf2:	1855      	adds	r5, r2, r1
 8004bf4:	42a5      	cmp	r5, r4
 8004bf6:	d10b      	bne.n	8004c10 <_free_r+0x70>
 8004bf8:	6824      	ldr	r4, [r4, #0]
 8004bfa:	4421      	add	r1, r4
 8004bfc:	1854      	adds	r4, r2, r1
 8004bfe:	42a3      	cmp	r3, r4
 8004c00:	6011      	str	r1, [r2, #0]
 8004c02:	d1e0      	bne.n	8004bc6 <_free_r+0x26>
 8004c04:	681c      	ldr	r4, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	6053      	str	r3, [r2, #4]
 8004c0a:	440c      	add	r4, r1
 8004c0c:	6014      	str	r4, [r2, #0]
 8004c0e:	e7da      	b.n	8004bc6 <_free_r+0x26>
 8004c10:	d902      	bls.n	8004c18 <_free_r+0x78>
 8004c12:	230c      	movs	r3, #12
 8004c14:	6003      	str	r3, [r0, #0]
 8004c16:	e7d6      	b.n	8004bc6 <_free_r+0x26>
 8004c18:	6825      	ldr	r5, [r4, #0]
 8004c1a:	1961      	adds	r1, r4, r5
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	bf04      	itt	eq
 8004c20:	6819      	ldreq	r1, [r3, #0]
 8004c22:	685b      	ldreq	r3, [r3, #4]
 8004c24:	6063      	str	r3, [r4, #4]
 8004c26:	bf04      	itt	eq
 8004c28:	1949      	addeq	r1, r1, r5
 8004c2a:	6021      	streq	r1, [r4, #0]
 8004c2c:	6054      	str	r4, [r2, #4]
 8004c2e:	e7ca      	b.n	8004bc6 <_free_r+0x26>
 8004c30:	b003      	add	sp, #12
 8004c32:	bd30      	pop	{r4, r5, pc}
 8004c34:	200003a0 	.word	0x200003a0

08004c38 <sbrk_aligned>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	4e0e      	ldr	r6, [pc, #56]	; (8004c74 <sbrk_aligned+0x3c>)
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	6831      	ldr	r1, [r6, #0]
 8004c40:	4605      	mov	r5, r0
 8004c42:	b911      	cbnz	r1, 8004c4a <sbrk_aligned+0x12>
 8004c44:	f000 fcaa 	bl	800559c <_sbrk_r>
 8004c48:	6030      	str	r0, [r6, #0]
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 fca5 	bl	800559c <_sbrk_r>
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	d00a      	beq.n	8004c6c <sbrk_aligned+0x34>
 8004c56:	1cc4      	adds	r4, r0, #3
 8004c58:	f024 0403 	bic.w	r4, r4, #3
 8004c5c:	42a0      	cmp	r0, r4
 8004c5e:	d007      	beq.n	8004c70 <sbrk_aligned+0x38>
 8004c60:	1a21      	subs	r1, r4, r0
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 fc9a 	bl	800559c <_sbrk_r>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d101      	bne.n	8004c70 <sbrk_aligned+0x38>
 8004c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c70:	4620      	mov	r0, r4
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	200003a4 	.word	0x200003a4

08004c78 <_malloc_r>:
 8004c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c7c:	1ccd      	adds	r5, r1, #3
 8004c7e:	f025 0503 	bic.w	r5, r5, #3
 8004c82:	3508      	adds	r5, #8
 8004c84:	2d0c      	cmp	r5, #12
 8004c86:	bf38      	it	cc
 8004c88:	250c      	movcc	r5, #12
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	db01      	blt.n	8004c94 <_malloc_r+0x1c>
 8004c90:	42a9      	cmp	r1, r5
 8004c92:	d905      	bls.n	8004ca0 <_malloc_r+0x28>
 8004c94:	230c      	movs	r3, #12
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	2600      	movs	r6, #0
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ca0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d74 <_malloc_r+0xfc>
 8004ca4:	f000 f868 	bl	8004d78 <__malloc_lock>
 8004ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cac:	461c      	mov	r4, r3
 8004cae:	bb5c      	cbnz	r4, 8004d08 <_malloc_r+0x90>
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	f7ff ffc0 	bl	8004c38 <sbrk_aligned>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	4604      	mov	r4, r0
 8004cbc:	d155      	bne.n	8004d6a <_malloc_r+0xf2>
 8004cbe:	f8d8 4000 	ldr.w	r4, [r8]
 8004cc2:	4626      	mov	r6, r4
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	d145      	bne.n	8004d54 <_malloc_r+0xdc>
 8004cc8:	2c00      	cmp	r4, #0
 8004cca:	d048      	beq.n	8004d5e <_malloc_r+0xe6>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	eb04 0903 	add.w	r9, r4, r3
 8004cd6:	f000 fc61 	bl	800559c <_sbrk_r>
 8004cda:	4581      	cmp	r9, r0
 8004cdc:	d13f      	bne.n	8004d5e <_malloc_r+0xe6>
 8004cde:	6821      	ldr	r1, [r4, #0]
 8004ce0:	1a6d      	subs	r5, r5, r1
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f7ff ffa7 	bl	8004c38 <sbrk_aligned>
 8004cea:	3001      	adds	r0, #1
 8004cec:	d037      	beq.n	8004d5e <_malloc_r+0xe6>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	442b      	add	r3, r5
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d038      	beq.n	8004d6e <_malloc_r+0xf6>
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	42a2      	cmp	r2, r4
 8004d00:	d12b      	bne.n	8004d5a <_malloc_r+0xe2>
 8004d02:	2200      	movs	r2, #0
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	e00f      	b.n	8004d28 <_malloc_r+0xb0>
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	1b52      	subs	r2, r2, r5
 8004d0c:	d41f      	bmi.n	8004d4e <_malloc_r+0xd6>
 8004d0e:	2a0b      	cmp	r2, #11
 8004d10:	d917      	bls.n	8004d42 <_malloc_r+0xca>
 8004d12:	1961      	adds	r1, r4, r5
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	6025      	str	r5, [r4, #0]
 8004d18:	bf18      	it	ne
 8004d1a:	6059      	strne	r1, [r3, #4]
 8004d1c:	6863      	ldr	r3, [r4, #4]
 8004d1e:	bf08      	it	eq
 8004d20:	f8c8 1000 	streq.w	r1, [r8]
 8004d24:	5162      	str	r2, [r4, r5]
 8004d26:	604b      	str	r3, [r1, #4]
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f104 060b 	add.w	r6, r4, #11
 8004d2e:	f000 f829 	bl	8004d84 <__malloc_unlock>
 8004d32:	f026 0607 	bic.w	r6, r6, #7
 8004d36:	1d23      	adds	r3, r4, #4
 8004d38:	1af2      	subs	r2, r6, r3
 8004d3a:	d0ae      	beq.n	8004c9a <_malloc_r+0x22>
 8004d3c:	1b9b      	subs	r3, r3, r6
 8004d3e:	50a3      	str	r3, [r4, r2]
 8004d40:	e7ab      	b.n	8004c9a <_malloc_r+0x22>
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	6862      	ldr	r2, [r4, #4]
 8004d46:	d1dd      	bne.n	8004d04 <_malloc_r+0x8c>
 8004d48:	f8c8 2000 	str.w	r2, [r8]
 8004d4c:	e7ec      	b.n	8004d28 <_malloc_r+0xb0>
 8004d4e:	4623      	mov	r3, r4
 8004d50:	6864      	ldr	r4, [r4, #4]
 8004d52:	e7ac      	b.n	8004cae <_malloc_r+0x36>
 8004d54:	4634      	mov	r4, r6
 8004d56:	6876      	ldr	r6, [r6, #4]
 8004d58:	e7b4      	b.n	8004cc4 <_malloc_r+0x4c>
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	e7cc      	b.n	8004cf8 <_malloc_r+0x80>
 8004d5e:	230c      	movs	r3, #12
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	4638      	mov	r0, r7
 8004d64:	f000 f80e 	bl	8004d84 <__malloc_unlock>
 8004d68:	e797      	b.n	8004c9a <_malloc_r+0x22>
 8004d6a:	6025      	str	r5, [r4, #0]
 8004d6c:	e7dc      	b.n	8004d28 <_malloc_r+0xb0>
 8004d6e:	605b      	str	r3, [r3, #4]
 8004d70:	deff      	udf	#255	; 0xff
 8004d72:	bf00      	nop
 8004d74:	200003a0 	.word	0x200003a0

08004d78 <__malloc_lock>:
 8004d78:	4801      	ldr	r0, [pc, #4]	; (8004d80 <__malloc_lock+0x8>)
 8004d7a:	f7ff bf0e 	b.w	8004b9a <__retarget_lock_acquire_recursive>
 8004d7e:	bf00      	nop
 8004d80:	2000039c 	.word	0x2000039c

08004d84 <__malloc_unlock>:
 8004d84:	4801      	ldr	r0, [pc, #4]	; (8004d8c <__malloc_unlock+0x8>)
 8004d86:	f7ff bf09 	b.w	8004b9c <__retarget_lock_release_recursive>
 8004d8a:	bf00      	nop
 8004d8c:	2000039c 	.word	0x2000039c

08004d90 <__sfputc_r>:
 8004d90:	6893      	ldr	r3, [r2, #8]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	b410      	push	{r4}
 8004d98:	6093      	str	r3, [r2, #8]
 8004d9a:	da08      	bge.n	8004dae <__sfputc_r+0x1e>
 8004d9c:	6994      	ldr	r4, [r2, #24]
 8004d9e:	42a3      	cmp	r3, r4
 8004da0:	db01      	blt.n	8004da6 <__sfputc_r+0x16>
 8004da2:	290a      	cmp	r1, #10
 8004da4:	d103      	bne.n	8004dae <__sfputc_r+0x1e>
 8004da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004daa:	f7ff bde8 	b.w	800497e <__swbuf_r>
 8004dae:	6813      	ldr	r3, [r2, #0]
 8004db0:	1c58      	adds	r0, r3, #1
 8004db2:	6010      	str	r0, [r2, #0]
 8004db4:	7019      	strb	r1, [r3, #0]
 8004db6:	4608      	mov	r0, r1
 8004db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <__sfputs_r>:
 8004dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc0:	4606      	mov	r6, r0
 8004dc2:	460f      	mov	r7, r1
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	18d5      	adds	r5, r2, r3
 8004dc8:	42ac      	cmp	r4, r5
 8004dca:	d101      	bne.n	8004dd0 <__sfputs_r+0x12>
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e007      	b.n	8004de0 <__sfputs_r+0x22>
 8004dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd4:	463a      	mov	r2, r7
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f7ff ffda 	bl	8004d90 <__sfputc_r>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d1f3      	bne.n	8004dc8 <__sfputs_r+0xa>
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004de4 <_vfiprintf_r>:
 8004de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	460d      	mov	r5, r1
 8004dea:	b09d      	sub	sp, #116	; 0x74
 8004dec:	4614      	mov	r4, r2
 8004dee:	4698      	mov	r8, r3
 8004df0:	4606      	mov	r6, r0
 8004df2:	b118      	cbz	r0, 8004dfc <_vfiprintf_r+0x18>
 8004df4:	6a03      	ldr	r3, [r0, #32]
 8004df6:	b90b      	cbnz	r3, 8004dfc <_vfiprintf_r+0x18>
 8004df8:	f7ff fcda 	bl	80047b0 <__sinit>
 8004dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dfe:	07d9      	lsls	r1, r3, #31
 8004e00:	d405      	bmi.n	8004e0e <_vfiprintf_r+0x2a>
 8004e02:	89ab      	ldrh	r3, [r5, #12]
 8004e04:	059a      	lsls	r2, r3, #22
 8004e06:	d402      	bmi.n	8004e0e <_vfiprintf_r+0x2a>
 8004e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e0a:	f7ff fec6 	bl	8004b9a <__retarget_lock_acquire_recursive>
 8004e0e:	89ab      	ldrh	r3, [r5, #12]
 8004e10:	071b      	lsls	r3, r3, #28
 8004e12:	d501      	bpl.n	8004e18 <_vfiprintf_r+0x34>
 8004e14:	692b      	ldr	r3, [r5, #16]
 8004e16:	b99b      	cbnz	r3, 8004e40 <_vfiprintf_r+0x5c>
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f7ff fdec 	bl	80049f8 <__swsetup_r>
 8004e20:	b170      	cbz	r0, 8004e40 <_vfiprintf_r+0x5c>
 8004e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e24:	07dc      	lsls	r4, r3, #31
 8004e26:	d504      	bpl.n	8004e32 <_vfiprintf_r+0x4e>
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	b01d      	add	sp, #116	; 0x74
 8004e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e32:	89ab      	ldrh	r3, [r5, #12]
 8004e34:	0598      	lsls	r0, r3, #22
 8004e36:	d4f7      	bmi.n	8004e28 <_vfiprintf_r+0x44>
 8004e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e3a:	f7ff feaf 	bl	8004b9c <__retarget_lock_release_recursive>
 8004e3e:	e7f3      	b.n	8004e28 <_vfiprintf_r+0x44>
 8004e40:	2300      	movs	r3, #0
 8004e42:	9309      	str	r3, [sp, #36]	; 0x24
 8004e44:	2320      	movs	r3, #32
 8004e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e4e:	2330      	movs	r3, #48	; 0x30
 8004e50:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005004 <_vfiprintf_r+0x220>
 8004e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e58:	f04f 0901 	mov.w	r9, #1
 8004e5c:	4623      	mov	r3, r4
 8004e5e:	469a      	mov	sl, r3
 8004e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e64:	b10a      	cbz	r2, 8004e6a <_vfiprintf_r+0x86>
 8004e66:	2a25      	cmp	r2, #37	; 0x25
 8004e68:	d1f9      	bne.n	8004e5e <_vfiprintf_r+0x7a>
 8004e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e6e:	d00b      	beq.n	8004e88 <_vfiprintf_r+0xa4>
 8004e70:	465b      	mov	r3, fp
 8004e72:	4622      	mov	r2, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	4630      	mov	r0, r6
 8004e78:	f7ff ffa1 	bl	8004dbe <__sfputs_r>
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f000 80a9 	beq.w	8004fd4 <_vfiprintf_r+0x1f0>
 8004e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e84:	445a      	add	r2, fp
 8004e86:	9209      	str	r2, [sp, #36]	; 0x24
 8004e88:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80a1 	beq.w	8004fd4 <_vfiprintf_r+0x1f0>
 8004e92:	2300      	movs	r3, #0
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295
 8004e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e9c:	f10a 0a01 	add.w	sl, sl, #1
 8004ea0:	9304      	str	r3, [sp, #16]
 8004ea2:	9307      	str	r3, [sp, #28]
 8004ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8004eaa:	4654      	mov	r4, sl
 8004eac:	2205      	movs	r2, #5
 8004eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb2:	4854      	ldr	r0, [pc, #336]	; (8005004 <_vfiprintf_r+0x220>)
 8004eb4:	f7fb f994 	bl	80001e0 <memchr>
 8004eb8:	9a04      	ldr	r2, [sp, #16]
 8004eba:	b9d8      	cbnz	r0, 8004ef4 <_vfiprintf_r+0x110>
 8004ebc:	06d1      	lsls	r1, r2, #27
 8004ebe:	bf44      	itt	mi
 8004ec0:	2320      	movmi	r3, #32
 8004ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec6:	0713      	lsls	r3, r2, #28
 8004ec8:	bf44      	itt	mi
 8004eca:	232b      	movmi	r3, #43	; 0x2b
 8004ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed6:	d015      	beq.n	8004f04 <_vfiprintf_r+0x120>
 8004ed8:	9a07      	ldr	r2, [sp, #28]
 8004eda:	4654      	mov	r4, sl
 8004edc:	2000      	movs	r0, #0
 8004ede:	f04f 0c0a 	mov.w	ip, #10
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee8:	3b30      	subs	r3, #48	; 0x30
 8004eea:	2b09      	cmp	r3, #9
 8004eec:	d94d      	bls.n	8004f8a <_vfiprintf_r+0x1a6>
 8004eee:	b1b0      	cbz	r0, 8004f1e <_vfiprintf_r+0x13a>
 8004ef0:	9207      	str	r2, [sp, #28]
 8004ef2:	e014      	b.n	8004f1e <_vfiprintf_r+0x13a>
 8004ef4:	eba0 0308 	sub.w	r3, r0, r8
 8004ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8004efc:	4313      	orrs	r3, r2
 8004efe:	9304      	str	r3, [sp, #16]
 8004f00:	46a2      	mov	sl, r4
 8004f02:	e7d2      	b.n	8004eaa <_vfiprintf_r+0xc6>
 8004f04:	9b03      	ldr	r3, [sp, #12]
 8004f06:	1d19      	adds	r1, r3, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	9103      	str	r1, [sp, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bfbb      	ittet	lt
 8004f10:	425b      	neglt	r3, r3
 8004f12:	f042 0202 	orrlt.w	r2, r2, #2
 8004f16:	9307      	strge	r3, [sp, #28]
 8004f18:	9307      	strlt	r3, [sp, #28]
 8004f1a:	bfb8      	it	lt
 8004f1c:	9204      	strlt	r2, [sp, #16]
 8004f1e:	7823      	ldrb	r3, [r4, #0]
 8004f20:	2b2e      	cmp	r3, #46	; 0x2e
 8004f22:	d10c      	bne.n	8004f3e <_vfiprintf_r+0x15a>
 8004f24:	7863      	ldrb	r3, [r4, #1]
 8004f26:	2b2a      	cmp	r3, #42	; 0x2a
 8004f28:	d134      	bne.n	8004f94 <_vfiprintf_r+0x1b0>
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	1d1a      	adds	r2, r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	9203      	str	r2, [sp, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bfb8      	it	lt
 8004f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f3a:	3402      	adds	r4, #2
 8004f3c:	9305      	str	r3, [sp, #20]
 8004f3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005014 <_vfiprintf_r+0x230>
 8004f42:	7821      	ldrb	r1, [r4, #0]
 8004f44:	2203      	movs	r2, #3
 8004f46:	4650      	mov	r0, sl
 8004f48:	f7fb f94a 	bl	80001e0 <memchr>
 8004f4c:	b138      	cbz	r0, 8004f5e <_vfiprintf_r+0x17a>
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	eba0 000a 	sub.w	r0, r0, sl
 8004f54:	2240      	movs	r2, #64	; 0x40
 8004f56:	4082      	lsls	r2, r0
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	3401      	adds	r4, #1
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f62:	4829      	ldr	r0, [pc, #164]	; (8005008 <_vfiprintf_r+0x224>)
 8004f64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f68:	2206      	movs	r2, #6
 8004f6a:	f7fb f939 	bl	80001e0 <memchr>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	d03f      	beq.n	8004ff2 <_vfiprintf_r+0x20e>
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <_vfiprintf_r+0x228>)
 8004f74:	bb1b      	cbnz	r3, 8004fbe <_vfiprintf_r+0x1da>
 8004f76:	9b03      	ldr	r3, [sp, #12]
 8004f78:	3307      	adds	r3, #7
 8004f7a:	f023 0307 	bic.w	r3, r3, #7
 8004f7e:	3308      	adds	r3, #8
 8004f80:	9303      	str	r3, [sp, #12]
 8004f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f84:	443b      	add	r3, r7
 8004f86:	9309      	str	r3, [sp, #36]	; 0x24
 8004f88:	e768      	b.n	8004e5c <_vfiprintf_r+0x78>
 8004f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f8e:	460c      	mov	r4, r1
 8004f90:	2001      	movs	r0, #1
 8004f92:	e7a6      	b.n	8004ee2 <_vfiprintf_r+0xfe>
 8004f94:	2300      	movs	r3, #0
 8004f96:	3401      	adds	r4, #1
 8004f98:	9305      	str	r3, [sp, #20]
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f04f 0c0a 	mov.w	ip, #10
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa6:	3a30      	subs	r2, #48	; 0x30
 8004fa8:	2a09      	cmp	r2, #9
 8004faa:	d903      	bls.n	8004fb4 <_vfiprintf_r+0x1d0>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0c6      	beq.n	8004f3e <_vfiprintf_r+0x15a>
 8004fb0:	9105      	str	r1, [sp, #20]
 8004fb2:	e7c4      	b.n	8004f3e <_vfiprintf_r+0x15a>
 8004fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb8:	4604      	mov	r4, r0
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e7f0      	b.n	8004fa0 <_vfiprintf_r+0x1bc>
 8004fbe:	ab03      	add	r3, sp, #12
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	462a      	mov	r2, r5
 8004fc4:	4b12      	ldr	r3, [pc, #72]	; (8005010 <_vfiprintf_r+0x22c>)
 8004fc6:	a904      	add	r1, sp, #16
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f3af 8000 	nop.w
 8004fce:	4607      	mov	r7, r0
 8004fd0:	1c78      	adds	r0, r7, #1
 8004fd2:	d1d6      	bne.n	8004f82 <_vfiprintf_r+0x19e>
 8004fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fd6:	07d9      	lsls	r1, r3, #31
 8004fd8:	d405      	bmi.n	8004fe6 <_vfiprintf_r+0x202>
 8004fda:	89ab      	ldrh	r3, [r5, #12]
 8004fdc:	059a      	lsls	r2, r3, #22
 8004fde:	d402      	bmi.n	8004fe6 <_vfiprintf_r+0x202>
 8004fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fe2:	f7ff fddb 	bl	8004b9c <__retarget_lock_release_recursive>
 8004fe6:	89ab      	ldrh	r3, [r5, #12]
 8004fe8:	065b      	lsls	r3, r3, #25
 8004fea:	f53f af1d 	bmi.w	8004e28 <_vfiprintf_r+0x44>
 8004fee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ff0:	e71c      	b.n	8004e2c <_vfiprintf_r+0x48>
 8004ff2:	ab03      	add	r3, sp, #12
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	462a      	mov	r2, r5
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <_vfiprintf_r+0x22c>)
 8004ffa:	a904      	add	r1, sp, #16
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f000 f879 	bl	80050f4 <_printf_i>
 8005002:	e7e4      	b.n	8004fce <_vfiprintf_r+0x1ea>
 8005004:	08005725 	.word	0x08005725
 8005008:	0800572f 	.word	0x0800572f
 800500c:	00000000 	.word	0x00000000
 8005010:	08004dbf 	.word	0x08004dbf
 8005014:	0800572b 	.word	0x0800572b

08005018 <_printf_common>:
 8005018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	4616      	mov	r6, r2
 800501e:	4699      	mov	r9, r3
 8005020:	688a      	ldr	r2, [r1, #8]
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005028:	4293      	cmp	r3, r2
 800502a:	bfb8      	it	lt
 800502c:	4613      	movlt	r3, r2
 800502e:	6033      	str	r3, [r6, #0]
 8005030:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005034:	4607      	mov	r7, r0
 8005036:	460c      	mov	r4, r1
 8005038:	b10a      	cbz	r2, 800503e <_printf_common+0x26>
 800503a:	3301      	adds	r3, #1
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	0699      	lsls	r1, r3, #26
 8005042:	bf42      	ittt	mi
 8005044:	6833      	ldrmi	r3, [r6, #0]
 8005046:	3302      	addmi	r3, #2
 8005048:	6033      	strmi	r3, [r6, #0]
 800504a:	6825      	ldr	r5, [r4, #0]
 800504c:	f015 0506 	ands.w	r5, r5, #6
 8005050:	d106      	bne.n	8005060 <_printf_common+0x48>
 8005052:	f104 0a19 	add.w	sl, r4, #25
 8005056:	68e3      	ldr	r3, [r4, #12]
 8005058:	6832      	ldr	r2, [r6, #0]
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	42ab      	cmp	r3, r5
 800505e:	dc26      	bgt.n	80050ae <_printf_common+0x96>
 8005060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005064:	1e13      	subs	r3, r2, #0
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	bf18      	it	ne
 800506a:	2301      	movne	r3, #1
 800506c:	0692      	lsls	r2, r2, #26
 800506e:	d42b      	bmi.n	80050c8 <_printf_common+0xb0>
 8005070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005074:	4649      	mov	r1, r9
 8005076:	4638      	mov	r0, r7
 8005078:	47c0      	blx	r8
 800507a:	3001      	adds	r0, #1
 800507c:	d01e      	beq.n	80050bc <_printf_common+0xa4>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	f003 0306 	and.w	r3, r3, #6
 8005086:	2b04      	cmp	r3, #4
 8005088:	bf02      	ittt	eq
 800508a:	68e5      	ldreq	r5, [r4, #12]
 800508c:	6833      	ldreq	r3, [r6, #0]
 800508e:	1aed      	subeq	r5, r5, r3
 8005090:	68a3      	ldr	r3, [r4, #8]
 8005092:	bf0c      	ite	eq
 8005094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005098:	2500      	movne	r5, #0
 800509a:	4293      	cmp	r3, r2
 800509c:	bfc4      	itt	gt
 800509e:	1a9b      	subgt	r3, r3, r2
 80050a0:	18ed      	addgt	r5, r5, r3
 80050a2:	2600      	movs	r6, #0
 80050a4:	341a      	adds	r4, #26
 80050a6:	42b5      	cmp	r5, r6
 80050a8:	d11a      	bne.n	80050e0 <_printf_common+0xc8>
 80050aa:	2000      	movs	r0, #0
 80050ac:	e008      	b.n	80050c0 <_printf_common+0xa8>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4652      	mov	r2, sl
 80050b2:	4649      	mov	r1, r9
 80050b4:	4638      	mov	r0, r7
 80050b6:	47c0      	blx	r8
 80050b8:	3001      	adds	r0, #1
 80050ba:	d103      	bne.n	80050c4 <_printf_common+0xac>
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	3501      	adds	r5, #1
 80050c6:	e7c6      	b.n	8005056 <_printf_common+0x3e>
 80050c8:	18e1      	adds	r1, r4, r3
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	2030      	movs	r0, #48	; 0x30
 80050ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050d2:	4422      	add	r2, r4
 80050d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050dc:	3302      	adds	r3, #2
 80050de:	e7c7      	b.n	8005070 <_printf_common+0x58>
 80050e0:	2301      	movs	r3, #1
 80050e2:	4622      	mov	r2, r4
 80050e4:	4649      	mov	r1, r9
 80050e6:	4638      	mov	r0, r7
 80050e8:	47c0      	blx	r8
 80050ea:	3001      	adds	r0, #1
 80050ec:	d0e6      	beq.n	80050bc <_printf_common+0xa4>
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7d9      	b.n	80050a6 <_printf_common+0x8e>
	...

080050f4 <_printf_i>:
 80050f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	7e0f      	ldrb	r7, [r1, #24]
 80050fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050fc:	2f78      	cmp	r7, #120	; 0x78
 80050fe:	4691      	mov	r9, r2
 8005100:	4680      	mov	r8, r0
 8005102:	460c      	mov	r4, r1
 8005104:	469a      	mov	sl, r3
 8005106:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800510a:	d807      	bhi.n	800511c <_printf_i+0x28>
 800510c:	2f62      	cmp	r7, #98	; 0x62
 800510e:	d80a      	bhi.n	8005126 <_printf_i+0x32>
 8005110:	2f00      	cmp	r7, #0
 8005112:	f000 80d4 	beq.w	80052be <_printf_i+0x1ca>
 8005116:	2f58      	cmp	r7, #88	; 0x58
 8005118:	f000 80c0 	beq.w	800529c <_printf_i+0x1a8>
 800511c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005124:	e03a      	b.n	800519c <_printf_i+0xa8>
 8005126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800512a:	2b15      	cmp	r3, #21
 800512c:	d8f6      	bhi.n	800511c <_printf_i+0x28>
 800512e:	a101      	add	r1, pc, #4	; (adr r1, 8005134 <_printf_i+0x40>)
 8005130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005134:	0800518d 	.word	0x0800518d
 8005138:	080051a1 	.word	0x080051a1
 800513c:	0800511d 	.word	0x0800511d
 8005140:	0800511d 	.word	0x0800511d
 8005144:	0800511d 	.word	0x0800511d
 8005148:	0800511d 	.word	0x0800511d
 800514c:	080051a1 	.word	0x080051a1
 8005150:	0800511d 	.word	0x0800511d
 8005154:	0800511d 	.word	0x0800511d
 8005158:	0800511d 	.word	0x0800511d
 800515c:	0800511d 	.word	0x0800511d
 8005160:	080052a5 	.word	0x080052a5
 8005164:	080051cd 	.word	0x080051cd
 8005168:	0800525f 	.word	0x0800525f
 800516c:	0800511d 	.word	0x0800511d
 8005170:	0800511d 	.word	0x0800511d
 8005174:	080052c7 	.word	0x080052c7
 8005178:	0800511d 	.word	0x0800511d
 800517c:	080051cd 	.word	0x080051cd
 8005180:	0800511d 	.word	0x0800511d
 8005184:	0800511d 	.word	0x0800511d
 8005188:	08005267 	.word	0x08005267
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	1d1a      	adds	r2, r3, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800519c:	2301      	movs	r3, #1
 800519e:	e09f      	b.n	80052e0 <_printf_i+0x1ec>
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	682b      	ldr	r3, [r5, #0]
 80051a4:	0607      	lsls	r7, r0, #24
 80051a6:	f103 0104 	add.w	r1, r3, #4
 80051aa:	6029      	str	r1, [r5, #0]
 80051ac:	d501      	bpl.n	80051b2 <_printf_i+0xbe>
 80051ae:	681e      	ldr	r6, [r3, #0]
 80051b0:	e003      	b.n	80051ba <_printf_i+0xc6>
 80051b2:	0646      	lsls	r6, r0, #25
 80051b4:	d5fb      	bpl.n	80051ae <_printf_i+0xba>
 80051b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	da03      	bge.n	80051c6 <_printf_i+0xd2>
 80051be:	232d      	movs	r3, #45	; 0x2d
 80051c0:	4276      	negs	r6, r6
 80051c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c6:	485a      	ldr	r0, [pc, #360]	; (8005330 <_printf_i+0x23c>)
 80051c8:	230a      	movs	r3, #10
 80051ca:	e012      	b.n	80051f2 <_printf_i+0xfe>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	1d19      	adds	r1, r3, #4
 80051d2:	6029      	str	r1, [r5, #0]
 80051d4:	0605      	lsls	r5, r0, #24
 80051d6:	d501      	bpl.n	80051dc <_printf_i+0xe8>
 80051d8:	681e      	ldr	r6, [r3, #0]
 80051da:	e002      	b.n	80051e2 <_printf_i+0xee>
 80051dc:	0641      	lsls	r1, r0, #25
 80051de:	d5fb      	bpl.n	80051d8 <_printf_i+0xe4>
 80051e0:	881e      	ldrh	r6, [r3, #0]
 80051e2:	4853      	ldr	r0, [pc, #332]	; (8005330 <_printf_i+0x23c>)
 80051e4:	2f6f      	cmp	r7, #111	; 0x6f
 80051e6:	bf0c      	ite	eq
 80051e8:	2308      	moveq	r3, #8
 80051ea:	230a      	movne	r3, #10
 80051ec:	2100      	movs	r1, #0
 80051ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051f2:	6865      	ldr	r5, [r4, #4]
 80051f4:	60a5      	str	r5, [r4, #8]
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	bfa2      	ittt	ge
 80051fa:	6821      	ldrge	r1, [r4, #0]
 80051fc:	f021 0104 	bicge.w	r1, r1, #4
 8005200:	6021      	strge	r1, [r4, #0]
 8005202:	b90e      	cbnz	r6, 8005208 <_printf_i+0x114>
 8005204:	2d00      	cmp	r5, #0
 8005206:	d04b      	beq.n	80052a0 <_printf_i+0x1ac>
 8005208:	4615      	mov	r5, r2
 800520a:	fbb6 f1f3 	udiv	r1, r6, r3
 800520e:	fb03 6711 	mls	r7, r3, r1, r6
 8005212:	5dc7      	ldrb	r7, [r0, r7]
 8005214:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005218:	4637      	mov	r7, r6
 800521a:	42bb      	cmp	r3, r7
 800521c:	460e      	mov	r6, r1
 800521e:	d9f4      	bls.n	800520a <_printf_i+0x116>
 8005220:	2b08      	cmp	r3, #8
 8005222:	d10b      	bne.n	800523c <_printf_i+0x148>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	07de      	lsls	r6, r3, #31
 8005228:	d508      	bpl.n	800523c <_printf_i+0x148>
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	6861      	ldr	r1, [r4, #4]
 800522e:	4299      	cmp	r1, r3
 8005230:	bfde      	ittt	le
 8005232:	2330      	movle	r3, #48	; 0x30
 8005234:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005238:	f105 35ff 	addle.w	r5, r5, #4294967295
 800523c:	1b52      	subs	r2, r2, r5
 800523e:	6122      	str	r2, [r4, #16]
 8005240:	f8cd a000 	str.w	sl, [sp]
 8005244:	464b      	mov	r3, r9
 8005246:	aa03      	add	r2, sp, #12
 8005248:	4621      	mov	r1, r4
 800524a:	4640      	mov	r0, r8
 800524c:	f7ff fee4 	bl	8005018 <_printf_common>
 8005250:	3001      	adds	r0, #1
 8005252:	d14a      	bne.n	80052ea <_printf_i+0x1f6>
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	b004      	add	sp, #16
 800525a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	f043 0320 	orr.w	r3, r3, #32
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	4833      	ldr	r0, [pc, #204]	; (8005334 <_printf_i+0x240>)
 8005268:	2778      	movs	r7, #120	; 0x78
 800526a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	6829      	ldr	r1, [r5, #0]
 8005272:	061f      	lsls	r7, r3, #24
 8005274:	f851 6b04 	ldr.w	r6, [r1], #4
 8005278:	d402      	bmi.n	8005280 <_printf_i+0x18c>
 800527a:	065f      	lsls	r7, r3, #25
 800527c:	bf48      	it	mi
 800527e:	b2b6      	uxthmi	r6, r6
 8005280:	07df      	lsls	r7, r3, #31
 8005282:	bf48      	it	mi
 8005284:	f043 0320 	orrmi.w	r3, r3, #32
 8005288:	6029      	str	r1, [r5, #0]
 800528a:	bf48      	it	mi
 800528c:	6023      	strmi	r3, [r4, #0]
 800528e:	b91e      	cbnz	r6, 8005298 <_printf_i+0x1a4>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	f023 0320 	bic.w	r3, r3, #32
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	2310      	movs	r3, #16
 800529a:	e7a7      	b.n	80051ec <_printf_i+0xf8>
 800529c:	4824      	ldr	r0, [pc, #144]	; (8005330 <_printf_i+0x23c>)
 800529e:	e7e4      	b.n	800526a <_printf_i+0x176>
 80052a0:	4615      	mov	r5, r2
 80052a2:	e7bd      	b.n	8005220 <_printf_i+0x12c>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	6826      	ldr	r6, [r4, #0]
 80052a8:	6961      	ldr	r1, [r4, #20]
 80052aa:	1d18      	adds	r0, r3, #4
 80052ac:	6028      	str	r0, [r5, #0]
 80052ae:	0635      	lsls	r5, r6, #24
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	d501      	bpl.n	80052b8 <_printf_i+0x1c4>
 80052b4:	6019      	str	r1, [r3, #0]
 80052b6:	e002      	b.n	80052be <_printf_i+0x1ca>
 80052b8:	0670      	lsls	r0, r6, #25
 80052ba:	d5fb      	bpl.n	80052b4 <_printf_i+0x1c0>
 80052bc:	8019      	strh	r1, [r3, #0]
 80052be:	2300      	movs	r3, #0
 80052c0:	6123      	str	r3, [r4, #16]
 80052c2:	4615      	mov	r5, r2
 80052c4:	e7bc      	b.n	8005240 <_printf_i+0x14c>
 80052c6:	682b      	ldr	r3, [r5, #0]
 80052c8:	1d1a      	adds	r2, r3, #4
 80052ca:	602a      	str	r2, [r5, #0]
 80052cc:	681d      	ldr	r5, [r3, #0]
 80052ce:	6862      	ldr	r2, [r4, #4]
 80052d0:	2100      	movs	r1, #0
 80052d2:	4628      	mov	r0, r5
 80052d4:	f7fa ff84 	bl	80001e0 <memchr>
 80052d8:	b108      	cbz	r0, 80052de <_printf_i+0x1ea>
 80052da:	1b40      	subs	r0, r0, r5
 80052dc:	6060      	str	r0, [r4, #4]
 80052de:	6863      	ldr	r3, [r4, #4]
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	2300      	movs	r3, #0
 80052e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e8:	e7aa      	b.n	8005240 <_printf_i+0x14c>
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	462a      	mov	r2, r5
 80052ee:	4649      	mov	r1, r9
 80052f0:	4640      	mov	r0, r8
 80052f2:	47d0      	blx	sl
 80052f4:	3001      	adds	r0, #1
 80052f6:	d0ad      	beq.n	8005254 <_printf_i+0x160>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	079b      	lsls	r3, r3, #30
 80052fc:	d413      	bmi.n	8005326 <_printf_i+0x232>
 80052fe:	68e0      	ldr	r0, [r4, #12]
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	4298      	cmp	r0, r3
 8005304:	bfb8      	it	lt
 8005306:	4618      	movlt	r0, r3
 8005308:	e7a6      	b.n	8005258 <_printf_i+0x164>
 800530a:	2301      	movs	r3, #1
 800530c:	4632      	mov	r2, r6
 800530e:	4649      	mov	r1, r9
 8005310:	4640      	mov	r0, r8
 8005312:	47d0      	blx	sl
 8005314:	3001      	adds	r0, #1
 8005316:	d09d      	beq.n	8005254 <_printf_i+0x160>
 8005318:	3501      	adds	r5, #1
 800531a:	68e3      	ldr	r3, [r4, #12]
 800531c:	9903      	ldr	r1, [sp, #12]
 800531e:	1a5b      	subs	r3, r3, r1
 8005320:	42ab      	cmp	r3, r5
 8005322:	dcf2      	bgt.n	800530a <_printf_i+0x216>
 8005324:	e7eb      	b.n	80052fe <_printf_i+0x20a>
 8005326:	2500      	movs	r5, #0
 8005328:	f104 0619 	add.w	r6, r4, #25
 800532c:	e7f5      	b.n	800531a <_printf_i+0x226>
 800532e:	bf00      	nop
 8005330:	08005736 	.word	0x08005736
 8005334:	08005747 	.word	0x08005747

08005338 <__sflush_r>:
 8005338:	898a      	ldrh	r2, [r1, #12]
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	4605      	mov	r5, r0
 8005340:	0710      	lsls	r0, r2, #28
 8005342:	460c      	mov	r4, r1
 8005344:	d458      	bmi.n	80053f8 <__sflush_r+0xc0>
 8005346:	684b      	ldr	r3, [r1, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	dc05      	bgt.n	8005358 <__sflush_r+0x20>
 800534c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	dc02      	bgt.n	8005358 <__sflush_r+0x20>
 8005352:	2000      	movs	r0, #0
 8005354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800535a:	2e00      	cmp	r6, #0
 800535c:	d0f9      	beq.n	8005352 <__sflush_r+0x1a>
 800535e:	2300      	movs	r3, #0
 8005360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005364:	682f      	ldr	r7, [r5, #0]
 8005366:	6a21      	ldr	r1, [r4, #32]
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	d032      	beq.n	80053d2 <__sflush_r+0x9a>
 800536c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	075a      	lsls	r2, r3, #29
 8005372:	d505      	bpl.n	8005380 <__sflush_r+0x48>
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	1ac0      	subs	r0, r0, r3
 8005378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800537a:	b10b      	cbz	r3, 8005380 <__sflush_r+0x48>
 800537c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537e:	1ac0      	subs	r0, r0, r3
 8005380:	2300      	movs	r3, #0
 8005382:	4602      	mov	r2, r0
 8005384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005386:	6a21      	ldr	r1, [r4, #32]
 8005388:	4628      	mov	r0, r5
 800538a:	47b0      	blx	r6
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	d106      	bne.n	80053a0 <__sflush_r+0x68>
 8005392:	6829      	ldr	r1, [r5, #0]
 8005394:	291d      	cmp	r1, #29
 8005396:	d82b      	bhi.n	80053f0 <__sflush_r+0xb8>
 8005398:	4a29      	ldr	r2, [pc, #164]	; (8005440 <__sflush_r+0x108>)
 800539a:	410a      	asrs	r2, r1
 800539c:	07d6      	lsls	r6, r2, #31
 800539e:	d427      	bmi.n	80053f0 <__sflush_r+0xb8>
 80053a0:	2200      	movs	r2, #0
 80053a2:	6062      	str	r2, [r4, #4]
 80053a4:	04d9      	lsls	r1, r3, #19
 80053a6:	6922      	ldr	r2, [r4, #16]
 80053a8:	6022      	str	r2, [r4, #0]
 80053aa:	d504      	bpl.n	80053b6 <__sflush_r+0x7e>
 80053ac:	1c42      	adds	r2, r0, #1
 80053ae:	d101      	bne.n	80053b4 <__sflush_r+0x7c>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b903      	cbnz	r3, 80053b6 <__sflush_r+0x7e>
 80053b4:	6560      	str	r0, [r4, #84]	; 0x54
 80053b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053b8:	602f      	str	r7, [r5, #0]
 80053ba:	2900      	cmp	r1, #0
 80053bc:	d0c9      	beq.n	8005352 <__sflush_r+0x1a>
 80053be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c2:	4299      	cmp	r1, r3
 80053c4:	d002      	beq.n	80053cc <__sflush_r+0x94>
 80053c6:	4628      	mov	r0, r5
 80053c8:	f7ff fbea 	bl	8004ba0 <_free_r>
 80053cc:	2000      	movs	r0, #0
 80053ce:	6360      	str	r0, [r4, #52]	; 0x34
 80053d0:	e7c0      	b.n	8005354 <__sflush_r+0x1c>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b0      	blx	r6
 80053d8:	1c41      	adds	r1, r0, #1
 80053da:	d1c8      	bne.n	800536e <__sflush_r+0x36>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0c5      	beq.n	800536e <__sflush_r+0x36>
 80053e2:	2b1d      	cmp	r3, #29
 80053e4:	d001      	beq.n	80053ea <__sflush_r+0xb2>
 80053e6:	2b16      	cmp	r3, #22
 80053e8:	d101      	bne.n	80053ee <__sflush_r+0xb6>
 80053ea:	602f      	str	r7, [r5, #0]
 80053ec:	e7b1      	b.n	8005352 <__sflush_r+0x1a>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	e7ad      	b.n	8005354 <__sflush_r+0x1c>
 80053f8:	690f      	ldr	r7, [r1, #16]
 80053fa:	2f00      	cmp	r7, #0
 80053fc:	d0a9      	beq.n	8005352 <__sflush_r+0x1a>
 80053fe:	0793      	lsls	r3, r2, #30
 8005400:	680e      	ldr	r6, [r1, #0]
 8005402:	bf08      	it	eq
 8005404:	694b      	ldreq	r3, [r1, #20]
 8005406:	600f      	str	r7, [r1, #0]
 8005408:	bf18      	it	ne
 800540a:	2300      	movne	r3, #0
 800540c:	eba6 0807 	sub.w	r8, r6, r7
 8005410:	608b      	str	r3, [r1, #8]
 8005412:	f1b8 0f00 	cmp.w	r8, #0
 8005416:	dd9c      	ble.n	8005352 <__sflush_r+0x1a>
 8005418:	6a21      	ldr	r1, [r4, #32]
 800541a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800541c:	4643      	mov	r3, r8
 800541e:	463a      	mov	r2, r7
 8005420:	4628      	mov	r0, r5
 8005422:	47b0      	blx	r6
 8005424:	2800      	cmp	r0, #0
 8005426:	dc06      	bgt.n	8005436 <__sflush_r+0xfe>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542e:	81a3      	strh	r3, [r4, #12]
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	e78e      	b.n	8005354 <__sflush_r+0x1c>
 8005436:	4407      	add	r7, r0
 8005438:	eba8 0800 	sub.w	r8, r8, r0
 800543c:	e7e9      	b.n	8005412 <__sflush_r+0xda>
 800543e:	bf00      	nop
 8005440:	dfbffffe 	.word	0xdfbffffe

08005444 <_fflush_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	4605      	mov	r5, r0
 800544a:	460c      	mov	r4, r1
 800544c:	b913      	cbnz	r3, 8005454 <_fflush_r+0x10>
 800544e:	2500      	movs	r5, #0
 8005450:	4628      	mov	r0, r5
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	b118      	cbz	r0, 800545e <_fflush_r+0x1a>
 8005456:	6a03      	ldr	r3, [r0, #32]
 8005458:	b90b      	cbnz	r3, 800545e <_fflush_r+0x1a>
 800545a:	f7ff f9a9 	bl	80047b0 <__sinit>
 800545e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f3      	beq.n	800544e <_fflush_r+0xa>
 8005466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005468:	07d0      	lsls	r0, r2, #31
 800546a:	d404      	bmi.n	8005476 <_fflush_r+0x32>
 800546c:	0599      	lsls	r1, r3, #22
 800546e:	d402      	bmi.n	8005476 <_fflush_r+0x32>
 8005470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005472:	f7ff fb92 	bl	8004b9a <__retarget_lock_acquire_recursive>
 8005476:	4628      	mov	r0, r5
 8005478:	4621      	mov	r1, r4
 800547a:	f7ff ff5d 	bl	8005338 <__sflush_r>
 800547e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005480:	07da      	lsls	r2, r3, #31
 8005482:	4605      	mov	r5, r0
 8005484:	d4e4      	bmi.n	8005450 <_fflush_r+0xc>
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	059b      	lsls	r3, r3, #22
 800548a:	d4e1      	bmi.n	8005450 <_fflush_r+0xc>
 800548c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800548e:	f7ff fb85 	bl	8004b9c <__retarget_lock_release_recursive>
 8005492:	e7dd      	b.n	8005450 <_fflush_r+0xc>

08005494 <__swhatbuf_r>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	460c      	mov	r4, r1
 8005498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549c:	2900      	cmp	r1, #0
 800549e:	b096      	sub	sp, #88	; 0x58
 80054a0:	4615      	mov	r5, r2
 80054a2:	461e      	mov	r6, r3
 80054a4:	da0d      	bge.n	80054c2 <__swhatbuf_r+0x2e>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	bf0c      	ite	eq
 80054b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80054b6:	2340      	movne	r3, #64	; 0x40
 80054b8:	2000      	movs	r0, #0
 80054ba:	6031      	str	r1, [r6, #0]
 80054bc:	602b      	str	r3, [r5, #0]
 80054be:	b016      	add	sp, #88	; 0x58
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	466a      	mov	r2, sp
 80054c4:	f000 f848 	bl	8005558 <_fstat_r>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	dbec      	blt.n	80054a6 <__swhatbuf_r+0x12>
 80054cc:	9901      	ldr	r1, [sp, #4]
 80054ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80054d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80054d6:	4259      	negs	r1, r3
 80054d8:	4159      	adcs	r1, r3
 80054da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054de:	e7eb      	b.n	80054b8 <__swhatbuf_r+0x24>

080054e0 <__smakebuf_r>:
 80054e0:	898b      	ldrh	r3, [r1, #12]
 80054e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054e4:	079d      	lsls	r5, r3, #30
 80054e6:	4606      	mov	r6, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	d507      	bpl.n	80054fc <__smakebuf_r+0x1c>
 80054ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	2301      	movs	r3, #1
 80054f6:	6163      	str	r3, [r4, #20]
 80054f8:	b002      	add	sp, #8
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	ab01      	add	r3, sp, #4
 80054fe:	466a      	mov	r2, sp
 8005500:	f7ff ffc8 	bl	8005494 <__swhatbuf_r>
 8005504:	9900      	ldr	r1, [sp, #0]
 8005506:	4605      	mov	r5, r0
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff fbb5 	bl	8004c78 <_malloc_r>
 800550e:	b948      	cbnz	r0, 8005524 <__smakebuf_r+0x44>
 8005510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005514:	059a      	lsls	r2, r3, #22
 8005516:	d4ef      	bmi.n	80054f8 <__smakebuf_r+0x18>
 8005518:	f023 0303 	bic.w	r3, r3, #3
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	e7e3      	b.n	80054ec <__smakebuf_r+0xc>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	6020      	str	r0, [r4, #0]
 8005528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552c:	81a3      	strh	r3, [r4, #12]
 800552e:	9b00      	ldr	r3, [sp, #0]
 8005530:	6163      	str	r3, [r4, #20]
 8005532:	9b01      	ldr	r3, [sp, #4]
 8005534:	6120      	str	r0, [r4, #16]
 8005536:	b15b      	cbz	r3, 8005550 <__smakebuf_r+0x70>
 8005538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800553c:	4630      	mov	r0, r6
 800553e:	f000 f81d 	bl	800557c <_isatty_r>
 8005542:	b128      	cbz	r0, 8005550 <__smakebuf_r+0x70>
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	81a3      	strh	r3, [r4, #12]
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	431d      	orrs	r5, r3
 8005554:	81a5      	strh	r5, [r4, #12]
 8005556:	e7cf      	b.n	80054f8 <__smakebuf_r+0x18>

08005558 <_fstat_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	; (8005578 <_fstat_r+0x20>)
 800555c:	2300      	movs	r3, #0
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	f7fb fec0 	bl	80012ea <_fstat>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	d102      	bne.n	8005574 <_fstat_r+0x1c>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	b103      	cbz	r3, 8005574 <_fstat_r+0x1c>
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	bd38      	pop	{r3, r4, r5, pc}
 8005576:	bf00      	nop
 8005578:	20000398 	.word	0x20000398

0800557c <_isatty_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d06      	ldr	r5, [pc, #24]	; (8005598 <_isatty_r+0x1c>)
 8005580:	2300      	movs	r3, #0
 8005582:	4604      	mov	r4, r0
 8005584:	4608      	mov	r0, r1
 8005586:	602b      	str	r3, [r5, #0]
 8005588:	f7fb febf 	bl	800130a <_isatty>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_isatty_r+0x1a>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	b103      	cbz	r3, 8005596 <_isatty_r+0x1a>
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	20000398 	.word	0x20000398

0800559c <_sbrk_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d06      	ldr	r5, [pc, #24]	; (80055b8 <_sbrk_r+0x1c>)
 80055a0:	2300      	movs	r3, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	4608      	mov	r0, r1
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fb fec8 	bl	800133c <_sbrk>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_sbrk_r+0x1a>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_sbrk_r+0x1a>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20000398 	.word	0x20000398

080055bc <_init>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr

080055c8 <_fini>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	bf00      	nop
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr
